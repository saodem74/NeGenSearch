Requirements elicitation From Wikipedia, the free encyclopedia Jump to navigation Jump to search In requirements engineering , requirements elicitation is the practice of researching and discovering the requirements of a system from users, customers, and other stakeholders. 1  The practice is also sometimes referred to as  requirement gathering . The term elicitation is used in books and research to raise the fact that good requirements cannot just be collected from the customer, as would be indicated by the name requirements gathering. Requirements elicitation is non-trivial because you can never be sure you get all requirements from the user and customer by just asking them what the system should do or not do for Saf ety and Reliability. Requirements elicitation practices include interviews, questionnaires, user observation, workshops, brainstorming , use cases , role playing and prototyping . Before requirements can be analyzed, modeled, or specified they must be gathered through an elicitation process. Requirements elicitation is a part of the requirements engineering process, usually followed by analysis and specification of the requirements. Commonly used elicitation processes are the stakeholder meetings or interviews. 2  For example, an important first meeting could be between software engineers and customers where they discuss their perspective of the requirements. Contents 1 Problems 2 Guidelines 3 Sequence of steps 4 Complementary approaches 5 Non-functional requirements 6 Bibliography 7 References Problems  edit  The requirements elicitation process may appear simple ask the customer, the users and others what the objectives for the system or product are, what is to be accomplished, how the system or product fits into the needs of business, and finally, how the system or product is to be used on a day-to-day basis. However, issues may arise that complicate the process. In 1992, Christel and Kang identified problems that indicate the challenges for requirements elicitation 3   Problems of scope . The boundary of the system is ill-defined or the customersusers specify unnecessary technical details that may confuse, rather than clarify, overall system objectives. Problems of understanding . The customersusers are not completely sure of what is needed, have a poor understanding of the capabilities and limitations of their computing environment, dont have a full understanding of the problem domain, have trouble communicating needs to the system engineer, omit information that is believed to be  obvious , specify requirements that conflict with the needs of other customersusers, or specify requirements that are ambiguous or untestable. Problems of volatility . The requirements change over time. The rate of change is sometimes referred to as the level of requirement volatility Requirements quality can be improved through these approaches 4  Visualization . Using tools that promote better understanding of the desired end-product such as visualization and simulation. Consistent language . Using simple, consistent definitions for requirements described in natural language and use the business terminology that is prevalent in the enterprise. Guidelines . Following organizational guidelines that describe the collection techniques and the types of requirements to be collected. These guidelines are then used consistently across projects. Consistent use of templates . Producing a consistent set of models and templates to document the requirements. Documenting dependencies . Documenting dependencies and interrelationships among requirements. Analysis of changes . Performing root cause analysis of changes to requirements and making corrective actions. Guidelines  edit  In 1997, Sommerville and Sawyer suggested a set of guidelines for requirements elicitation, to address concerns such as those identified by Christel and Kang 5  Assess the business and technical feasibility for the proposed system Identify the people who will help specify requirements and understand their organizational bias Define the technical environment e.g., computing architecture, operating system, telecommunications needs into which the system or product will be placed Identify domain constraints i.e., characteristics of the business environment specific to the application domain that limit the functionality or performance of the system or product to be built Define one or more requirements elicitation methods e.g., interviews, focus groups , team meetings Solicit participation from many people so that requirements are defined from different points of view be sure to identify the rationale for each requirement that is recorded Identify ambiguous requirements as candidates for prototyping Create usage scenarios or use cases to help customersusers better identify key requirements Sequence of steps  edit  In 2004, Goldsmith suggested a problem pyramid of six steps which must be performed in sequence 6  Identify the real problem, opportunity or challenge Identify the current measures which show that the problem is real Identify the goal measures to show the problem has been addressed and the value of meeting it Identify the as-is causes of the problem, as it is the causes that must be solved, not the problem directly Define the business wants that must be delivered to meet the goal measures Specify a product design how to satisfy the real business requirements However Goldsmith notes that identifying the real problem is exceedingly difficult. 6  Complementary approaches  edit  In 2009, Alexander and Beus-Dukic proposed a set of complementary approaches for discovering requirements 7  Identifying stakeholders Modeling goals Modeling context Discovering scenarios or Use cases  Discovering qualities and constraints  Non-functional requirements  Modeling rationale and assumptions Writing definitions of terms Analyzing measurements acceptance criteria Analyzing priorities Alexander and Beus-Dukic suggested that these approaches could be conducted with individuals as in interviews , with groups as in focused meetings known as workshops, or via Electronic meeting systems , or from things artifacts such as prototypes . 7  Non-functional requirements  edit  In 2009, Miller proposed a battery of over 2,000 questions to elicit non-functional requirements. 8  Her approach is to build a stakeholder profile and then interview those stakeholders extensively. The questions are grouped into three sections, all focused on user needs 8  Operation how well does the system perform for daily use Revision how easy is it to correct errors and add functions Transition How easy is it to adapt to changes in the technical environment In 2013, Murali Chemuturi suggested the usage of Ancillary Functionality Requirements instead of Non-Functional Requirements as Non-Functional connotes never functional. Second, these requirements in fact fulfill some requirements which are supportive to main or Core Functionality Requirements. 9  Bibliography  edit  Alexander, Ian F. Beus-Dukic, Ljerka March 2009. Discovering Requirements How to Specify Products and Services . John Wiley. ISBN   978-0-470-71240-5 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em Goldsmith, Robin F. 2004. Discovering Real Business Requirements for Software Project Success . Artech House. ISBN   1-58053-771-5 . Miller, Roxanne E. 2009. The Quest for Software Requirements Probing Questions to Bring Nonfunctional Requirements Into Focus Proven Techniques to Get the Right Stakeholder Involvement . MavenMark Books. ISBN   978-1-59598-067-0 . Sommerville, Ian  Sawyer, Pete May 1997. Requirements Engineering A Good Practice Guide . John Wiley. ISBN   0-471-97444-7 . References  edit   Requirements Engineering A good practice guide, Ramos Rowel and Kurts Alfeche, John Wiley and Sons, 1997  Kusiak, Jan. How To Interview Your Boss . IRM Training .  Christel, Michael and Kyo C. Kang September 1992. Issues in Requirements Elicitation . Technical Report CMUSEI-92-TR-012 . CMU  SEI . Retrieved January 14, 2012 .  PMI Requirements CoP Webinar on Requirements .Quality .  Sommerville and Sawyer, 1997.  a b Goldsmith, 2004. Page 12  a b Alexander and Beus-Dukic, 2009.  a b Miller, 2009.  Chemuturi, M. 2013. Requirements Engineering and Management for Software Development Projects . doi  10.1007978-1-4614-5377-2 . ISBN   978-1-4614-5376-5 . Retrieved from  httpsen.wikipedia.orgwindex.phptitleRequirements_elicitation oldid914545186  Categories  Software requirements