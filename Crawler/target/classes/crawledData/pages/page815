Boolean data type From Wikipedia, the free encyclopedia Jump to navigation Jump to search In computer science , the Boolean data type is a data type that has one of two possible values usually denoted true and false , intended to represent the two truth values of logic and Boolean algebra . It is named after George Boole , who first defined an algebraic system of logic in the mid 19th century. The Boolean data type is primarily associated with conditional statements, which allow different actions by changing control flow depending on whether a programmer-specified Boolean condition evaluates to true or false. It is a special case of a more general logical data type see probabilistic logic  logic doesnt always need to be Boolean. Contents 1 Generalities 2 ALGOL and the built-in boolean type 3 Fortran 4 Lisp and Scheme 5 Pascal, Ada, and Haskell 6 C, C, Objective-C, AWK 7 Perl and Lua 8 Tcl 9 Python, Ruby, and JavaScript 10 SQL 11 See also 12 References Generalities  edit  In programming languages with a built-in Boolean data type, such as Pascal and Java , the comparison operators such as  and  are usually defined to return a Boolean value. Conditional and iterative commands may be defined to test Boolean-valued expressions. Languages with no explicit Boolean data type, like C90 and Lisp , may still represent truth values by some other data type. Common Lisp uses an empty list for false, and any other value for true. The C programming language uses an integer type, where relational expressions like i  j and logical expressions connected by   and  are defined to have value 1 if true and 0 if false, whereas the test parts of if , while , for , etc., treat any non-zero value as true. 1  2  Indeed, a Boolean variable may be regarded and implemented as a numerical variable with one binary digit  bit , which can store only two values. The implementation of Booleans in computers are most likely represented as a full word , rather than a bit this is usually due to the ways computers transfer blocks of information. Most programming languages, even those with no explicit Boolean type, have support for Boolean algebraic operations such as conjunction  AND ,  ,  , disjunction  OR ,  ,  , equivalence  EQV ,  ,  , exclusive or non-equivalence  XOR , NEQV ,  ,  , and negation  NOT ,  ,  . In some languages, like Ruby , Smalltalk , and Alice the true and false values belong to separate classes , i.e., True and False , respectively, so there is no one Boolean type . In SQL , which uses a three-valued logic for explicit comparisons because of its special treatment of Nulls , the Boolean data type introduced in SQL1999  is also defined to include more than two truth values, so that SQL Booleans can store all logical values resulting from the evaluation of predicates in SQL. A column of Boolean type can also be restricted to just TRUE and FALSE though. ALGOL and the built-in boolean type  edit  One of the earliest programming languages to provide an explicit boolean data type was ALGOL 60 1960 with values true and false and logical operators denoted by symbols   displaystyle wedge   and,   displaystyle vee   or,   displaystyle supset   implies,   displaystyle equiv   equivalence, and   displaystyle neg   not. Due to input device and character set limits on many computers of the time, however, most compilers used alternative representations for many of the operators, such as AND or AND . This approach with boolean as a built-in either primitive or otherwise predefined data type was adopted by many later programming languages, such as Simula 67 1967, ALGOL 68 1970, 3  Pascal 1970, Ada 1980, Java 1995, and C 2000, among others. Fortran  edit  The first version of FORTRAN 1957 and its successor FORTRAN II 1958 had no logical values or operations even the conditional IF statement took an arithmetic expression and branched to one of three locations according to its sign see arithmetic IF . FORTRAN IV 1962, however, followed the ALGOL 60 example by providing a Boolean data type  LOGICAL , truth literals  .TRUE. and .FALSE. , Boolean-valued numeric comparison operators  .EQ. , .GT. , etc., and logical operators  .NOT. , .AND. , .OR. . In FORMAT statements, a specific control character  L  was provided for the parsing or formatting of logical values. 4  Lisp and Scheme  edit  The language Lisp 1958 never had a built-in Boolean data type. Instead, conditional constructs like cond assume that the logical value false is represented by the empty list  , which is defined to be the same as the special atom nil or NIL  whereas any other s-expression is interpreted as true . For convenience, most modern dialects of Lisp predefine the atom t to have value t , so that t can be used as a mnemonic notation for true . This approach  any value can be used as a Boolean value  was retained in most Lisp dialects  Common Lisp , Scheme , Emacs Lisp , and similar models were adopted by many scripting languages , even ones having a distinct Boolean type or Boolean values although which values are interpreted as false and which are true vary from language to language. In Scheme, for example, the false value is an atom distinct from the empty list, so the latter is interpreted as true . Pascal, Ada, and Haskell  edit  The language Pascal 1970 introduced the concept of programmer-defined enumerated types . A built-in Boolean data type was then provided as a predefined enumerated type with values FALSE and TRUE . By definition, all comparisons, logical operations, and conditional statements applied to andor yielded Boolean values. Otherwise, the Boolean type had all the facilities which were available for enumerated types in general, such as ordering and use as indices. In contrast, converting between Boolean s and integers or any other types still required explicit tests or function calls, as in ALGOL 60. This approach  Boolean is an enumerated type  was adopted by most later languages which had enumerated types, such as Modula , Ada , and Haskell . C, C, Objective-C, AWK  edit  Initial implementations of the language C 1972 provided no Boolean type, and to this day Boolean values are commonly represented by integers  int s in C programs. The comparison operators   ,  , etc. are defined to return a signed integer  int  result, either 0 for false or 1 for true. Logical operators    ,  ,  , etc. and condition-testing statements  if , while  assume that zero is false and all other values are true. After enumerated types  enum s were added to the American National Standards Institute version of C, ANSI C 1989, many C programmers got used to defining their own Boolean types as such, for readability reasons. However, enumerated types are equivalent to integers according to the language standards so the effective identity between Booleans and integers is still valid for C programs. Standard C since C99  provides a boolean type, called _Bool . By including the header stdbool.h , one can use the more intuitive name bool and the constants true and false . The language guarantees that any two true values will compare equal which was impossible to achieve before the introduction of the type. Boolean values still behave as integers, can be stored in integer variables, and used anywhere integers would be valid, including in indexing, arithmetic, parsing, and formatting. This approach  Boolean values are just integers  has been retained in all later versions of C. C has a separate Boolean data type bool , but with automatic conversions from scalar and pointer values that are very similar to those of C. This approach was adopted also by many later languages, especially by some scripting languages such as AWK . Objective-C also has a separate Boolean data type BOOL , with possible values being YES or NO , equivalents of true and false respectively. 5  Also, in Objective-C compilers that support C99, Cs _Bool type can be used, since Objective-C is a superset of C. Perl and Lua  edit  Perl has no boolean data type. Instead, any value can behave as boolean in boolean context condition of if or while statement, argument of   or  , etc.. The number 0 , the strings 0 and  , the empty list  , and the special value undef evaluate to false. 6  All else evaluates to true. Lua has a boolean data type, but non-boolean values can also behave as booleans. The non-value nil evaluates to false, whereas every other data type always evaluates to true, regardless of value. Tcl  edit  Tcl has no separate Boolean type. Like in C, the integers 0 false and 1 true - in fact any nonzero integer are used. 7  Examples of coding set v 1 if  v   puts V is 1 or true  The above will show V is 1 or true since the expression evaluates to 1 set v  if  v  .... The above will render an error as variable v cannot be evaluated as 0 or 1 Python, Ruby, and JavaScript  edit  Python , from version 2.3 forward, has a bool type which is a subclass of int , the standard integer type. 8  It has two possible values True and False , which are special versions of 1 and 0 respectively and behave as such in arithmetic contexts. Also, a numeric value of zero integer or fractional, the null value  None , the empty string , and empty containers i.e. lists , sets , etc. are considered Boolean false all other values are considered Boolean true by default. 9  Classes can define how their instances are treated in a Boolean context through the special method __nonzero__ Python 2 or __bool__ Python 3. For containers, __len__ the special method for determining the length of containers is used if the explicit Boolean conversion method is not defined. In Ruby , in contrast, only nil Rubys null value and a special false object are false , all else including the integer 0 and empty arrays is true . In JavaScript , the empty string   , null , undefined , NaN , 0, 0 and false 10  are sometimes called falsy of which the complement is truthy  to distinguish between strictly type-checked and coerced Booleans. 11  Languages such as PHP also use this approach. SQL  edit  Main article Null SQL   Comparisons with NULL and the three-valued logic 3VL Booleans appear in SQL when a condition is needed, such as WHERE clause, in form of predicate which is produced by using operators such as comparison operators, IN operator, IS NOT NULL etc. However, apart from TRUE and FALSE, these operators can also yield a third state, called UNKNOWN, when comparison with NULL is made. The treatment of boolean values differs between SQL systems. For example, in Microsoft SQL Server , boolean value is not supported at all, neither as a standalone data type nor representable as an integer. It shows an error message An expression of non-boolean type specified in a context where a condition is expected if a column is directly used in the WHERE clause, e.g. SELECT a FROM t WHERE a , while statement such as SELECT column IS NOT NULL FROM t yields a syntax error. The BIT data type, which can only store integers 0 and 1 apart from NULL, is commonly used as a workaround to store Boolean values, but workarounds need to be used such as UPDATE t SET flag  IIFcol IS NOT NULL, 1, 0 WHERE flag  0 to convert between the integer and boolean expression. In PostgreSQL , there is a distinct BOOLEAN type as in the standard 12  which allows predicates to be stored directly into a BOOLEAN column, and allows using a BOOLEAN column directly as a predicate in WHERE clause. In MySQL , BOOLEAN is treated as an alias as TINYINT1 13  , TRUE is the same as integer 1 and FALSE is the same is integer 0. 14  , and treats any non-zero integer as true when evaluating conditions. The SQL92 standard introduced IS NOT TRUE, IS NOT FALSE, IS NOT UNKNOWN operators which evaluate a predicate, which predated the introduction of boolean type in SQL1999 The SQL1999 standard introduced a BOOLEAN data type as an optional feature T031. When restricted by a NOT NULL constraint, a SQL BOOLEAN behaves like Booleans in other languages, which can store only TRUE and FALSE values. However, if it is nullable, which is the default like all other SQL data types, it can have the special null value also. Although the SQL standard defines three literals for the BOOLEAN type  TRUE, FALSE, and UNKNOWN  it also says that the NULL BOOLEAN and UNKNOWN may be used interchangeably to mean exactly the same thing. 15  16  This has caused some controversy because the identification subjects UNKNOWN to the equality comparison rules for NULL. More precisely UNKNOWN  UNKNOWN is not TRUE but UNKNOWNNULL. 17  As of 2012 few major SQL systems implement the T031 feature. 18  Firebird and PostgreSQL are notable exceptions, although PostgreSQL implements no UNKNOWN literal NULL can be used instead. 19  See also  edit  true and false commands , for shell scripting Shannons expansion stdbool.h , C99 definitions for boolean Boolean differential calculus v t e Data types Uninterpreted Bit Byte Trit Tryte Word Bit array Numeric Arbitrary-precision or bignum Complex Decimal Fixed point Floating point Double precision Extended precision Long double Octuple precision Quadruple precision Single precision Reduced precision Minifloat Half precision bfloat16 Integer signedness Interval Rational Pointer Address physical virtual Reference Text Character String null-terminated Composite Algebraic data type generalized Array Associative array Class Dependent Equality Inductive Intersection List Object metaobject Option type Product Record or Struct Refinement Set Union tagged Other Boolean Bottom type Collection Enumerated type Exception Function type Opaque data type Recursive data type Semaphore Stream Top type Type class Unit type Void Related topics Abstract data type Data structure Generic Kind metaclass Parametric polymorphism Primitive data type Protocol interface Subtyping Type constructor Type conversion Type system Type theory See also platform-dependent and independent units of information References  edit   Kernighan, Brian W  Ritchie, Dennis M 1978. The C Programming Language 1st ed.. Englewood Cliffs, NJ  Prentice Hall . p.  41. ISBN   0-13-110163-3 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Plauger, PJ  Brodie, Jim 1992 1989. ANSI and ISO Standard C Programmers reference . Microsoft Press . pp.  8693. ISBN   1-55615-359-7 .  Report on the Algorithmic Language ALGOL 68, Section 10.2.2 PDF . August 1968. Archived PDF from the original on 6 April 2008 . Retrieved 30 April 2007 . Cite uses deprecated parameter deadurl  help   Digital Equipment Corporation, DECSystem10 FORTRAN IV Programmers Reference Manual . Reprinted in Mathematical Languages Handbook . Online version Archived 2011-08-14 at the Wayback Machine accessed 2011-11-16.  Guides and Sample Code . developer.apple.com . Archived from the original on 7 September 2011 . Retrieved 1 May 2018 . Cite uses deprecated parameter deadurl  help   perlsyn - Perl Syntax  Truth and Falsehood . Archived from the original on 26 August 2013 . Retrieved 10 September 2013 . Cite uses deprecated parameter deadurl  help   PEP 285 -- Adding a bool type . 4 May 2011. Archived from the original on 28 March 2018 . Retrieved 28 March 2018 . Cite uses deprecated parameter deadurl  help   Van Rossum, Guido 3 April 2002. PEP 285 -- Adding a bool type . Archived from the original on 1 May 2013 . Retrieved 15 May 2013 . Cite uses deprecated parameter deadurl  help   Expressions . Python v3.3.2 documentation . Archived from the original on 22 May 2013 . Retrieved 15 May 2013 . Cite uses deprecated parameter deadurl  help   ECMAScript Language Specification PDF . p.  43. Archived PDF from the original on 2015-04-12. Cite uses deprecated parameter deadurl  help   The Elements of JavaScript Style . Douglas Crockford. Archived from the original on 17 March 2011 . Retrieved 5 March 2011 . Cite uses deprecated parameter deadurl  help   1  2  3  C. Date 2011. SQL and Relational Theory How to Write Accurate SQL Code . OReilly Media, Inc. p.  83. ISBN   978-1-4493-1640-2 .  ISOIEC 9075-22011 4.5  Martyn Prigmore 2007. Introduction to Databases With Web Applications . Pearson Education Canada. p.  197. ISBN   978-0-321-26359-9 .  Troels Arvin, Survey of BOOLEAN data type implementation Archived 2005-03-09 at the Wayback Machine  PostgreSQL Documentation 10 8.6. Boolean Type . www.postgresql.org . Archived from the original on 9 March 2018 . Retrieved 1 May 2018 . Cite uses deprecated parameter deadurl  help  Retrieved from  httpsen.wikipedia.orgwindex.phptitleBoolean_data_type oldid910069819  Categories  Boolean algebra Data types Primitive types Hidden categories CS1 errors deprecated parameters Webarchive template wayback links Articles with example ALGOL 68 code