Scaled agile framework From Wikipedia, the free encyclopedia Jump to navigation Jump to search Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e The Scaled Agile Framework abbreviated as SAFe  is a set of organization and workflow patterns intended to guide enterprises in scaling lean and agile practices. 1  2  Along with large-scale Scrum LeSS, disciplined agile delivery DAD, and Nexus, SAFe is one of a growing number of frameworks that seek to address the problems encountered when scaling beyond a single team. 3  4  SAFe is made freely available by Scaled Agile, Inc., which retains the copyrights and registered trademarks. 5  SAFe promotes alignment, collaboration, and delivery across large numbers of agile teams. It was developed by and for practitioners, by leveraging three primary bodies of knowledge agile software development , lean product development , and systems thinking . 6  The primary reference for the scaled agile framework was originally the development of a big picture view of how work flowed from product management or other stakeholders , through governance , program , and development teams , out to customers . 7  8  With the collaboration of others in the agile community, this was progressively refined and then first formally described in a 2007 book. 9  The framework continues to be developed and shared publicly with an academy and an accreditation scheme supporting those who seek to implement, support, or train others in the adoption of SAFe. Version 4.5, was released in June 2017 10  while the latest edition, version 4.6, was released in October 2018. 11  While SAFe continues to be recognised as the most common approach to scaling agile practices at 30 percent and growing, 12  13   page  needed  14  , it also receive criticism for being too hierarchical and inflexible. 15  Contents 1 Challenges of scaling agile principles and practices 1.1 Coping with longer planning horizons 1.2 Keeping agile at abstract levels of responsibility 1.3 Dealing with delegated authority 1.4 Synchronizing deliverables 1.5 Allowing time for innovation and planning 2 Implementation 2.1 Underlying principles of SAFe 2.2 The SAFe framework 2.3 Certifications 3 See also 4 References 5 Further reading 6 External links Challenges of scaling agile principles and practices  edit  Coping with longer planning horizons  edit  Development teams typically refine their backlog up to two to three iterations ahead, but in larger organizations the product marketing team needs to plan further ahead for their commitments to market and discussions with customers. 16  They will often work with a very high level, 12 to 18-month roadmap, then plan collaboratively with the teams for three months of work. 17  The development teams will still get into detailed refinement 2-3 iterations ahead, only getting into detailed task plans for the next iteration. 18  Keeping agile at abstract levels of responsibility  edit  While development teams have a number of frameworks that define how they should be agile, there is very little that describes this for management. SAFe delivers many of the same principles, such as cross-functional teams, to the groups that handle the more abstract levels of responsibility and planning product and portfolio. 19  SAFe has also been criticized for aggregating too many disparate practices. 20  Dealing with delegated authority  edit  In Scrum , the product owner is expected to assume responsibility for the full product life-cycle , including the return on investment of development decisions, as well as performance in market. On large-scale developments, the organization wants a view across multiple team backlogs, such as provided by a product manager . 21  Although SAFe assumes the product owner role sits with product management, it has nonetheless been criticized for separating product owners into the development organization. 22  Synchronizing deliverables  edit  Agile frameworks are designed to enable the development team to be autonomous and free to design how they work. SAFe acknowledges that, at the scale of many tens or hundreds of development teams, it becomes increasingly chaotic for teams to fully self-organize. 23  It therefore puts some constraints on this, so that where teams are working on the same product, their deliverables can be better synchronized for releasing together, although this has been one area in which SAFe has been criticized. 21  22  Allowing time for innovation and planning  edit  The SAFe planning cycle recommends including an additional iteration after a release, so that teams can improve their practices and are ready for the next planning increment. Earlier editions of SAFe also designed this to be a hardening iteration, that is to stabilize or harden the product before releasing it. This was predicated on the complications of working with large integration environments where dependencies meant that you could not test everything until the very end. SAFe was criticized for this as it represented an anti-agile or waterfall element. 24  This is not included in recent editions of SAFe. Implementation  edit  This section may rely excessively on sources too closely associated with the subject , potentially preventing the article from being verifiable and neutral . Please help improve it by replacing them with more appropriate citations to reliable, independent, third-party sources .  July 2018   Learn how and when to remove this template message  Underlying principles of SAFe  edit  According to its authors, SAFe is based upon nine underlying concepts, which are derived from existing lean and agile principles, as well as observation 25  Take an economic view Apply systems thinking Assume variability preserve options Build incrementally with fast, integrated learning cycles Base milestones on objective evaluation of working systems Visualize and limit work-in-progress, reduce batch sizes, and manage queue lengths Apply cadence timing, synchronize with cross-domain planning Unlock the intrinsic motivation of knowledge workers Decentralize decision-making The SAFe framework  edit  In SAFe version 4.5, there are four configurations essential, portfolio, large solution and full 26  Essential SAFe is the most basic configuration. It describes the most critical elements needed and is intended to provide the majority of the frameworks benefits. It includes the team and program level which it calls agile release trains or ARTs. Portfolio SAFe includes concerns for strategic direction, investment funding, and lean governance. Large Solution SAFe allows for coordination and synchronization across multiple programs, but without the portfolio considerations. In earlier versions of SAFe, this level was referred to as value stream . Full SAFe combines the other three levels. Certifications  edit  Scaled Agile provides certifications that cover different areas and knowledge levels. 27  See also  edit  Scrum of Scrums References  edit   Hayes, Will Lapham, Mary Ann Miller, Suzanne Wrubel, Eileen Capell, Peter 2016. Scaling Agile Methods for Department of Defense Programs . Software Engineering Institute. CMUSEI-2016-TN-005. .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Athrow, Desiree 29 January 2015. Why Continuous Delivery is key to speeding up software development . TechRadar . Retrieved 2017-11-27 .  Linders, Ben January 22, 2015. Scaling Agile with the Disciplined Agile Delivery Framework . InfoQ . Retrieved 2017-11-27 .  van Haaster, K 2014. Agile in-the-large Getting from Paradox to Paradigm . Unpublished paper from Charles Sturt University.  Permissions FAQ . Scaled Agile . Retrieved 13 July 2018 .  King, Michael 2017. Serving Federal Customers with SAFe Concepts PDF . Capability Counts Conference Proceedings .  Bridgwater, Adrian August 7, 2013. Real Agile Means Everybody Is Agile . Dr. Dobbs . Retrieved 2017-11-27 .  Linders, Ben August 28, 2014. Death by Planning in Agile Adoption . InfoQ . Retrieved 2017-11-27 .  Leffingwell, Dean 2007. Scaling Software Agility Best Practices for Large Enterprises . Addison-Wesley. ISBN   978-0321458193 .  Cleveland, Regina. Scaled Agile, Inc. Releases SAFe 4.5 . prweb.com . Retrieved 2017-09-11 .  Welcome to SAFe 4.6 for Lean Enterprises . Retrieved 2019-01-30 .  13th Annual State of Agile Report . State of Agile Survey . CollabNet VersionOne. 2019 . Retrieved 2019-08-27 .  Link, P Lewrick, M 29 September 2014. Agile Methods in a New Area of Innovation Management PDF . Science to Business Marketing Conference .  Baptista, Roberto 28 January 2015. Profissionais brasileiros e o interesse por treinamentos de especializao . Computerworld Brazil . Retrieved 28 January 2015 .  Schwaber, Ken 2013-08-06. unSAFe at any speed . Telling It Like It Is . Retrieved 2017-11-11 .  Eklund, U Olsson, H Strm, N 2014. Industrial challenges of scaling agile in mass-produced embedded systems . Agile Methods. Large-Scale Development, Refactoring, Testing, and Estimation . Springer International Publishing. ISBN   9783319143583 .  Heusser, Matt 23 September 2014. Agile testing methods for multiple teams . SearchSoftwareQuality . Retrieved 2017-11-27 .  Stettina, C Horz, J 2015. Agile portfolio management An empirical perspective on the practice in use. International Journal of Project Management . 33 1 140152.  Laanti, M 2014. Characteristics and Principles of Scaled Agile . XP 2014 Workshops . Springer International Publishing.  Elssamadisy, Amr. Has SAFe Cracked the Large Agile Adoption Nut . InfoQ . Retrieved 2017-11-11 .  a b Vaidya, A 2014. Does DAD Know Best, Is it Better to do LeSS or Just be SAFe Adapting Scaling Agile Practices into the Enterprise . Excerpt from PNSQC 2014 Proceedings. pp.  89.  a b Maximini, Dominik 11 September 2013. A critical view on SAFe - Scrumorakel - Blog . Scrum Oracle . Retrieved 2017-11-27 .  Stafford, Jan December 9, 2013. Scaling Agile development calls for defined practices, consultant says . SearchSoftwareQuality . Retrieved 2017-11-27 .  Killick, Neil 21 March 2012. The Horror Of The Scaled Agile Framework . Agile, Scrum, Kanban, Lean, and everything thats in between . Retrieved 2017-11-27 .  SAFe Lean-Agile Principles . Retrieved 19 February 2016 .  Rose, Doug 2018. Enterprise Agility For Dummies . John Wiley  Sons. pp.  8789. ISBN   9781119446095 .  Certification . Scaled Agile . Retrieved 19 February 2016 . Further reading  edit  Heusser, Matthew 17 June 2015, Introducing the scaled agile framework , CIO , pp.  12  contains a review of the pros and cons of the methodology and concludes it is a half-way-house to a fully agile system. Leffingwell, Dean 2011, Lean Requirements Practices for Teams, Programs, and the Enterprise , Addison-Wesley Professional, ISBN   978-0321635846 Linders, Ben 15 January 2015, Lean and Agile Leadership with the Scaled Agile Framework SAFe , InfoQ External links  edit  Official website Retrieved from  httpsen.wikipedia.orgwindex.phptitleScaled_agile_framework oldid914136595  Categories  Agile software development Software project management Software development philosophies Hidden categories Wikipedia articles needing page number citations from April 2019 Articles lacking reliable references from July 2018 All articles lacking reliable references