Performance engineering From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article is written like a research paper or scientific journal that may use overly technical terms or may not be written like an encyclopedic article . Please help improve it by rewriting it in an encyclopedic style .  November 2016   Learn how and when to remove this template message  Performance engineering encompasses the techniques applied during a systems development life cycle to ensure the non-functional requirements for performance such as throughput , latency , or memory usage will be met. It may be alternatively referred to as systems performance engineering within systems engineering , and software performance engineering or application performance engineering within software engineering . As the connection between application success and business success continues to gain recognition, particularly in the mobile space, application performance engineering has taken on a preventative and perfective 1  role within the software development life cycle. As such, the term is typically used to describe the processes, people and technologies required to effectively test non-functional requirements, ensure adherence to service levels and optimize application performance prior to deployment. The term performance engineering encompasses more than just the software and supporting infrastructure, and as such the term performance engineering is preferable from a macro view. Adherence to the non-functional requirements is also validated post-deployment by monitoring the production systems. This is part of IT service management see also ITIL . Performance engineering has become a separate discipline at a number of large corporations, with tasking separate but parallel to systems engineering. It is pervasive, involving people from multiple organizational units but predominantly within the information technology organization. Contents 1 Performance engineering objectives 2 Performance engineering approach 2.1 Elaboration 2.2 Construction 2.3 Transition 3 Service management 3.1 Service level management 3.2 Capacity management 3.3 Problem management 4 Monitoring 5 See also 6 References 7 Further reading Performance engineering objectives  edit  Increase business revenue by ensuring the system can process transactions within the requisite timeframe Eliminate system failure requiring scrapping and writing off the system development effort due to performance objective failure Eliminate late system deployment due to performance issues Eliminate avoidable system rework due to performance issues Eliminate avoidable system tuning efforts Avoid additional and unnecessary hardware acquisition costs Reduce increased software maintenance costs due to performance problems in production Reduce increased software maintenance costs due to software impacted by ad hoc performance fixes Reduce additional operational overhead for handling system issues due to performance problems Identify future bottlenecks by simulation over prototype Increase server capability Performance engineering approach  edit  Because this discipline is applied within multiple methodologies, the following activities will occur within differently specified phases. However, if the phases of the rational unified process RUP are used as a framework, then the activities will occur as follows During the first, Conceptual phase of a program or project, critical business processes are identified. Typically they are classified as critical based upon revenue value, cost savings, or other assigned business value. This classification is done by the business unit, not the IT organization. High level risks that may impact system performance are identified and described at this time. An example might be known performance risks for a particular vendor system. F inally, performance activities, roles and deliverables are identified for the Elaboration phase. Activities and resource loading are incorporated into the Elaboration phase project plans. Elaboration  edit  During this defining phase, the critical business processes are decomposed to critical use cases . Probe cases will be decomposed further, as needed, to single page screen transitions. These are the use cases that will be subjected to script driven performance testing . The type of requirements that relate to performance engineering are the non-functional requirements, or NFR. While a functional requirement relates to which business operations are to be performed, a performance related non-functional requirement will relate to how fast that business operation performs under defined circumstances. Construction  edit  Early in this phase a number of performance tool related activities are required. These include Identify key development team members as subject matter experts for the selected tools. Specify a profiling tool for the developmentcomponent unit test environment. Specify an automated unit component performance test tool for the developmentcomponent unit test environment this is used when no GUI yet exists to drive the components under development. Specify an automated tool for driving server-side unit components for the developmentcomponent unit test environment. Specify an automated multi-user capable script-driven end-to-end tool for the developmentcomponent unit test environment this is used to execute screen-driven use cases. Identify a database test data load tool for the developmentcomponent unit test environment this is required to ensure that the database optimizer chooses correct execution paths and to enable reinitializing and reloading the database as needed. Deploy the performance tools for the development team. Presentations and training must be given to development team members on the selected tools. The performance test team normally does not execute performance tests in the development environment, but rather in a specialized pre-deployment environment that is configured to be as close as possible to the planned production environment. This team will execute performance testing against test cases , validating that the critical use cases conform to the specified non-functional requirements. The team will execute load testing against a normally expected median load as well as a peak load. They will often run stress tests that will identify the system bottlenecks. The data gathered, and the analysis, will be fed back to the group that does performance tuning . Where necessary, the system will be tuned to bring nonconforming tests into conformance with the non-functional requirements. If performance engineering has been properly applied at each iteration and phase of the project to this point, hopefully this will be sufficient to enable the system to receive performance certification. However, if for some reason perhaps proper performance engineering working practices were not applied there are tests that cannot be tuned into compliance, then it will be ne cessary to return portions of the system to development for refactoring. In some cases the problem can be resolved with additional hardware, but adding more hardware leads quickly to diminishing returns. Transition  edit  During this final phase the system is deployed to the production environment. A number of preparatory steps are required. These include Configuring the operating systems, network, servers application, web, database, load balancer, etc., and any message queueing software according to the base checklists and the optimizations identified in the performance test environment Ensuring all performance monitoring software is deployed and configured Running statistics on the database after the production data load is completed Once the new system is deployed, ongoing operations pick up performance activities, including Validating that weekly and monthly performance reports indicate that critical use cases perform within the specified non functional requirement criteria Where use cases are falling outside of NFR criteria, submit defects Identify projected trends from monthly and quarterly reports, and on a quarterly basis, execute capacity planning management activities Service management  edit  In the operational domain post production deployment performance engineering focuses primarily within three areas service level management , capacity management , and problem management . Service level management  edit  In the service level management area, performance engineering is concerned with service level agreements and the associated systems monitoring that serves to validate service level compliance, detect problems, and identify trends. For example, when real user monitoring is deployed it is possible to ensure that user transactions are being executed in conformance with specified non-functional requirements. Transaction response time is logged in a database such that queries and repo rts can be run against the data. This permits trend analysis that can be useful for capacity management. When user transactions fall out of band, the events should generate alerts so that attention may be applied to the situation. Capacity management  edit  For capacity management, performance engineering focuses on ensuring that the systems will remain within performance compliance. This means executing trend analysis on historical monitoring generated data, such that the future time of non compliance is predictable. For example, if a system is showing a trend of slowing transaction processing which might be due to growing data set sizes, or increasing numbers of concurrent users, or other factors then at some point the system will no longer meet the criteria specified within the service level agreements. Capacity management is charged with ensuring that additional capacity is added in advance of that point additional CPUs, more memory, new database indexing, et cetera so that the trend lines are reset and the system will remain within the specified performance range. Problem management  edit  Within the problem management domain, the performance engineering practices are focused on resolving the root cause of performance related problems. These typically involve system tuning, changing operating system or device parameters, or even refactoring the application software to resolve poor performance due to poor design or bad coding practices. Monitoring  edit  To ensure that there is proper feedback validating that the system meets the NFR specified performance metrics, any major system needs a monitoring subsystem. The planning, design, installation, configuration, and control of the monitoring subsystem are specified by an appropriately defined monitoring process. The benefits are as follows It is possible to establish service level agreements at the use case level. It is possible to turn on and turn off monitoring at periodic points or to support problem resolution. It enables the generation of regular reports. It enables the ability to track trends over time, such as the impact of increasing user loads and growing data sets on use case level performance. The trend analysis component of this cannot be undervalued. This functionality, properly implemented, will enable predicting when a given application undergoing gradually increasing user loads and growing data sets will exceed the specified non functional performance requirements for a given use case. This permits proper management budgeting, acquisition of, and deployment of t he required resources to keep the system running within the parameters of the non functional performance requirements. See also  edit  Java performance Scalability Software quality Software testing Web performance References  edit   Banking Industry Lessons Learned in Outsourcing Testing Services, Gartner. August 2, 2012. This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Performance engineering     news    newspapers    books    scholar    JSTOR  March 2009   Learn how and when to remove this template message  Further reading  edit  Database Performance Tuning Guide Practical Performance Analyst - Performance Engineering Community  Body Of Knowledge Performance Engineering Methodology A Performance Engineering Strategy A Performance Process Maturity Model The Every Computer Performance Book Exploring UML for Performance Engineering Introduction to Modeling Based Performance Engineering Leveraging ITIL to Improve Application Performance Patterns  Practices Performance Engineering Performance and Scalability of Distributed Software Architectures Performance Engineering Best Practices High Level Software Engineering and Performance A Road-map The Vicious Cycle of Computer Systems Performance and IT Operational Costs Microsoft Windows Server Performance Team Gathering Performance Requirements Performance Testing Web Services Strategies and Best Practices Performance Evaluation of an Air Traffic Control System using the Application Response Measurement ARM Standard Integration of Performance Management in Information Technology Infrastructure Library ITIL v t e Systems engineering Subfields Aerospace engineering Biological systems engineering Configuration management Earth systems engineering and management Electrical engineering Enterprise systems engineering Performance engineering Reliability engineering Safety engineering Processes Requirements engineering Functional specification System integration Verification and validation Design review Concepts Business process System System lifecycle V-Model Systems development life cycle Tools Decision-making Function modelling IDEF Optimization Quality function deployment System dynamics Systems Modeling Language Systems analysis Systems modeling Work breakdown structure People James S. Albus Ruzena Bajcsy Benjamin S. Blanchard Wernher von Braun Kathleen Carley Harold Chestnut Wolt Fabrycky Barbara Grosz Arthur David Hall III Derek Hitchins Robert E. Machol Radhika Nagpal Simon Ramo Joseph Francis Shea Katia Sycara Manuela M. Veloso John N. Warfield Related fields Control engineering Computer engineering Industrial engineering Operations research Project management Quality management Risk management Software engineering Category Retrieved from  httpsen.wikipedia.orgwindex.phptitlePerformance_engineering oldid888237863  Categories  Information technology management Performance management Software optimization Hidden categories Wikipedia articles with style issues from November 2016 All articles with style issues Articles needing additional references from March 2009 All articles needing additional references