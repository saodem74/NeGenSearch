ZEBRA computer From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article includes a list of references , but its sources remain unclear because it has insufficient inline citations . Please help to improve this article by introducing more precise citations.  August 2012   Learn how and when to remove this template message  This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   ZEBRA  computer     news    newspapers    books    scholar    JSTOR  August 2012   Learn how and when to remove this template message  The ZEBRA  Zeer Eenvoudige Binaire Reken Automaat translated Very Simple Binary Automatic Calculator was one of the first computers to be designed in the Netherlands , the first one was the  ARRA  and one of the first Dutch computers to be commercially available. It was designed by Willem van der Poel of the Netherlands Post, Telegraph and Telephone , and first delivered in 1958. The production run consisted of fifty-five machines, manufactured and marketed by the British company Standard Telephones and Cables , Ltd. The ZEBRA was a binary, two-address machine with a 33-bit word length. Storage was provided by a magnetic drum memory holding 8K words accumulators were also implemented as recirculating drum tracks in a manner similar to that used in the Bendix G-15 . Peripherals included paper tape reader and punch, and teleprinter. In 1967, six Zebra computers were in use in UK universities and technical colleges. 1  Programming  edit  The ZEBRA instruction word consists of a 13-bit drum address, a five-bit register or IO address, and a 15-bit operation field . Each bit of the operation field had a distinct meaning and could be used in nearly any combination, leading to many elegant tricks that today might be considered the domain of microprogramming . Some bits made an instruction conditional on the accumulator state, as with the Zuse Z22 or Electrologica X1 . Multiplication, division, square root, as well as all floating-point operations, were performed by subroutines, using the underlying serial computer ALU primitives add, subtract, shift right, shift left, and increment. Programming aids included the Normal Code assembler, trace utility, a floating point interpretive system, the Simple Code, the Matrix Interpretive Scheme, and an Algol compiler. Since a magnetic drum does not support random access, some time is lost waiting for an instruction or piece of data become available. In a poorly written program, the average wait time could be half the drum rotation time, but there were ways to reduce this. A notable feature of the ZEBRA was a meter that measured how much of the machines time was spent in non-wait states thi s was called the efficiency meter. When running the floating-point interpretive system, the efficiency meter tended to show around 50, but if prospective customers were visiting, a more efficient program could be loaded for demonstration purposes. References  edit   Roberts, Goronwy 1967-03-06. Computers . Hansard . UK Parliament. HC . Retrieved 2017-07-08 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em External links  edit  The instruction set of the ZEBRA in detail Evolution of the ZEBRA De ZEBRA, de eerste computer van de RuG in Dutch  Standard Telephones and Cables Limted, London  Selling the Computer Revolution  Computer History Museum . www.computerhistory.org . Marketing brochures BitSavers document archive Stantec ZEBRA . www.swansea.ac.uk . Contains also Rod Delameres reminiscences on the Stantec ZEBRA at Newport in 1961 Alan J. Flavell . www.alanflavell.org.uk . Memories about the Stantec ZEBRA STL Harlow Quarter Century Club . www.stlqcc.org.uk . MENU -  Memories -  Computer Memories. Mol, Liesbeth De Bullynck, Maarten Daylight, Edgar G. 2018. Less is more in the Fifties. Encounters between Logical Minimalism and Computer Design during the 1950s . IEEE Annals of the History of Computing . 5.1 From ZERO to ZEBRA pp. 16-20. v t e Processor technologies Models Turing machine Universal PostTuring Quantum Belt machine Stack machine Finite-state machine with datapath Hierarchical Queue automaton Register machines Counter Pointer Random-access Random-access stored program Architecture Von Neumann Harvard modified Dataflow Transport-triggered Cellular Endianness Memory access NUMA HUMA Loadstore Registermemory Cache hierarchy Memory hierarchy Virtual memory Secondary storage Heterogeneous Fabric Multiprocessing Cognitive Neuromorphic Instruction set architectures Types CISC RISC Application-specific EDGE TRIPS VLIW EPIC MISC OISC NISC ZISC comparison addressing modes x86 ARM MIPS Power ISA SPARC Itanium Unicore MicroBlaze RISC-V others Execution Instruction pipelining Pipeline stall Operand forwarding Classic RISC pipeline Hazards Data dependency Structural Control False sharing Out-of-order Tomasulo algorithm Reservation station Re-order buffer Register renaming Speculative Branch prediction Memory dependence prediction Parallelism Level Bit Bit-serial Word Instruction Pipelining Scalar Superscalar Task Thread Process Data Vector Memory Distributed Multithreading Temporal Simultaneous Hyperthreading Speculative Preemptive Cooperative Flynns taxonomy SISD SIMD SWAR SIMT MISD MIMD SPMD Processor performance Transistor count Instructions per cycle IPC Cycles per instruction CPI Instructions per second IPS Floating-point operations per second FLOPS Transactions per second TPS Synaptic updates per second SUPS Performance per watt PPW Cache performance metrics Computer performance by orders of magnitude Types Central processing unit CPU Graphics processing unit GPU GPGPU Vector Barrel Stream Coprocessor ASIC FPGA CPLD Multi-chip module MCM System in package SiP By application Microprocessor Microcontroller Mobile Notebook Ultra-low-voltage ASIP Systems on chip System on a chip SoC Multiprocessor MPSoC Programmable PSoC Network on a chip NoC Hardware accelerators AI accelerator Vision processing unit VPU Physics processing unit PPU Digital signal processor DSP Tensor processing unit TPU Secure cryptoprocessor Network processor Baseband processor Word size 1-bit 2-bit 4-bit 8-bit 16-bit 32-bit 48-bit 64-bit 128-bit 256-bit 512-bit others variable Core count Single-core Multi-core Manycore Heterogeneous architecture Components Core Cache CPU cache replacement policies coherence Bus Clock rate Clock signal FIFO Functional units Arithmetic logic unit ALU Address generation unit AGU Floating-point unit FPU Memory management unit MMU Loadstore unit Translation lookaside buffer TLB Integrated memory controller IMC Logic Combinational Sequential Glue Logic gate Quantum Array Registers Processor register Status register Stack register Register file Memory buffer Program counter Control unit Instruction unit Data buffer Write buffer Microcode ROM Counter Datapath Multiplexer Demultiplexer Adder Multiplier CPU Binary decoder Address decoder Sum addressed decoder Barrel shifter Circuitry Integrated circuit 3D Mixed-signal Power management Boolean Digital Analog Quantum Switch Power management PMU APM ACPI Dynamic frequency scaling Dynamic voltage scaling Clock gating Performance per watt PPW Related History of general-purpose CPUs Microprocessor chronology Processor design Digital electronics Hardware security module Semiconductor device fabrication Retrieved from  httpsen.wikipedia.orgwindex.phptitleZEBRA_computer oldid874441336  Categories  Early computers Science and technology in the Netherlands Hidden categories Articles lacking in-text citations from August 2012 All articles lacking in-text citations Articles needing additional references from August 2012 All articles needing additional references