ML programming language From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   ML  programming language     news    newspapers    books    scholar    JSTOR  May 2015   Learn how and when to remove this template message  ML Paradigm Multi-paradigm  functional , imperative Designed  by Robin Milner and others at the University of Edinburgh First  appeared 1973  46  years ago   1973  Typing discipline Inferred , static , strong Dialects OCaml , Standard ML Influenced by ISWIM Influenced Clojure , Coq , Cyclone , C , Elm , F , F , Haskell , Idris , Miranda , Nemerle , OCaml , Opa , Erlang , Rust , Scala ML Meta Language is a general-purpose functional programming language . It has roots in Lisp , and has been characterized as Lisp with types.  citation needed  It is known for its use of the polymorphic HindleyMilner type system , which automatically assigns the types of most expressions without requiring explicit type annotations, and ensures type safety    there is a formal proof that a well-typed ML program does not cause runtime type errors. 1  ML provides pattern matching for function arguments, garbage collection , imperative programming , call-by-value and currying . It is used heavily in programming language research and is one of the few languages to be completely specified and verified using formal semantics . Its types and pattern matching make it well-suited and commonly used to operate on other formal languages, such as in compiler writing , automated theorem proving , and formal verification . Contents 1 Overview 2 Examples 2.1 Factorial 2.2 List reverse 2.3 Modules 3 See also 4 References 5 Further reading 6 External links Overview  edit  Features of ML include a call-by-value evaluation strategy , first-class functions , automatic memory management through garbage collection , parametric polymorphism , static typing , type inference , algebraic data types , pattern matching , and exception handling . ML uses static scoping rules.  citation needed  ML can be referred to as an impure functional language, because although it encourages functional programming, it does allow side-effects like languages such as Lisp , but unlike a purely functional language such as Haskell . Like most programming languages, ML uses eager evaluation , meaning that all subexpressions are always evaluated, though lazy evaluation can be achieved through the use of closures . Thus one can create and use infinite streams as in Haskell, but their expression is indirect. MLs strengths are mostly applied in language design and manipulation compilers, analyzers, theorem provers, but it is a general-purpose language also used in bioinformatics, and financial systems. ML was developed by Robin Milner and others in the early 1970s at the University of Edinburgh , 2  whose syntax is inspired by ISWIM . Historically, ML was conceived to develop proof tactics in the LCF theorem prover whose language, pplambda , a combination of the first-order predicate calculus and the simply-typed polymorphic lambda calculus , had ML as its metalanguage. Today there are several languages in the ML family the three most prominent are Standard ML SML, OCaml and F . Ideas from ML have influenced numerous other languages, like Haskell, Cyclone , Nemerle , ATS ,  citation needed  and Elm . 3  Examples  edit  The following examples use the syntax of Standard ML. Other ML dialects such as OCaml and F differ in small ways. Factorial  edit  The factorial function expressed as pure ML fun fac  0  int   int  1  fac  n  int   int  n  fac  n - 1  This describes the factorial as a recursive function, with a single terminating base case. It is similar to the descriptions of factorials found in mathematics textbooks. Much of ML code is similar to mathematics in facility and syntax. Part of the definition shown is optional, and describes the types of this function. The notation E   t can be read as expression E has type t . For instance, the argument n is assigned type integer int, and fac n   int, the result of applying fac to the integer n, also has type integer. The function fac as a whole then has type function from integer to integer int -  int, that is, fac accepts an integer as an argument and returns an integer result. Thanks to type inference, the type annotations can be omitted and will be derived by the compiler. Rewritten without the type annotations, the example looks like fun fac 0  1  fac n  n  fac  n - 1  The function also relies on pattern matching, an important part of ML programming. Note that parameters of a function are not necessarily in parentheses but separated by spaces. When the functions argument is 0 zero it will return the integer 1 one. For all other cases the second line is tried. This is the recursion , and executes the function again until the base case is reached. This implementation of the factorial function is not guaranteed to terminate, since a negative argument causes an infinite descending chain of recursive calls. A more robust implementation would check for a nonnegative argument before recursing, as follows fun fact n  let fun fac 0  1  fac n  n  fac  n - 1  in if  n  0  then raise Fail negative argument  else fac n end The problematic case when n is negative demonstrates a use of MLs exception system . The function can be improved further by writing its inner loop in a tail-recursive style, such that the call stack need not grow in proportion to the number of function calls. This is achieved by adding an extra, accumulator, parameter to the inner function. At last, we arrive at fun fact n  let fun fac 0 acc  acc  fac n acc  fac  n - 1   n  acc  in if  n  0  then raise Fail negative argument  else fac n 1 end List reverse  edit  The following function reverses the elements in a list. More precisely, it returns a new list whose elements are in reverse order compared to the given list. fun reverse     reverse  xxs    reverse xs    x  This implementation of reverse, while correct and clear, is inefficient, requiring quadratic time for execution. The function can be rewritten to execute in linear time in the following more efficient, though less easy-to-read, style fun reverse xs  let fun rev  acc  acc  rev  hdtl  acc  rev tl  hdacc  in rev xs  end Notably, this function is an example of parametric polymorphism. That is, it can consume lists whose elements have any type, and return lists of the same type. Modules  edit  Modules are MLs system for structuring large projects and libraries. A module consists of a signature file and one or more structure files. The signature file specifies the API to be implemented like a C header file, or Java interface file. The structure implements the signature like a C source file or Java class file. For example, the following define an Arithmetic signature and an implementation of it using Rational numbers signature ARITH  sig type t  val zero  t  val succ  t -  t  val sum  t  t -  t  end structure Rational  ARITH  struct datatype t  Rat of int  int  val zero  Rat  0 , 1  fun succ  Rat  a , b   Rat  ab , b  fun sum  Rat  a , b , Rat  c , d   Rat  ad cb , bd   t  end These are imported into the interpreter by the use command. Interaction with the implementation is only allowed via the signature functions, for example it is not possible to create a Rat data object directly via this code. The structure block hides all the implementation detail from outside. MLs standard libraries are implemented as modules in this way. See also  edit  Standard ML and its implementations SMLNJ , an implementation with extensions for concurrent programming developed at Princeton University and Bell Laboratories Moscow ML , an implementation originally based on Caml Light Alice ML , an extension of Standard ML with support for parallel programming using futures MLton , a powerful whole-program optimizing compiler strictly conforming to the Definition Dependent ML , an extension of ML with dependent typing that led to the development of ATS Lazy ML , an experimental lazily evaluated ML dialect from the early 1980s PAL programming language , an educational language related to ML OCaml , an industrial strength 4  ML dialect used to implement the Coq theorem prover References  edit   Robin Milner. A theory of type polymorphism in programming. Journal of Computer and System Sciences, 173348375, 1978.  Gordon, Michael J. C. 1996. From LCF to HOL a short history . Retrieved 2007-10-11 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Tate, Bruce A. Daoud, Fred Dees, Ian Moffitt, Jack 2014. 3. Elm. Seven More Languages in Seven Weeks Book version P1.0-November 2014 ed.. The Pragmatic Programmers, LLC. pp.  97, 101. ISBN   978-1-941222-15-7 . On page 101, Elm creator Evan Czaplicki says I tend to say Elm is an ML-family language to get at the shared heritage of all these languages. these languages is referring to Haskell, OCaml, SML, and F.  OCaml is an industrial strength programming language supporting functional, imperative and object-oriented styles . Retrieved on January 2, 2018. Further reading  edit  The Definition of Standard ML , Robin Milner, Mads Tofte , Robert Harper , MIT Press 1990 revised edition adds author David MacQueen, MIT Press 1997, ISBN   0-262-63181-4 . Commentary on Standard ML , Robin Milner , Mads Tofte , MIT Press 1997, ISBN   0-262-63137-7 . ML for the Working Programmer , Lawrence Paulson , Cambridge University Press 1991, 1996, ISBN   0-521-57050-6 . Harper, Robert 2011. Programming in Standard ML PDF . Carnegie Mellon University. Elements of ML Programming , Jeffrey D. Ullman , Prentice-Hall 1994, 1998, ISBN   0-13-790387-1 . External links  edit  Standard ML of New Jersey, another popular implementation F, an ML implementation using the Microsoft .NET framework MLton, a whole-program optimizing Standard ML compiler Successor ML    or sML CakeML, a read-eval-print loop version of ML with formally verified runtime and translation to assembler Retrieved from  httpsen.wikipedia.orgwindex.phptitleML_programming_language oldid913089059  Categories  Academic programming languages Functional languages Procedural programming languages ML programming language family Pattern matching programming languages Statically typed programming languages Programming languages created in 1973 Hidden categories Articles needing additional references from May 2015 All articles needing additional references All articles with unsourced statements Articles with unsourced statements from January 2019 Articles with unsourced statements from May 2015 Articles with unsourced statements from August 2010