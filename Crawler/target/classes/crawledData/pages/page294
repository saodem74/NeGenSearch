Extreme programming practices From Wikipedia, the free encyclopedia Jump to navigation Jump to search Extreme programming  XP  is an agile software development methodology used to implement software projects. This article details the practices used in this methodology. Extreme programming has 12 practices, grouped into four areas, derived from the best practices of software engineering . 1  Contents 1 Fine scale feedback 1.1 Pair programming 1.2 Planning game 1.2.1 Release planning 1.2.1.1 Exploration phase 1.2.1.2 Commitment phase 1.2.1.2.1 Sort by value 1.2.1.2.2 Sort by risk 1.2.1.3 Steering phase 1.2.2 Iteration planning 1.2.2.1 Exploration phase 1.2.2.2 Commitment phase 1.2.2.3 Steering phase 1.3 Test driven development 1.4 Whole team 2 Continuous process 2.1 Continuous integration 2.2 Design improvement 2.3 Small releases 3 Shared understanding 3.1 Coding standard 3.2 Collective code ownership 3.3 Simple design 3.4 System metaphor 4 Programmer welfare 4.1 Sustainable pace 5 See also 6 References 7 External links Fine scale feedback  edit  Pair programming  edit  Pair programming means that all code is produced by two people programming on one task on one workstation. One programmer has control over the workstation and is thinking mostly about the coding in detail. The other programmer is more focused on the big picture, and is continually reviewing the code that is being produced by the first programmer. Programmers trade roles after minute to hour pe riods. The pairs are not fixed programmers switch partners frequently, so that everyone knows what everyone is doing, and everybody remains familiar with the whole system, even the parts outside their skill set. This way, pair programming also can enhance team-wide communication. This also goes hand-in-hand with the concept of Collective Ownership. Planning game  edit  The main planning process within extreme programming is called the Planning Game. The game is a meeting that occurs once per iteration, typically once a week. The planning process is divided into two parts Release Planning  This is focused on determining what requirements are included in which near-term releases, and when they should be delivered. The customers and developers are both part of this. Release Planning consists of three phases Exploration Phase In this phase the customer will provide a shortlist of high-value requirements for the system. These will be written down on user story cards. Commitment Phase Within the commitment phase business and developers will commit themselves to the functionality that will be included and the date of the next release. Steering Phase In the steering phase the plan can be adjusted, new requirements can be added andor existing requirements can be changed or removed. Iteration Planning  This plans the activities and tasks of the developers. In this process the customer is not involved. Iteration Planning also consists of three phases Exploration Phase Within this phase the requirement will be translated to different tasks. The tasks are recorded on task cards. Commitment Phase The tasks will be assigned to the programmers and the time it takes to complete will be estimated. Steering Phase The tasks are performed and the end result is matched with the original user story. The purpose of the Planning Game is to guide the product into delivery. Instead of predicting the exact dates of when deliverables will be needed and produced, which is difficult to do, it aims to steer the project into delivery using a straightforward approach. 2  The Planning Game approach has also been adopted by non-software projects and teams in the context of business agility . 3  Release planning  edit  Exploration phase  edit  This is an iterative process of gathering requirements and estimating the work impact of each of those requirements. Write a Story Business has come with a problem during a meeting, development will try to define this problem and get requirements. Based on the business problem, a story  user story  has to be written. This is done by business, where they point out what they want a part of the system to do. It is important that development has no influence on this story. The story is written on a user story card. Estimate a Story Development estimates how long it will take to implement the work implied by the story card. Development can also create spike solutions to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem. Again, this may not influence the business requirements. Split a Story Every design critical complexity has to be addressed before starting the iteration planning. If development isnt able to estimate the story, it needs to be split up and written again. When business cannot come up with any more requirements, one proceeds to the commitment phase. Commitment phase  edit  This phase involves the determination of costs, benefits, and schedule impact. It has four components Sort by Value Business sorts the user stories by Business Value . Sort by Risk Development sorts the stories by risk. Set Velocity Development determines at what speed they can perform the project. Choose scope The user stories that will be finished in the next release will be picked. Based on the user stories the release date is determined. Sort by value  edit  The business side sorts the user stories by business value. They will arrange them into three piles Critical stories without which the system cannot function or has no meaning. Significant Business Value  Non-critical user stories that have significant business value. Nice to have User stories that do not have significant business value. Sort by risk  edit  The developers sort the user stories by risk. They also categorize into three piles low, medium and high risk user stories. The following is an example of an approach to this Determine Risk Index Give each user story an index from 0 to 2 on each of the following factors Completeness do we know all of the story details Complete 0 Incomplete 1 Unknown 2 Volatility is it likely to change low 0 medium 1 high 2 Complexity how hard is it to build simple 0 standard 1 complex 2 All indexes for a user story are added, assigning the user stories a risk index of low 0 1, medium 2 4, or high 5 6. Steering phase  edit  Within the steering phase the programmers and business people can steer the process. That is to say, they can make changes. Individual user stories, or relative priorities of different user stories, might change estimates might prove wrong. This is the chance to adjust the plan accordingly. Iteration planning  edit  Considering team velocity storypoints to be planned. Iteration duration can be 1 to 3 weeks. Exploration phase  edit  The exploration phase of the iteration planning is about creating tasks and estimating their implementation time. Translate the requirement to tasks Place on task cards. CombineSplit task If the programmer cannot estimate the task because it is too small or too big, the programmer will need to combine or split the task. Estimate task Estimate the time it will take to implement the task. Commitment phase  edit  Within the commitment phase of the iteration planning programmers are assigned tasks that reference the different user stories. A programmer accepts a task Each programmer picks a task for which he or she takes responsibility. Programmer estimates the task Because the programmer is now responsible for the task, he or she should give the eventual estimation of the task. Set load factor The load factor represents the ideal amount of hands-on development time per programmer within one iteration. For example, in a 40-hour week, with 5 hours dedicated to meetings, this would be no more than 35 hours. Balancing When all programmers within the team have been assigned tasks, a comparison is made between the estimated time of the tasks and the load factor. Then the tasks are balanced out among the programmers. If a programmer is overcommitted, other programmers must take over some of his or her tasks and vice versa. Steering phase  edit  The implementation of the tasks is done during the steering phase of the iteration. Get a task card The programmer gets the task card for one of the tasks to which he or she has committed. Find a Partner The programmer will implement this task along with another programmer. This is further discussed in the practice Pair Programming . Design the task If needed, the programmers will design the functionality of the task. Implement the task using Test-driven development TDD see below Run Functional test Functional tests based on the requirements in the associated user story and task card are run. Test driven development  edit  Unit tests are automated tests that test the functionality of pieces of the code e.g. classes, methods. Within XP, unit tests are written before the eventual code is coded. This approach is intended to stimulate the programmer to think about conditions in which his or her code could fail. XP says that the programmer is finished with a certain piece of code when he or she cannot come up with any further conditions under which the code may fail. Test driven development proceeds by quickly cycling through the following steps, with each step taking minutes at most, preferably much less. Since each user story will usually require one to two days of work, a very large number of such cycles will be necessary per story. Write unit test  The programmers write a minimal test that should fail because the functionality hasnt been fully implemented in the production code. Watch the new test fail The programmers verify the test does indeed fail. While it may seem like a waste of time, this step is critical because it verifies that your belief about the state of the production code is correct. If the test does not fail, the programmers should determine whether there is a bug in the test code, or that the production code does support the functiona lity described by the new test. Write code The programmers write just enough production code so the new test will pass. Run test The unit tests are executed to verify that the new production code passes the new test, and that no other tests are failing. Refactor  Remove any code smells from both the production and test code. For a more intense version of the above process, see Uncle Bobs Three Rules of TDD 4  . Whole team  edit  Within XP, the customer is not the one who pays the bill, but the one who really uses the system. XP says that the customer should be on hand at all times and available for questions. For instance, the team developing a financial administration system should include a financial administrator. Continuous process  edit  Continuous integration  edit  The development team should always be working on the latest version of the software. Since different team members may have versions saved locally with various changes and improvements, they should try to upload their current version to the code repository every few hours, or when a significant break presents itself. Continuous integration will avoid delays later on in the project cycle, caused by integration problems. Design improvement  edit  Because XP doctrine advocates programming only what is needed today, and implementing it as simply as possible, at times this may result in a system that is stuck. One of the symptoms of this is the need for dual or multiple maintenance functional changes start requiring changes to multiple copies of the same or similar code. Another symptom is that changes in one part of the code affect lots of other parts. XP doctrine says that when this occurs, the system is telling you to refactor your code by changing the architecture, making it simpler and more generic. Small releases  edit  The delivery of the software is done via frequent releases of live functionality creating concrete value. The small releases help the customer to gain confidence in the progress of the project. This helps maintain the concept of the whole team as the customer can now come up with his suggestions on the project based on real experience. Shared understanding  edit  Coding standard  edit  Coding standard is an agreed upon set of rules that the entire development team agree to adhere to throughout the project. The standard specifies a consistent style and format for source code, within the chosen programming language, as well as various programming constructs and patterns that should be avoided in order to reduce the probability of defects. 5  The coding standard may be a standard conventions specified by the language vendor e.g. The Code Conventions for the Java Programming Language, recommended by Sun, or custom defined by the development team. Extreme Programming backers advocate code that is self-documenting to the furthest degree possible. This reduces the need for code comments , which can get out of sync with the code itself. 6  Collective code ownership  edit  Collective code ownership also known as team code ownership and shared code means that everyone is responsible for all the code therefore, everybody is allowed to change any part of the code. Collective code ownership is not only an organizational policy but also a feeling. Developers feel team code ownership more when they understand the system context, have contribute d to the code in question, perceive code quality as high, believe the product will satisfy the user needs, and perceive high team cohesion. 7  Pair programming, especially overlapping pair rotation, contributes to this practice by working in different pairs, programmers better understand the system context and contribute to more areas of the code base. Collective code ownership may accelerate development because a developer who spots an error can fix it immediately, which can reduce bugs overall. However, programmers may also introduce bugs when changing code that they do not understand well. Sufficiently well-defined unit tests should mitigate this problem if unforeseen dependencies create errors, then when unit tests are r un, they will show failures. Collective code ownership may lead to better member backup, greater distribution of knowledge and learning, shared responsibility of the code, greater code quality, and reduced rework. But it may as well lead to increased member conflict, increase of bugs, changes of developers mental flow and breaks of their reasoning, increased development time, or less understanding of the code. 8  Simple design  edit  Programmers should take a simple is best approach to software design. Whenever a new piece of code is written, the author should ask themselves is there a simpler way to introduce the same functionality. If the answer is yes, the simpler course should be chosen. Refactoring should also be used to make complex code simpler. System metaphor  edit  The system metaphor is a story that everyone - customers, programmers, and managers - can tell about how the system works. Its a naming concept for classes and methods that should make it easy for a team member to guess the functionality of a particular classmethod, from its name only. For example a library system may create loan_recordsclass for borrowersclass , and if the item were to become overdue it may perform a make_overdue operation on a catalogueclass . For each class or operation the functionality is obvious to the entire team. Programmer welfare  edit  Sustainable pace  edit  The concept is that programmers or software developers should not work more than 40 hour weeks, and if there is overtime one week, that the next week should not include more overtime. Since the development cycles are short cycles of continuous integration, and full development release cycles are more frequent, the projects in XP do not follow the typical crunch time that othe r projects require requiring overtime. Also, included in this concept is that people perform best and most creatively if they are well rested. A key enabler to achieve sustainable pace is frequent code-merge and always executable  test covered high quality code. The constant refactoring way of working enforces team members with fresh and alert minds. The intense collaborative way of working within the team drives a need to recharge over weekends. Well-tested, continuously integrated, frequently deployed code and environments also minimize the frequency of unexpected production problems and outages, and the associated after-hours nights and weekends work that is required. See also  edit  Extreme programming Continuous integration Multi-stage continuous integration Class-responsibility-collaboration card References  edit   Beck, K. Extreme Programming Explained Embrace Change 2nd. ed. Addison-Wesley, 2000 pp. 54  Melnik, Grigori Maurer, Frank 2004. Introducing Agile Methods Three Years of Experience . Proceedings of the 30th Euromicro Conference. IEEE. pp.  334341. doi  10.1109EURMIC.2004.1333388 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Leybourn, E. 2013. Directing the Agile Organisation A Lean Approach to Business Management. London IT Governance Publishing 146150.  Martin, Robert. Three Rules of TDD .  Kolawa, Adam Huizinga, Dorota 2007. Automated Defect Prevention Best Practices in Software Management . Wiley-IEEE Computer Society Press. p.  75. ISBN   978-0-470-04212-0 .  httpguzdial.cc.gatech.edusqueakbooknew-lecture-slidesxp.ppt  Sedano, Todd Ralph, Paul Praire, Ccile. Practice and Perception of Team Code Ownership . ACM.  Ribeiro, Danilo  Silva, Fabio  Valena, Diana  Freitas, Elyda  Frana, Csar. 2016. Advantages and Disadvantages of using Shared code from the Developers Perspective A qualitative study. This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Extreme programming practices     news    newspapers    books    scholar    JSTOR  December 2008   Learn how and when to remove this template message  External links  edit  XP Practices Kent Beck XP Practices Ron Jeffries XP Practices Retrieved from  httpsen.wikipedia.orgwindex.phptitleExtreme_programming_practices oldid903201480  Categories  Software development process Extreme programming Hidden categories Articles needing additional references from December 2008 All articles needing additional references