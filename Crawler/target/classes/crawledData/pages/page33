History of software engineering From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   History of software engineering     news    newspapers    books    scholar    JSTOR  October 2008   Learn how and when to remove this template message  History of computing Hardware Hardware before 1960 Hardware 1960s to present Software Software Unix Free software and open-source software Computer science Artificial intelligence Compiler construction Computer science Operating systems Programming languages Prominent pioneers Software engineering Modern concepts General-purpose CPUs Graphical user interface Internet Laptops Personal computers Video games World Wide Web By country Bulgaria Poland Romania Soviet Bloc Soviet Union Yugoslavia Timeline of computing before 1950 19501979 19801989 19901999 20002009 20102019 more timelines ... Glossary of computer science Category v t e From its beginnings in the 1960s, writing software has evolved into a profession concerned with how best to maximize the quality of software and of how to create it. Quality can refer to how maintainable software is, to its stability, speed, usability, testability, readability, size, cost, security, and number of flaws or bugs, as well as to less measurable qualities like elegance, conciseness, and customer satisfaction, amo ng many other attributes. How best to create high quality software is a separate and controversial problem covering software design principles, so-called best practices for writing code, as well as broader management issues such as optimal team size, process, how best to deliver software on time and as quickly as possible, work-place culture, hiring practices, and so forth. All this falls under the broad rubric of software engineering . 1  Contents 1 Overview 2 1945 to 1965 The origins 3 1965 to 1985 The software crisis 4 1985 to 1989  No Silver Bullet  4.1 Software projects 5 1990 to 1999 Prominence of the Internet 6 2000 to 2015 Lightweight methodologies 6.1 Current trends in software engineering 6.1.1 Aspects 6.1.2 Agile 6.1.3 Experimental 6.1.4 Software product lines 6.2 Software engineering today 7 Sub-disciplines 7.1 Artificial intelligence 7.1.1 Languages 8 Prominent figures in the history of software engineering 9 See also 10 References 11 External links Overview  edit  The evolution of software engineering is notable in a number of areas Emergence as a profession By the early 1980s, 2  software engineering professionalism , to stand beside computer science and traditional engineering.  citation needed  Role of women  Before 1970 men filling the more prestigious and better paying hardware engineering roles often delegated the writing of software to women, and legends such as Grace Hopper or Margaret Hamilton filled many computer programming jobs. 3  4  Today, fewer women work in software engineering than in other professions, a situation whose cause is not clearly identified. Many academic and professional organizations  who  consider this situation unbalanced and are trying hard to solve it. 5  Processes Processes have become a big part of software engineering. They are hailed for their potential to improve software but sharply criticized for their potential to constrict programmers.  citation needed  Cost of hardware The relative cost of software versus hardware has changed substantially over the last 50 years. When mainframes were expensive and required large support staffs, the few organizations buying them also had the resources to fund large, expensive custom software engineering projects. Computers are now much more numerous and much more powerful, which has several effects on software. The larger market can support large projects to create commercial off the shelf software, as done by companies such as Microsoft . The cheap machines allow each programmer to have a terminal capable of fairly rapid compilation . The programs in question can use techniques such as garbage collection , which make them easier and faster for the programmer to write. On the other hand, many fewer organizations are interested in employing programmers for large custom software projects, instead using commercial off the shelf software as much as possible.  citation needed  1945 to 1965 The origins  edit  Putative origins for the term software engineering include a 1965 letter from ACM president Anthony Oettinger , 6  7  lectures by Douglas T. Ross at MIT in the 1950s. 8  Margaret H. Hamilton is the person who came up with the idea of naming the discipline, software engineering, as a way of giving it legitimacy. 9  10  The NATO Science Committee sponsored two conferences 11  on software engineering in 1968 Garmisch, Germany   see conference report  and 1969, which gave the field its initial boost. Many believe these conferences marked the official start of the profession of software engineering . 6  12  1965 to 1985 The software crisis  edit  Software engineering was spurred by the so-called software crisis of the 1960s, 1970s, and 1980s, which identified many of the problems of software development. Many projects ran over budget and schedule. Some projects caused property damage. A few projects caused loss of life. 13  The software crisis was originally defined in terms of productivity , but evolved to emphasize quality . Some used the term software crisis to refer to their inability to hire enough qualified programmers.  citation needed  Cost and Budget Overruns  The OS360 operating system was a classic example. This decade-long project from the 1960s eventually produced one of the most complex software systems at the time. 12  OS360 was one of the first large 1000 programmers  citation needed   software projects. Fred Brooks claims in The Mythical Man-Month that he made a multimillion-dollar mistake of not developing a coherent architecture before starting development. 12  Property Damage Software defects can cause property damage. Poor software security allows hackers to steal identities, costing time, money, and reputations.  citation needed  Life and Death Software defects can kill. Some embedded systems used in radiotherapy machines failed so catastrophically that they administered lethal doses of radiation to patients. The most famous of these failures is the Therac-25 incident. 14  Peter G. Neumann has kept a contemporary list of software problems and disasters. 15  The software crisis has been fading from view, because it is psychologically extremely difficult to remain in crisis mode for a protracted period more than 20 years. Nevertheless, software  especially real-time embedded software  remains risky and is pervasive, and it is crucial not to give in to complacency. Over the last 1015 years Michael A. Jackson has written extensively about the nature of software engineering, has identified the main source of its difficulties as lack of specialization, and has suggested that his problem frames provide the basis for a normal practice of software engineering, a prerequisite if software engineering is to become an engineering science. 16  1985 to 1989  No Silver Bullet   edit  For decades, solving the software crisis was paramount to researchers and companies producing software tools. The cost of owning and maintaining software in the 1980s was twice as expensive as developing the software.  citation needed  During the 1990s, the cost of ownership and maintenance increased by 30 over the 1980s. In 1995, statistics showed that half of surveyed development projects were operational, but were not considered successful. The average software project overshoots its schedule by half. Three-quarters of all large software products delivered to the customer are failures that are either not used at all, or do not meet the customers requirements. Software projects  edit  Seemingly, every new technology and practice from the 1970s through the 1990s was trumpeted as a silver bullet to solve the software crisis. Tools, discipline, formal methods , process, and professionalism were touted as silver bullets  citation needed  Tools Especially emphasized were tools structured programming , object-oriented programming , CASE tools such as ICLs CADES CASE system, 17  Ada , documentation , and standards were touted as silver bullets. Discipline Some pundits argued that the software crisis was due to the lack of discipline of programmers. Formal methods Some believed that if formal engineering methodologies would be applied to software development, then production of software would become as predictable an industry as other branches of engineering. They advocated proving all programs correct. Process Many advocated the use of defined processes and methodologies like the Capability Maturity Model . Professionalism This led to work on a code of ethics, licenses, and professionalism. In 1986, Fred Brooks published his No Silver Bullet article, arguing that no individual technology or practice would ever make a 10-fold improvement in productivity within 10 years.  citation needed  Debate about silver bullets raged over the following decade. Advocates for Ada , components , and processes continued arguing for years that their favorite technology would be a silver bullet. Skeptics disagreed. Eventually, almost everyone accepted that no silver bullet would ever be found. Yet, claims about silver bullets pop up now and again, even today.  citation needed  Some  who  interpret  why  no silver bullet to mean that software engineering failed.  clarification needed  However, with further reading, Brooks goes on to say We will surely make substantial progress over the next 40 years an order of magnitude over 40 years is hardly magical ...  citation needed  The search for a single key to success never worked. All known technologies and practices have only made incremental improvements to productivity and quality. Yet, there are no silver bullets for any other profession, either. Others interpret no silver bullet as proof that software engineering has finally matured and recognized that projects succeed due to hard work.  citation needed  However, it could also be said that there are, in fact, a range of silver bullets today, including lightweight methodologies see  Project management , spreadsheet calculators, customized browsers , in-site search engines, database report generators, integrated design-test coding-editors with memorydifferencesundo, and specialty shops that generate niche software, such as information web sites, at a fraction of the cost of totally customized web site development. Nevertheless, the field of software engineering appears too complex and diverse for a single silver bulle t to improve most issues, and each issue accounts for only a small portion of all software problems.  citation needed  1990 to 1999 Prominence of the Internet  edit  The rise of the Internet led to very rapid growth in the demand for international information displaye-mail systems on the World Wide Web. Programmers were required to handle illustrations, maps, photographs, and other images, plus simple animation, at a rate never before seen, with few well-known methods to optimize image displaystorage such as the use of thumbnail images.  citation needed  The growth of browser usage, running on the HyperText Markup Language HTML, changed the way in which information-display and retrieval was organized. The widespread network connections led to the growth and prevention of international computer viruses on MS Windows computers, and the vast proliferation of spam e-mail became a major design issue in e-mail systems, flooding communication channels and requiring semi-automated pre-screening. Keyword-search systems evolved into web-based search engines , and many software systems had to be re-designed, for international searching, depending on search engine optimization SEO techniques. Human natural-language translation systems were needed to attempt to translate the information flow in multiple foreign languages, with many software systems being designed for multi-language usage, based on design concepts from human translators. Typical computer-user bases went from hundreds, or thousands of users, to, often, many-millions of internationa l users.  citation needed  2000 to 2015 Lightweight methodologies  edit  With the expanding demand for software in many smaller organizations, the need for inexpensive software solutions led to the growth of simpler, faster methodologies that developed running software, from requirements to deployment, quicker  easier. The use of rapid-prototyping evolved to entire lightweight methodologies , such as Extreme Programming XP, which attempted to simplify many areas of software engineering, including requirements gathering and reliability testing for the growing, vast number of small software systems. Very large software systems still used heavily documented methodologies, with many volumes in the documentation set however, smaller systems had a simpler, faster alternative approach to managin g the development and maintenance of software calculations and algorithms, information storageretrieval and display.  citation needed  Current trends in software engineering  edit  Software engineering is a young discipline, and is still developing. The directions in which software engineering is developing include  citation needed  Aspects  edit  Aspects help software engineers deal with quality attributes by providing tools to add or remove boilerplate code from many areas in the source code . Aspects describe how all objects or functions should behave in particular circumstances. For example, aspects can add debugging , logging , or locking control into all objects of particular types. Researchers are currently working to understand how to use aspects to design general-purpose code. Related concepts include generative programming and templates . Agile  edit  Agile software development guides software development projects that evolve rapidly with changing expectations and competitive markets. Proponents of this method believe that heavy, document-driven processes like TickIT , CMM and ISO 9000  are fading in importance  citation needed  . Some people believe that companies and agencies export many of the jobs that can be guided by heavy-weight processes  citation needed  . Related concepts include extreme programming , scrum , and lean software development . Experimental  edit  Experimental software engineering is a branch of software engineering interested in devising experiments on software, in collecting data from the experiments, and in devising laws and theories from this data. Proponents of this method advocate that the nature of software is such that we can advance the knowledge on software through experiments only  citation needed  . Software product lines  edit  Software product lines, aka product family engineering, is a systematic way to produce families of software systems, instead of creating a succession of completely individual products. This method emphasizes extensive, systematic, formal code reuse , to try to industrialize the software development process. The Future of Software Engineering conference FOSE, held at ICSE 2000, documented the state of the art of SE in 2000 and listed many problems to be solved over the next decade. The FOSE tracks at the ICSE 2000 18  and the ICSE 2007 19  conferences also help identify the state of the art in software engineering.  citation needed  Software engineering today  edit  The profession is trying to define its boundary and content. The Software Engineering Body of Knowledge SWEBOK has been tabled as an ISO standard during 2006 ISOIEC TR 19759.  citation needed  In 2006, Money Magazine and Salary.com rated software engineering as the best job in America in terms of growth, pay, stress levels, flexibility in hours and working environment, creativity, and how easy it is to enter and advance in the field. 20  Sub-disciplines  edit  Artificial intelligence  edit  A wide variety of platforms has allowed different aspects of AI to develop, ranging from expert systems such as Cyc to deep-learning frameworks to robot platforms such as the Roomba with open interface. 21  Recent advances in deep artificial neural networks and distributed computing have led to a proliferation of software libraries, including Deeplearning4j , TensorFlow , Theano and Torch . A 2011 McKinsey Global Institute study found a shortage of 1.5 million highly trained data and AI professionals and managers 22  and a number of private bootcamps have developed programs to meet that demand, including free programs like The Data Incubator or paid programs like General Assembly . 23  Languages  edit  Main article List of programming languages for artificial intelligence Early symbolic AI inspired Lisp and Prolog , which dominated early AI programming. Modern AI development often uses mainstream languages such as Python or C , 24  or niche languages such as Wolfram Language . 25  Prominent figures in the history of software engineering  edit  Charles Bachman born 1924 is particularly known for his work in the area of databases . Laszlo Belady born 1928 the editor-in-chief of the IEEE Transactions on Software Engineering in the 1980s. Fred Brooks born 1931 best known for managing the development of OS360 . Peter Chen born 1947 known for the development of entity-relationship modeling . Edsger Dijkstra 19302002 developed the framework for a form of structured programming. David Parnas born 1941 developed the concept of information hiding in modular programming . Michael A. Jackson born 1936 software engineering methodologist responsible for JSP method of program design JSD method of system development with John Cameron and Problem Frames method for analysing and structuring software development problems. David Pearson computer scientist born 1946 designed and developed the ICL CADES system 1968-1977 and went on to become a computer graphics pioneer. See also  edit  History of software History of computer science History of programming languages References  edit   CS302 Jared Kings The History of Software   . learn.saylor.org . Retrieved 2018-02-17 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Software engineering  has recently emerged as a discipline in its own right. Sommerville, Ian 1985 1982. Software Engineering . Addison-Wesley. ISBN   978-0-201-14229-7 .  Abbate, Janet 2012. Recoding Gender . Cambridge, MA MIT Press. p.  39. ISBN   978-0262534536 .  Ensmenger, Nathan 2012. The Computer Boys Take Over . Cambridge, MA MIT Press. ISBN   978-0262517966 .  Episode 576 When Women Stopped Coding . NPR Planet Money . Oct 17, 2014 . Retrieved June 27, 2018 .  a b Meyer, Bertrand April 4, 2013. The origin of software engineering   . Retrieved 2016-11-25 .  Tadre, Matti 2014-12-03. The Science of Computing . CRC Press. p.  121. ISBN   978-1-4822-1770-4 .  Mahoney, Michael. The Roots of Software Engineering PDF . CWI Quarterly . 3 4 325334 . Retrieved Jun 4, 2015 .  2018 International Conference on Software Engineering celebrating its 40th anniversary, and 50 years of Software engineering. ICSE 2018 - Plenary Sessions - Margaret Hamilton . Retrieved 9 Jun 2018 .  Rayl, A.J.S. October 16, 2008. NASA Engineers and Scientists-Transforming Dreams Into Reality . NASA 50th anniversary website . NASA . Retrieved 2016-11-25 .  Brian Randell 2001. NATO Software Engineering Conferences . ncl.ac.uk . Retrieved 2016-11-25 .  a b c King, Jared 2016. Jared Kings The History of Software   . CS302 Software Engineering . Saylor.org . Retrieved 2016-11-25 .  Therac-25  Leveson, N.G. Turner, C.S. 1993-07-01. An investigation of the Therac-25 accidents. Computer . 26 7 1841. CiteSeerX   10.1.1.372.412 . doi  10.1109MC.1993.274940 . ISSN   0018-9162 .  RISKS-LIST RISKS-FORUM Digest . The Risks Digest .  Michael Jackson, Engineering and Software Engineering in S Nanz ed, The Future of Software Engineering, Springer Verlag 2010 Michael Jackson, Problem Frames Analyzing and Structuring Software Development Problems Addison-Wesley, 2001  D.J.Pearson The use and abuse of a software engineering system National Computer Conference 1979  ICSE2000 Call for Participation . ul.ie .  ICSE 2007 Home . ucl.ac.uk .  Kalwarski, Tara Daphne Mosher Janet Paskin Donna Rosato 2006. Best Jobs in America . MONEY Magazine . CNN . Retrieved 2006-04-20 . , MONEY Magazine and Salary.com researched hundreds of jobs, considering their growth, pay, stress-levels and other factors. These careers ranked highest. 1. Software Engineer...  Hacking Roomba . hackingroomba.com . Archived from the original on 18 October 2009. Cite uses deprecated parameter deadurl  help   Manyika, James Chui, Michael Bughin, Jaques Brown, Brad Dobbs, Richard Roxburgh, Charles Byers, Angela Hung May 2011. Big Data The next frontier for innovation, competition, and productivity . McKinsey Global Institute. Archived from the original on 6 March 2013 . Retrieved 16 January 2016 . Cite uses deprecated parameter deadurl  help  Cite journal requires journal  help   NY gets new boot camp for data scientists Its free but harder to get into than Harvard . Venture Beat . Archived from the original on 15 February 2016 . Retrieved 21 February 2016 . Cite uses deprecated parameter deadurl  help   C Java . infoworld.com . Retrieved 6 December 2017 .  Ferris, Robert 7 April 2016. How Steve Jobs friend changed the world of math . CNBC . Retrieved 28 February 2018 . External links  edit  Oral history interview with Bruce H. Barnes , Charles Babbage Institute , University of Minnesota. Barnes describes the National Science Foundation NSF and its support of research in theoretical computer science , computer architecture , numerical methods , and software engineering , and the development of networking. Oral history interview with Laszlo A. Belady , Charles Babbage Institute , University of Minnesota. v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleHistory_of_software_engineering oldid905497209  Categories  Software engineering History of software Hidden categories CS1 errors deprecated parameters CS1 errors missing periodical Articles needing additional references from October 2008 All articles needing additional references All articles with unsourced statements Articles with unsourced statements from February 2016 All articles with specifically marked weasel-worded phrases Articles with specifically marked weasel-worded phrases from February 2015 Articles with unsourced statements from October 2007 Articles with specifically marked weasel-worded phrases from February 2016 Wikipedia articles needing clarification from February 2016 Articles with unsourced statements from February 2007