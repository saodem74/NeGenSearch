Programming Computable Functions From Wikipedia, the free encyclopedia    Redirected from Programming language for Computable Functions  Jump to navigation Jump to search In computer science , Programming Computable Functions , or PCF , is a typed functional language introduced by Gordon Plotkin in 1977, based on previous unpublished material by Dana Scott . note 1  It can be considered to be an extended version of the typed lambda calculus or a simplified version of modern typed functional languages such as ML or Haskell . A fully abstract model for PCF was first given by Milner 1977. However, since Milners model was essentially based on the syntax of PCF it was considered less than satisfactory Ong, 1995. The first two fully abstract models not employing syntax were formulated during the 1990s. These models are based on game semantics Hyland and Ong, 2000 Abramsky, Jagadeesan, and Malacaria, 2000 and Kripke logical relations OHearn and Riecke, 1995. For a time it was felt that neither of these models was completely satisfactory, since they were not effectively presentable. However, Ralph Loader demonstrated that no effectively presentable fully abstract model could exist, since the question of program equivalence in the finitary fragment of PCF is not decidable. Contents 1 Syntax 2 Semantics 2.1 Denotational semantics 3 Notes 4 References 5 External links Syntax  edit  The types of PCF are inductively defined as nat is a type For types  and  , there is a type    A context is a list of pairs x    , where x is a variable name and  is a type, such that no variable name is duplicated. One then defines typing judgments of terms-in-context in the usual way for the following syntactical constructs Variables if x    is part of a context  , then   x     Application of a term of type    to a term of type   -abstraction The Y fixed point combinator making terms of type  out of terms of type     The successor  succ  and predecessor  pred  operations on nat and the constant 0 The conditional if with the typing rule   t  nat ,   s 0   ,   s 1     if  t , s 0 , s 1    displaystyle frac Gamma vdash ttextbf nat,quad quad Gamma vdash s_0sigma ,quad quad Gamma vdash s_1sigma Gamma vdash textbf ift,s_0,s_1sigma   nat s will be interpreted as booleans here with a convention like zero denoting truth, and any other number denoting falsity Semantics  edit  Denotational semantics  edit  A relatively straightforward semantics for the language is the Scott model . In this model, Types are interpreted as certain domains .   nat    N  displaystyle textbf natmathbb N _bot  the natural numbers with a bottom element adjoined, with the flat ordering        displaystyle sigma to tau , is interpreted as the domain of Scott-continuous functions from      displaystyle sigma , to      displaystyle tau , , with the pointwise ordering. A context x 1   1 ,  , x n   n displaystyle x_1sigma _1,dots ,x_nsigma _n is interpreted as the product    1         n   displaystyle sigma _1times dots times sigma _n Terms in context   x   displaystyle Gamma vdash xsigma  are interpreted as continuous functions            displaystyle Gamma to sigma  Variable terms are interpreted as projections Lambda abstraction and application are interpreted by making use of the cartesian closed structure of the category of domains and continuous functions Y is interpreted by taking the least fixed point of the argument This model is not fully abstract for PCF but it is fully abstract for the language obtained by adding a parallel or operator to PCF p.  293 in the Hyland and Ong 2000 reference below. Notes  edit   PCF is a programming language for computable functions, based on LCF, Scotts logic of computable functions  Plotkin 1977 . Programming Computable Functions is used by  Mitchell 1996 . It is also referred to as Programming with Computable Functions or Programming language for Computable Functions . References  edit  Scott, Dana S. 1969. A type-theoretic alternative to CUCH, ISWIM, OWHY PDF . Unpublished manuscript . Italic or bold markup not allowed in journal  help  .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em Appeared as Scott, Dana S. 1993. A type-theoretic alternative to CUCH, ISWIM, OWHY. Theoretical Computer Science . 121  411440. doi  10.10160304-39759390095-b . Plotkin, Gordon D. 1977. LCF considered as a programming language PDF . Theoretical Computer Science . 5  223255. doi  10.10160304-39757790044-5 . Milner, Robin 1977. Fully abstract models of typed -calculi. Theoretical Computer Science . 4  122. doi  10.10160304-39757790053-6 . Mitchell, John C. 1996. The Language PCF. Foundations for Programming Languages . Abramsky, S., Jagadeesan, R., and Malacaria, P. 2000. Full Abstraction for PCF. Information and Computation . 163 2 409470. doi  10.1006inco.2000.2930 . CS1 maint multiple names authors list  link  Hyland, J. M. E.  Ong, C.-H. L. 2000. On Full Abstraction for PCF. Information and Computation . 163 2 285408. doi  10.1006inco.2000.2917 . OHearn, P. W.  Riecke, J. G 1995. Kripke Logical Relations and PCF. Information and Computation . 120 1 107116. doi  10.1006inco.1995.1103 . Loader, R. 2001. Finitary PCF is not decidable. Theoretical Computer Science . 266 12 341364. doi  10.1016S0304-39750000194-8 . Ong, C.-H. L. 1995. Correspondence between Operational and Denotational Semantics The Full Abstraction Problem for PCF. In Abramsky, S. Gabbay, D. Maibau, T. S. E. eds.. Handbook of Logic in Computer Science . Oxford University Press. pp.  269356. Archived from the original on 2006-01-07 . Retrieved 2006-01-19 . Cite uses deprecated parameter dead-url  help  External links  edit  Introduction to RealPCF Lexer and Parser for PCF written in SML Retrieved from  httpsen.wikipedia.orgwindex.phptitleProgramming_Computable_Functions oldid913090829  Categories  Programming languages created in 1977 Academic programming languages Educational programming languages Functional languages Programming language theory Hidden categories CS1 errors markup CS1 maint multiple names authors list CS1 errors deprecated parameters