ALGOL 58 From Wikipedia, the free encyclopedia Jump to navigation Jump to search ALGOL 58 Paradigm procedural , imperative , structured Designed  by Friedrich L. Bauer , Hermann Bottenbruch , Heinz Rutishauser , Klaus Samelson , John Backus , Charles Katz , Alan Perlis , Joseph Henry Wegstein First  appeared 1958  61  years ago   1958  Influenced by FORTRAN , IT, Plankalkl , 1  Sequentielle Formelbersetzung Influenced Most subsequent imperative languages  Algol-like  ALGOL 58 , originally known as IAL , is one of the family of ALGOL computer programming languages . It was an early compromise design soon superseded by ALGOL 60 . According to John Backus 2  The Zurich ACM-GAMM Conference had two principal motives in proposing the IAL a To provide a means of communicating numerical methods and other procedures between people, and b To provide a means of realizing a stated process on a variety of machines... ALGOL 58 introduced the fundamental notion of the compound statement , but it was restricted to control flow only, and it was not tied to identifier scope in the way that Algol 60s blocks were. Contents 1 Name 2 History 2.1 Time line of implementations of ALGOL 58 variants 3 ALGOL 58s influence on ALGOL 60 4 References 5 External links Name  edit  Bauer attributes the name to Bottenbruch , who coined the term algorithmic language algorithmische Sprache in 1957, at least in Germany. 3  History  edit  There were proposals for a universal language by the Association for Computing Machinery ACM and also by the German Gesellschaft fr Angewandte Mathematik und Mechanik Society of Applied Mathematics and Mechanics GAMM. It was decided to organize a joint meeting to combine them. The meeting took place from May 27 to June 2, 1958, at ETH Zurich and was attended by the following people Friedrich L. Bauer , Hermann Bottenbruch , Heinz Rutishauser , and Klaus Samelson from the GAMM John Backus , Charles Katz , Alan Perlis , and Joseph Henry Wegstein from the ACM. The language was originally proposed to be called IAL  International Algebraic Language  but according to Perlis 4  this was rejected as an unspeakable and pompous acronym. ALGOL was suggested instead, though not officially adopted until a year later. The publication following the meeting still used the name IAL. 5  By the end of 1958 the ZMMD-group had built a working ALGOL 58 compiler for the Z22 computer. ZMMD was an abbreviation for Zrich where Rutishauser worked, Mnchen workplace of Bauer and Samelson, Mainz location of the Z22 computer, Darmstadt workplace of Bottenbruch. ALGOL 58 saw some implementation effort at IBM , but the effort was in competition with FORTRAN , and soon abandoned. It was also implemented at Dartmouth College on an LGP-30 , but that implementation soon evolved into Algol 60 . An implementation for the Burroughs 220 called BALGOL evolved along its own lines as well, but retained much of ALGOL 58s original character. 6  ALGOL 58s primary contribution was to later languages it was used as a basis for JOVIAL , MAD , NELIAC and ALGO . It was also used during 1959 to publish algorithms in CACM , beginning a trend of using ALGOL notation in publication that continued for many years. Time line of implementations of ALGOL 58 variants  edit  Name Year Author State Description Target CPU ZMMD-implementation 1958 Friedrich L. Bauer , Heinz Rutishauser, Klaus Samelson, Hermann Bottenbruch Germany Z22 NELIAC 1958 Naval Electronics Laboratory USA ANUSQ-17 JOVIAL 1960 Jules Schwartz USA Was the DOD HOL prior to Ada programming language Various see article BALGOL 1960 Joel Merner et al. USA Burroughs Corporation B220 MAD 1960 University of Michigan USA IBM 7090 7094 mainframe, then mid-1960s ported to Univac 1108 Dartmouth ALGOL 30 1962 Thomas Eugene Kurtz et al. - evolved into ALGOL 60 USA LGP-30 SUBALGOL 1962 Bob Braden , Lawrence M. Breed and Roger Moore USA BALGOL extension IBM 7090 ALGO  Bendix Corporation USA Bendix G-15 ALGOL 58s influence on ALGOL 60  edit  IAL introduced the three-level concept of reference, publication and hardware language, and the concept of word delimiters having a separate representation from freely chosen identifiers hence, no reserved words. ALGOL  60 kept this three-level concept. 7  The distinction between assignment   representing a left-facing arrow and the equality relation  was introduced in IAL and kept in ALGOL  60. Both IAL and ALGOL  60 allow arrays with arbitrary lower and upper subscript bounds, and allow subscript bounds to be defined by integer expressions. Both IAL and ALGOL  60 allow nesting of procedure declarations and the corresponding identifier scopes. The IAL report described parameter substitution in much the same terms as the ALGOL  60 report, leaving open the possibility of call by name . It is unclear if this was realized at the time. IAL allows numeric statement labels, that ALGOL  60 kept. The possibility of including non-ALGOL code within a program was already hinted at, in the context of parameters to procedures. Both IAL and ALGOL  60 have a switch designator , unrelated, however, to the switch statement in C and other languages. In-line functions of the form f  x    x  2 were proposed in IAL but dropped in ALGOL  60. IAL procedure declarations provide separate declaration lists for input and output parameters, a procedure can return multiple values this mechanism was replaced in ALGOL  60 with the value declaration. Variable declarations in IAL can be placed anywhere in the program and not necessarily at the beginning of a procedure. In contrast, the declarations within an ALGOL  60 block should occur before all execution statements. The for -statement has the form for ibaseincrementlimit , directly resembling the loop of Rutishausers programming language Superplan , replacing  with  , and replacing its German keyword Fr with the direct English translation for  ALGOL  60 replaced the parentheses with the word delimiters step and until , such that the previous statement instead would be i  base   step   increment   until   limit . The IAL if -statement does not have a then -clause or else -clause it rather guards the succeeding statement. IAL provides an if either -statement that cleanly allows testing of multiple conditions. Both were replaced by ALGOLs if - then construct, with the introduction of the  dangling- else  ambiguity. IAL provides macro-substitution with the do -statement this was dropped in ALGOL  60. IAL allows one or more array subscripts to be omitted when passing arrays to procedures, and to provide any or all arguments to a procedure passed to another procedure. IALs infix boolean operators are all of the same precedence level. Exponents are indicated with paired up and down arrows, which removed any confusion about the correct interpretation of nested exponents ALGOL  60 replaced the paired arrows with a single up-arrow whose function is equivalent to FORTRANs  . The IAL report does not explicitly specify which standard functions were to be provided, making a vague reference to the standard functions of analysis. The ALGOL  60 report has a more explicit list of standard functions. References  edit   Rojas, Ral Hashagen, Ulf 2002. The First Computers History and Architectures . MIT Press. p.  292. ISBN   978-0262681377 . Retrieved October 25, 2013 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Backus, J.W. 1959. The Syntax and Semantics of the Proposed International Algebraic Language of Zrich ACM-GAMM Conference. Proceedings of the International Conference on Information Processing . UNESCO. pp.  125132.  Aspray, William 17 February 1987, An interview with Friedrich L. Bauer PDF , Charles Babbage Institute , archived from the original PDF on April 22, 2012  Perlis, A.J. 1981. Talk on Computing in the fifties. ACM National Conference. Nashville,. TN . Transcript in J. A. N. Lee ed., Computer Pioneers, IEEE Computer Society Press, Los Alamito, CA, 1995, 545-556.  Perlis, A.J. Samelson, K. 1958. Preliminary report international algebraic language. Communications of the ACM . 1 12 822. doi  10.1145377924.594925 .  Algol 58 implementations and dialects , Software Preservation Group , Computer History Museum . Donald Knuth is quoted on BALGOL Im in my second year at Caltech, and I was a consultant to Burroughs. After finishing my compiler for Burroughs, I joined the Product Planning Department. The Product Planning Department was largely composed of people who had written the best software ever done in the world up to that time, which was a Burroughs ALGOL compiler for the 220 computer. That was a great leap forward for software. It was the first software that used list processing and high level data structures in an intelligent way. They took the ideas of Newell and Simon and applied them to compilers. It ran circles around all the other things that we were doing. Don Knuth, CHM Oral History, 2007, page 9  Naur, P editor 1962. Revised report on the Algorithmic Language ALGOL 60 PDF . International Federation for Information Processing. CS1 maint extra text authors list  link  External links  edit  Algol 58 at the Software Preservation Group cf. Computer History Museum  Algol 58 report from CACM at the Software Preservation Group Retrieved from  httpsen.wikipedia.orgwindex.phptitleALGOL_58 oldid913604507  Categories  Algol programming language family Comparison of individual programming languages Programming languages created in 1958 Hidden categories CS1 maint extra text authors list