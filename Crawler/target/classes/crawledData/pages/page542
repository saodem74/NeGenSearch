Requirements management From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Requirements management     news    newspapers    books    scholar    JSTOR  December 2006   Learn how and when to remove this template message  Requirements management is the process of documenting, analyzing , tracing , prioritizing and agreeing on requirements and then controlling change and communicating to relevant stakeholders. It is a continuous process throughout a project. A requirement is a capability to which a project outcome product or service should conform. Contents 1 Overview 2 Traceability 3 Requirements activities 3.1 Investigation 3.2 Feasibility 3.3 Design 3.4 Construction and test 3.5 Requirements change management 3.6 Release 4 Tooling 5 See also 6 References 7 Further reading 8 External links Overview  edit  The purpose of requirements management is to ensure that an organization documents, verifies, and meets the needs and expectations of its customers and internal or external stakeholders. 1  Requirements management begins with the analysis and elicitation of the objectives and constraints of the organization. Requirements management further includes supporting planning for requirements, integrating requirements and the organization for working with them attributes for requirements, as well as relationships with other information delivering against requirements, and changes for these. The traceability thus established is used in managing requirements to report back fulfilment of company and stakeholder interests in terms of compliance, completeness, coverage, and consistency. Traceabilities also support change management as part of requirements management in understanding the impacts of changes through requirements or other related elements e.g., functional impacts through relations to functional architecture, and facilitating introducing these changes. 2  Requirements management involves communication between the project team members and stakeholders, and adjustment to requirements changes throughout the course of the project. 3  To prevent one class of requirements from overriding another, constant communication among members of the development team is critical. For example, in software development for internal applications, the business has such strong needs that it may ignore user requirements, or believe that in creating use cases , the user requirements are being taken care of. Traceability  edit  Main article Requirements traceability Requirements traceability is concerned with documenting the life of a requirement. 4  It should be possible to trace back to the origin of each requirement and every change made to the requirement should therefore be documented in order to achieve traceability. 5  Even the use of the requirement after the implemented features have been deployed and used should be traceable. 5  Requirements come from different sources, like the business person ordering the product, the marketing manager and the actual user. These people all have different requirements for the product. Using requirements traceability, an implemented feature can be traced back to the person or group that wanted it during the requirements elicitation . This can, for example, be used during the development process to prioritize the requirement, 6  determining how valuable the requirement is to a specific user. It can also be used after the deployment when user studies show that a feature is not used, to see why it was required in the first place. Requirements activities  edit  This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Requirements management     news    newspapers    books    scholar    JSTOR  October 2010   Learn how and when to remove this template message  At each stage in a development process , there are key requirements management activities and methods. To illustrate, consider a standard five-phase development process with Investigation, Feasibility, Design, Construction and Test, and Release stages. Investigation  edit  In Investigation, the first three classes of requirements are gathered from the users, from the business and from the development team. In each area, similar questions are asked what are the goals, what are the constraints, what are the current tools or processes in place, and so on. Only when these requirements are well understood can functional requirements be developed. In the common case, requirements cannot be fully defined at the beginning of the project. Some requirements will change, either because they simply werent extracted, or because internal or external forces at work affect the project in mid-cycle. The deliverable from the Investigation stage is a requirements document that has been approved by all members of the team. Later, in the thick of development, this document will be critical in preventing scope creep or unnecessary changes. As the system develops, each new feature opens a world of new possibilities, so the requirements specification anchors the team to the original vision and permits a controlled discussion of scope change.  citation needed  While many organizations still use only documents to manage requirements, others manage their requirements baselines using software tools. These tools allow requirements to be managed in a database, and usually have functions to automate traceability e.g., by allowing electronic links to be created between parent and child requirements, or between test cases and requirements, electronic baseline creation, version control, and change management. Usually such tools contain an export function that allows a specification document to be created by exporting the requirements data into a standard document application.  citation needed  Feasibility  edit  In the Feasibility stage, costs of the requirements are determined. For user requirements, the current cost of work is compared to the future projected costs once the new system is in place. Questions such as these are asked What are data entry errors costing us now Or What is the cost of scrap due to operator error with the current interface Actually, the need for the n ew tool is often recognized as these questions come to the attention of financial people in the organization. Business costs would include, What department has the budget for this What is the expected rate of return on the new product in the marketplace Whats the internal rate of return in reducing costs of training and support if we make a new, easier-to-use system Technical costs are related to software development costs and hardware costs. Do we have the right people to create the tool Do we need new equipment to support expanded software roles This last question is an important type. The team must inquire into whether the newest automated tools will add sufficient processing power to shift some of the burden from the user to the system in order to save people time. The question also points out a fundamental point about requirements management. A human and a tool form a system, and this realization is especially important if the tool is a computer or a new application on a computer. The human mind excels in parallel processing and interpretation of trends with insufficient data. The CPU excels in serial processing and accurate mathematical computation. The overarching goal of the requirements management effort for a software project would thus be to make sure the work being automated gets assigned to the proper processor. For instance, Dont make the human remember where she is in the interface. Make the interface report the humans location in the system at all times. Or Dont make the human enter the same d ata in two screens. Make the system store the data and fill in the second screen as needed. The deliverable from the Feasibility stage is the budget and schedule for the project. Design  edit  Assuming that costs are accurately determined and benefits to be gained are sufficiently large, the project can proceed to the Design stage. In Design, the main requirements management activity is comparing the results of the design against the requirements document to make sure that work is staying in scope. Again, flexibility is paramount to success. Heres a classic story of scope change in mid-stream that actually worked well. Ford auto designers in the early 80s were expecting gasoline prices to hit 3.18 per gallon by the end of the decade. Midway through the design of the Ford Taurus, prices had centered to around 1.50 a gallon. The design team decided they could build a la rger, more comfortable, and more powerful car if the gas prices stayed low, so they redesigned the car. The Taurus launch set nationwide sales records when the new car came out, primarily because it was so roomy and comfortable to drive. In most cases, however, departing from the original requirements to that degree does not work. So the requirements document becomes a critical tool that helps the team make decisions about design changes. 7  Construction and test  edit  In the construction and testing stage, the main activity of requirements management is to make sure that work and cost stay within schedule and budget, and that the emerging tool does in fact meet requirements. A main tool used in this stage is prototype construction and iterative testing. For a software application, the user interface can be created on paper and tested with p otential users while the framework of the software is being built. Results of these tests are recorded in a user interface design guide and handed off to the design team when they are ready to develop the interface. This saves their time and makes their jobs much easier. Verification This effort verifies that the requirement has been implemented correctly. There are 4 methods of verification analysis, inspection, testing, and demonstration. Numerical software execution results or through-put on a network test, for example, provides analytical evidence that the requirement has been met. Inspection of vendor documentation or spec sheets also ve rifies requirements. Actually testing or demonstrating the software in a lab environment also verifies the requirements a test type of verification will occur when test equipment not normally part of the lab or system under test is used. Comprehensive test procedures which outline the steps and their expected results clearly identify what is to be seen as a result of perform ing the step. After the step or set of steps is completed the last steps expected result will call out what has been seen and then identify what requirement or requirements have been verified identified by number. The requirement number, title and verbiage are tied together in another location in the test document. Requirements change management  edit  Hardly would any software development project be completed without some changes being asked of the project. The changes can stem from changes in the environment in which the finished product is envisaged to be used, business changes, regulation changes, errors in the original definition of requirements,limitations in technology, changes in the security environment and so on. Th e activities of requirements change management include receiving the change requests from the stakeholders, recording the received change requests, analyzing and determining the desirability and process of implementation, implementation of the change request, quality assurance for the implementation and closing the change request. Then the data of change requests be compiled, a nalyzed and appropriate metrics are derived and dovetailed into the organizational knowledge repository. 8  Release  edit  Requirements management does not end with product release. From that point on, the data coming in about the applications acceptability is gathered and fed into the Investigation phase of the next generation or release. Thus the process begins again. Tooling  edit  Acquiring a tool to support requirements management is no trivial matter and it needs to be undertaken as part of a broader process improvement initiative. It has long been a perception that a tool, once acquired and installed on a project, can address all of its requirements management-related needs. However, the purchase or development of a tool to support requirements manage ment can be a costly decision. Organizations may get burdened with expensive support contracts, disproportionate effort can get misdirected towards learning to use the tool and configuring it to address particular needs, and inappropriate use that can lead to erroneous decisions. Organizations should follow an incremental process to make decisions about tools to support their p articular needs from within the wider context of their development process and tooling. 9  The tools are presented in Requirements traceability . See also  edit  Requirement Requirements engineering Requirements analysis Requirements traceability Requirements Engineering Specialist Group Process area CMMI Requirements Development RD Requirements Management REQM Product requirements document References  edit   Stellman, Andrew Greene, Jennifer 2005. Applied Software Project Management . OReilly Media. ISBN   978-0-596-00948-9 . Archived from the original on 2015-02-09. Cite uses deprecated parameter deadurl  help  .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Requirements management . UK Office of Government Commerce . Retrieved 2009-11-10 .  A Guide to the Project Management Body of Knowledge 4th ed.. Project Management Institute. 2008. ISBN   978-1-933890-51-7 .  Gotel, O., Finkelstein, A. An Analysis of the Requirements Traceability Problem Proc. of First International Conference on Requirements Engineering, 1994, pages 94-101  a b Gotel, Orlena Cleland-Huang, Jane Hayes, Jane Huffman Zisman, Andrea Egyed, Alexander Grnbacher, Paul Dekhtyar, Alex Antoniol, Giuliano Maletic, Jonathan 2012-01-01. Cleland-Huang, Jane Gotel, Orlena Zisman, Andrea eds.. Software and Systems Traceability . Springer London. pp.  322. doi  10.1007978-1-4471-2239-5_1 . ISBN   9781447122388 .  Rempel, Patrick Mder, Patrick 2015-03-23. Fricker, Samuel A. Schneider, Kurt eds.. Requirements Engineering Foundation for Software Quality . Lecture Notes in Computer Science. Springer International Publishing. pp.  8197. doi  10.1007978-3-319-16101-3_6 . ISBN   9783319161006 .  Ralph, P., and Wand, Y. A Proposal for a Formal Definition of the Design Concept. In, Lyytinen, K., Loucopoulos, P., Mylopoulos, J. , and Robinson, W., eds., Design Requirements Engineering A Ten-Year Perspective Springer-Verlag, 2009, pp. 103-136  Chemuturi, M. 2013. Requirements Engineering and Management for Software Development Projects . doi  10.1007978-1-4614-5377-2 . ISBN   978-1-4614-5376-5 .  Gotel, Orlena Mder, Patrick 2012-01-01. Cleland-Huang, Jane Gotel, Orlena Zisman, Andrea eds.. Software and Systems Traceability . Springer London. pp.  4368. doi  10.1007978-1-4471-2239-5_3 . ISBN   9781447122388 . Further reading  edit  CMMI Product Team August 2006. CMMI for Development, Version 1.2  PDF  . Technical Report CMUSEI-2006-TR-008. Software Engineering Institute . Retrieved 2008-01-22 . Cite journal requires journal  help  Colin Hood, Simon Wiedemann, Stefan Fichtinger, Urte Pautz Requirements Management Interface Between Requirements Development and All Other Engineering Processes Springer, Berlin 2007, ISBN   3-540-47689-X Requirements Management - A Practice Guide , PMI External links  edit  U.K. Office of Government Commerce OGC - Requirements management archive OGC website ceased activity on 1 October 2011 CDC Unified Process Practices Guide - Requirements Management International Requirements Engineering Board IREB Retrieved from  httpsen.wikipedia.orgwindex.phptitleRequirements_management oldid911740239  Categories  Product lifecycle management Systems engineering Software requirements Systems Modeling Language Hidden categories CS1 errors deprecated parameters Articles needing additional references from December 2006 All articles needing additional references Articles needing additional references from October 2010 All articles with unsourced statements Articles with unsourced statements from December 2012 Articles with unsourced statements from May 2012 CS1 errors missing periodical