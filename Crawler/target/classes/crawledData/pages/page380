Domain-specific language From Wikipedia, the free encyclopedia Jump to navigation Jump to search A domain-specific language  DSL  is a computer language specialized to a particular application domain . This is in contrast to a general-purpose language GPL, which is broadly applicable across domains. There are a wide variety of DSLs, ranging from widely used languages for common domains, such as HTML for web pages, down to languages used by only one or a few pieces of software, such as MUSH soft code. DSLs can be further subdivided by the kind of language, and include domain-specific markup languages , domain-specific modeling languages more generally, specification languages , and domain-specific programming languages . Special-purpose computer languages have always existed in the computer age, but the term domain-specific language has become more popular due to the rise of domain-specific modeling . Simpler DSLs, particularly ones used by a single application, are sometimes informally called mini-languages . The line between general-purpose languages and domain-specific languages is not always sharp, as a language may have specialized features for a particular domain but be applicable more broadly, or conversely may in principle be capable of broad application but in practice used primarily for a specific domain. For example, Perl was originally developed as a text-processing and glue language, for the same domain as AWK and shell scripts , but was mostly used as a general-purpose programming language later on. By contrast, PostScript is a Turing complete language, and in principle can be used for any task, but in practice is narrowly used as a page description language . Contents 1 Use 2 Overview 2.1 In design and implementation 2.2 Programming tools 3 Domain-specific language topics 3.1 External and Embedded Domain Specific Languages 3.2 Usage patterns 3.3 Design goals 3.4 Idioms 4 Examples 4.1 GameMaker Language 4.2 Unix shell scripts 4.3 ColdFusion Markup Language 4.4 Erlang OTP 4.5 FilterMeister 4.6 MediaWiki templates 4.7 Software engineering uses 4.8 Metacompilers 4.9 Unreal Engine before version 4 and other games 4.10 Rules Engines for Policy Automation 4.11 Statistical modelling languages 4.12 Generate model and services to multiple programming Languages 4.13 Gherkin 4.14 Other examples 5 Advantages and disadvantages 6 Tools for designing domain-specific languages 7 See also 8 References 9 Further reading 10 External links Use  edit  The design and use of appropriate DSLs is a key part of domain engineering , by using a language suitable to the domain at hand  this may consist of using an existing DSL or GPL, or developing a new DSL. Language-oriented programming considers the creation of special-purpose languages for expressing problems as standard part of the problem-solving process. Creating a domain-specific language with software to support it, rather than reusing an existing language, can be worthwhile if the language allows a particular type of problem or solution to be expressed more clearly than an existing language would al low and the type of problem in question reappears sufficiently often. Pragmatically, a DSL may be specialized to a particular problem domain, a particular problem representation technique, a particular solution technique, or other aspects of a domain. Overview  edit  A domain-specific language is created specifically to solve problems in a particular domain and is not intended to be able to solve problems outside it although that may be technically possible. In contrast, general-purpose languages are created to solve problems in many domains. The domain can also be a business area. Some examples of business areas include domain-specific language for life insurance policies developed internally in large insurance enterprise domain-specific language for combat simulation domain-specific language for salary calculation domain-specific language for billing A domain-specific language is somewhere between a tiny programming language and a scripting language , and is often used in a way analogous to a programming library . The boundaries between these concepts are quite blurry, much like the boundary between scripting languages and general-purpose languages. In design and implementation  edit  Domain-specific languages are languages or often, declared syntaxes or grammars with very specific goals in design and implementation. A domain-specific language can be one of a visual diagramming language, such as those created by the Generic Eclipse Modeling System , programmatic abstractions, such as the Eclipse Modeling Framework , or textual languages. For instance, the command line utility grep has a regular expression syntax which matches patterns in lines of text. The sed utility defines a syntax for matching and replacing regular expressions. Often, these tiny languages can be used together inside a shell to perform more complex programming tasks. The line between domain-specific languages and scripting languages is somewhat blurred, but domain-specific languages often lack low-level functions for filesystem access, interprocess control, and other functions that characterize full-featured programming languages, scripting or otherwise. Many domain-specific languages do not compile to byte-code or executable code, but to various kinds of media objects GraphViz exports to PostScript , GIF , JPEG , etc., where Csound compiles to audio files, and a ray-tracing domain-specific language like POV compiles to graphics files. A computer language like SQL presents an interesting case it can be deemed a domain-specific language because it is specific to a specific domain in SQLs case, accessing and managing relational databases, and is often called from another application, but SQL has more keywords and functions than many scripting languages, and is often thought of as a language in its own right, perhaps because of the pre valence of database manipulation in programming and the amount of mastery required to be an expert in the language. Further blurring this line, many domain-specific languages have exposed APIs, and can be accessed from other programming languages without breaking the flow of execution or calling a separate process, and can thus operate as programming libraries. Programming tools  edit  Some domain-specific languages expand over time to include full-featured programming tools, which further complicates the question of whether a language is domain-specific or not. A good example is the functional language XSLT , specifically designed for transforming one XML graph into another, which has been extended since its inception to allow particularly in its 2.0 version for various forms of filesystem interaction, string and date manipulation, and data typing. In model-driven engineering , many examples of domain-specific languages may be found like OCL , a language for decorating models with assertions or QVT , a domain-specific transformation language. However, languages like UML are typically general-purpose modeling languages. To summarize, an analogy might be useful a Very Little Language is like a knife, which can be used in thousands of different ways, from cutting food to cutting down trees. A domain-specific language is like an electric drill it is a powerful tool with a wide variety of uses, but a specific context, namely, putting holes in things. A General Purpose Language is a complete work bench, with a variety of tools intended for performing a variety of tasks. Domain-specific languages should be used by programmers who, looking at their current workbench, realize they need a better drill and find that a particular domain-specific language provides exactly that. Domain-specific language topics  edit  External and Embedded Domain Specific Languages  edit  DSLs implemented via an independent interpreter or compiler are known as External Domain Specific Languages . Well known examples include LaTeX or AWK. A separate category known as Embedded or Internal Domain Specific Languages are typically implemented within a host language as a library and tend to be limited to the syntax of the host language, though this depends on host language capabilities. 1  Usage patterns  edit  There are several usage patterns for domain-specific languages 2  3  Processing with standalone tools, invoked via direct user operation, often on the command line or from a Makefile e.g., grep for regular expression matching, sed, lex, yacc, the GraphViz toolset, etc. Domain-specific languages which are implemented using programming language macro systems, and which are converted or expanded into a host general purpose language at compile-time or realtime embedded domain-specific language  eDSL  4  , implemented as libraries which exploit the syntax of their host general purpose language or a subset thereof while adding domain-specific language elements data types, routines, methods, macros etc.. e.g. jQuery , React , Embedded SQL , LINQ  Domain-specific languages which are called at runtime from programs written in general purpose languages like C or Perl , to perform a specific function, often returning the results of operation to the host programming language for further processing generally, an interpreter or virtual machine for the domain-specific language is embedded into the host application e.g. format strings , a regular expression engine  Domain-specific languages which are embedded into user applications e.g., macro languages within spreadsheets and which are 1 used to execute code that is written by users of the application, 2 dynamically generated by the application, or 3 both. Many domain-specific languages can be used in more than one way.  citation needed  DSL code embedded in a host language may have special syntax support, such as regexes in sed, AWK, Perl or JavaScript, or may be passed as strings. Design goals  edit  Adopting a domain-specific language approach to software engineering involves both risks and opportunities. The well-designed domain-specific language manages to find the proper balance between these. Domain-specific languages have important design goals that contrast with those of general-purpose languages Domain-specific languages are less comprehensive. Domain-specific languages are much more expressive in their domain. Domain-specific languages should exhibit minimal redundancy . Idioms  edit  In programming, idioms are methods imposed by programmers to handle common development tasks, e.g. Ensure data is saved before the window is closed. Edit code whenever command-line parameters change because they affect program behavior. General purpose programming languages rarely support such idioms, but domain-specific languages can describe them, e.g. A script can automatically save data. A domain-specific language can parameterize command line input. Examples  edit  Examples of domain-specific languages include HTML , Logo for pencil-like drawing, Verilog and VHDL hardware description languages, MATLAB and GNU Octave for matrix programming, Mathematica , Maple and Maxima for symbolic mathematics , Specification and Description Language for reactive and distributed systems, spreadsheet formulas and macros, SQL for relational database queries, YACC grammars for creating parsers , regular expressions for specifying lexers , the Generic Eclipse Modeling System for creating diagramming languages, Csound for sound and music synthesis, and the input languages of GraphViz and GrGen , software packages used for graph layout and graph rewriting . GameMaker Language  edit  The GML scripting language used by GameMaker Studio is a domain-specific language targeted at novice programmers to easily be able to learn programming. While the language serves as a blend of multiple languages including Delphi , C , and BASIC , there is a lack of structures, data types, and other features of a full-fledged programming language. Many of the built-in functions are sandboxed for the purpose of easy portability. The language primarily serves to make it easy for anyone to pick up the language and develop a game. Unix shell scripts  edit  Unix shell scripts give a good example of a domain-specific language for data 5  organization. They can manipulate data in files or user input in many different ways. Domain abstractions and notations include streams such as stdin and stdout and operations on streams such as redirection and pipe. These abstractions combine to make a robust language to describe the flow and organization of data. The language consists of a simple interface a script for running and controlling processes that perform small tasks . These tasks represent the idioms of organizing data into a desired format such as tables, graphs, charts, etc. These tasks consist of simple control-flow and string manipulation mechanisms that cover a lot of common usages like searching and replacing string in files, or counting occurrences of strings frequency counting. Even though Unix scripting languages are Turing complete , they differ from general purpose languages .  clarification needed  In practice, scripting languages are used to weave together small Unix tools such as grep , ls , sort or wc . ColdFusion Markup Language  edit  ColdFusion s associated scripting language is another example of a domain-specific language for data-driven websites. This scripting language is used to weave together languages and services such as Java, .NET, C, SMS, email, email servers, http, ftp, exchange, directory services, and file systems for use in websites. The ColdFusion Markup Language CFML includes a set of tags that can be used in ColdFusion pages to interact with data sources, manipulate data, and display output. CFML tag syntax is similar to HTML element syntax. Erlang OTP  edit  The Erlang Open Telecom Platform was originally designed for use inside Ericsson as a domain-specific language. The language itself offers a platform of libraries to create finite state machines, generic servers and event managers that quickly allow an engineer to deploy applications, or support libraries, that have been shown in industry benchmarks to outperform other languages intended for a mixed set of domains, such as C and C. The language is now of ficially open source and can be downloaded from their website. FilterMeister  edit  FilterMeister is a programming environment, with a programming language that is based on C, for the specific purpose of creating Photoshop -compatible image processing filter plug-ins FilterMeister runs as a Photoshop plug-in itself and it can load and execute scripts or compile and export them as independent plug-ins. Although the FilterMeister language reproduces a significant portion of the C language and function library, it contains only those features which can be used within the context of Photoshop plug-i ns and adds a number of specific features only useful in this specific domain. MediaWiki templates  edit  The Template feature of MediaWiki is an embedded domain-specific language whose fundamental purpose is to support the creation of page templates and the transclusion inclusion by reference of MediaWiki pages into other MediaWiki pages. Software engineering uses  edit  There has been much interest in domain-specific languages to improve the productivity and quality of software engineering . Domain-specific language could possibly provide a robust set of tools for efficient software engineering. Such tools are beginning to make their way into the development of critical software systems. The Software Cost Reduction Toolkit 6  is an example of this. The toolkit is a suite of utilities including a specification editor to create a requirements specification , a dependency graph browser to display variable dependencies, a consistency checker to catch missing cases in well-formed formulas in the specification, a model checker and a theorem prover to check program properties against the specification, and an invariant generator that automatically constructs invariants based on the requirements. A newer development is language-oriented programming , an integrated software engineering methodology based mainly on creating, optimizing, and using domain-specific languages. Metacompilers  edit  Further information Metacompiler Complementing language-oriented programming , as well as all other forms of domain-specific languages, are the class of compiler writing tools called metacompilers . A metacompiler is not only useful for generating parsers and code generators for domain-specific languages, but a metacompiler itself compiles a domain-specific metalanguage specifically designed for the domain of metaprogramming . Besides parsing domain-specific languages, metacompilers are useful for generating a wide range of software engineering and analysis tools. The meta-compiler methodology is often found in program transformation systems . Metacompilers that played a significant role in both computer science and the computer industry include Meta-II 7  and its descendant TreeMeta . 8  Unreal Engine before version 4 and other games  edit  Unreal and Unreal Tournament unveiled a language called UnrealScript . This allowed for rapid development of modifications compared to the competitor Quake using the Id Tech 2 engine. The Id Tech engine used standard C code meaning C had to be learned and properly applied, while UnrealScript was optimized for ease of use and efficiency. Similarly, the development of more recent games introduced their own specific languages, one more common example is Lua for scripting. Rules Engines for Policy Automation  edit  Various Business Rules Engines have been developed for automating policy and business rules used in both government and private industry. ILOG , Oracle Policy Automation , DTRules , Drools and others provide support for DSLs aimed to support various problem domains. DTRules goes so far as to define an interface for the use of multiple DSLs within a Rule Set. The purpose of Business Rules Engines is to define a representation of business logic in as human-readable fashion as possible. This allows both subject matter experts and developers to work with and understand the same representation of the business logic. Most Rules Engines provide both an approach to simplifying the control structures for business logic for example, using Declarative Rules or Decision Tables  coupled with alternatives to programming syntax in favor of DSLs. Statistical modelling languages  edit  Statistical modelers have developed domain-specific languages such as Bugs , Jags , and Stan . These languages provide a syntax for describing a Bayesian model and generate a method for solving it using simulation. Generate model and services to multiple programming Languages  edit  Generate object handling and services based on a Interface Description Language for a domain-specific language such as JavaScript for web applications, HTML for documentation, C for high-performance code, etc. This is done by cross-language frameworks such as Apache Thrift or Google Protocol Buffers . Gherkin  edit  Gherkin is a language designed to define test cases to check the behavior of software, without specifying how that behavior is implemented. It is meant to be read and used by non-technical users using a natural language syntax and a line-oriented design . The tests defined with Gherkin must then be implemented in a general programming language. Then, the steps in a Gherkin program acts as a syntax for method invocation accessible to non-developers. Other examples  edit  Other prominent examples of domain-specific languages include Emacs Lisp Game Description Language OpenGL Shading Language Gradle Advantages and disadvantages  edit  Some of the advantages 2  3  Domain-specific languages allow solutions to be expressed in the idiom and at the level of abstraction of the problem domain. The idea is that domain experts themselves may understand, validate, modify, and often even develop domain-specific language programs. However, this is seldom the case. 9  Domain-specific languages allow validation at the domain level. As long as the language constructs are safe any sentence written with them can be considered safe.  citation needed  Domain-specific languages can help to shift the development of business information systems from traditional software developers to the typically larger group of domain-experts who despite having less technical expertise have a deeper knowledge of the domain. 10  Domain-specific languages are easier to learn, given their limited scope. Some of the disadvantages Cost of learning a new language vs. its limited applicability Cost of designing, implementing, and maintaining a domain-specific language as well as the tools required to develop with it  IDE  Finding, setting, and maintaining proper scope. Difficulty of balancing trade-offs between domain-specificity and general-purpose programming language constructs. Potential loss of processor efficiency compared with hand-coded software. Proliferation of similar non-standard domain-specific languages, for example, a DSL used within one insurance company versus a DSL used within another insurance company. 11  Non-technical domain experts can find it hard to write or modify DSL programs by themselves. 9  Increased difficulty of integrating the DSL with other components of the IT system as compared to integrating with a general-purpose language. Low supply of experts in a particular DSL tends to raise labor costs. Harder to find code examples. Tools for designing domain-specific languages  edit  JetBrains MPS is a tool for designing domain-specific languages. It uses projectional editing which allows overcoming the limits of language parsers and building DSL editors, such as ones with tables and diagrams. It implements language-oriented programming. MPS combines an environment for language definition, a language workbench , and an Integrated Development Environment IDE for such languages. 12  Xtext is an open-source software framework for developing programming languages and domain-specific languages DSLs. Unlike standard parser generators, Xtext generates not only a parser but also a class model for the abstract syntax tree. In addition, it provides a fully featured, customizable Eclipse-based IDE. 13  Racket is a cross-platform language toolchain including compiler, JIT compiler, IDE and command line tools designed to accommodate creating both domain-specific languages and completely new languages. 14  15  See also  edit  Language workbench Architecture description language Domain-specific entertainment language Language for specific purposes Metalinguistic abstraction Programming domain References  edit  This article includes a list of references , but its sources remain unclear because it has insufficient inline citations . Please help to improve this article by introducing more precise citations.  September 2009   Learn how and when to remove this template message   Fowler, Martin Parsons, Rebecca. Domain Specific Languages . Retrieved 6 July 2019 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  a b Marjan Mernik, Jan Heering, and Anthony M. Sloane. When and how to develop domain-specific languages. ACM Computing Surveys , 374316344, 2005. doi  10.11451118890.1118892  a b Diomidis Spinellis. Notable design patterns for domain specific languages . Journal of Systems and Software , 5619199, February 2001. doi  10.1016S0164-12120000089-3  Felleisen, Matthias Findler, Robert Bruce Flatt, Matthew Krishnamurthi, Shriram Barzilay, Eli McCarthy, Jay Tobin-Hochstadt, Sam March 2018. A Programmable Programming Language . Communications of the ACM . 61 3 6271. doi  10.11453127323 . Retrieved 15 May 2019 .  Data definition by The Linux Information Project LINFO . www.linfo.org . Retrieved 2016-01-14 .  Archived copy PDF . Archived from the original PDF on 2004-07-19 . Retrieved 2004-05-20 . CS1 maint archived copy as title  link   Shorre, D.V., META II a syntax-oriented compiler writing language, Proceedings of the 1964 19th ACM National Conference, pp. 41.30141.3011, 1964  C. Stephen Carr, David A. Luther, Sherian Erdmann, The TREE-META Compiler-Compiler System A Meta Compiler System for the Univac 1108 and General Electric 645, University of Utah Technical Report RADC-TR-69-83.  a b Freudenthal, Margus 1 January 2009. Domain Specific Languages in a Customs Information System. IEEE Software  1. doi  10.1109MS.2009.152 .  Aram, Michael Neumann, Gustaf 2015-07-01. Multilayered analysis of co-development of business information systems PDF . Journal of Internet Services and Applications . 6 1. doi  10.1186s13174-015-0030-8 .  Miotto, Eric. On the integration of domain-specific and scientific bodies of knowledge in Model Driven Engineering PDF . Archived from the original PDF on 2011-07-24 . Retrieved 2010-11-22 . Cite uses deprecated parameter dead-url  help   JetBrains MPS Domain-Specific Language Creator .  Xtext .  Tobin-Hochstadt, S. St-Amour, V. Culpepper, R. Flatt, M. Felleisen, M. 2011. Languages as Libraries PDF . Programming Language Design and Implementation .  Flatt, Matthew 2012. Creating Languages in Racket . Communications of the ACM . Retrieved 2012-04-08 . Further reading  edit  Dunlavey, Building Better Applications a Theory of Efficient Software Development International Thomson Publishing ISBN   0-442-01740-5 , 1994. Constance Heitmeyer. Using the SCR Tool-set to Specify Software Requirements . Proceedings, Second IEEE Workshop on Industrial Strength Formal Specification Techniques , Boca Raton, FL, Oct. 19, 1998. Marjan Mernik, Jan Heering, and Anthony M. Sloane. When and how to develop domain-specific languages. ACM Computing Surveys , 374316344, 2005. doi  10.11451118890.1118892 Diomidis Spinellis. Notable design patterns for domain specific languages . Journal of Systems and Software , 5619199, February 2001. doi  10.1016S0164-12120000089-3 Terence Parr. The Definitive ANTLR Reference Building Domain-Specific Languages . ISBN   978-0-9787392-5-6 James Larus . Spending Moores Dividend. ISSN   0001-0782 . Communications of the ACM. Volume 52, Issue 5 May 2009. Werner Schuster June 15, 2007. Whats a Ruby DSL and what isnt . C4Media . Retrieved 2009-09-08 . Martin Fowler. Domain Specific Languages . ISBN   978-0-321-71294-3 Marco Brambilla, Jordi Cabot, Manuel Wimmer, Model Driven Software Engineering in Practice , foreword by Richard Soley  OMG Chairman, Morgan  Claypool, USA, 2012, Synthesis Lectures on Software Engineering 1. 182 pages. ISBN paperback 9781608458820, ISBN   9781608458837 . httpwww.mdse-book.com External links  edit   Minilanguages , The Art of Unix Programming , by Eric S. Raymond Martin Fowler on domain-specific languages and Language Workbenches . Also in a video presentation Domain-Specific Languages An Annotated Bibliography One Day Compilers Building a small domain-specific language using OCaml Usenix Association Conference on Domain-Specific Languages DSL 97 and 2nd Conference on Domain-Specific Languages DSL 99 Internal Domain-Specific Languages The complete guide to external Domain Specific Languages jEQN example of internal Domain-Specific Language for the Modeling and Simulation of Extended Queueing Networks . Articles External DSLs with Eclipse technology Building Domain-Specific Languages over a Language Framework. CiteSeerX   10.1.1.50.4685 . Cite journal requires journal  help  Using Acceleo with GMF   Generating presentations from a MindMap DSL modeler UML vs. Domain-Specific Languages Sagar Sen et al. Meta-model Pruning. CiteSeerX   10.1.1.156.6008 . Cite journal requires journal  help  v t e Types of programming languages Actor-based Array Aspect-oriented Class-based Concatenative Concurrent Dataflow Declarative Domain-specific Dynamic Esoteric Event-driven Extensible Functional Imperative Logic Macro Metaprogramming Multi-paradigm Object-based Object-oriented Pipeline Procedural Prototype-based Reflective Rule-based Scripting Stack based Synchronous Tactile Templating Assembly Compiled Interpreted Machine Low-level High-level Very high-level First generation Second generation Third generation Fourth generation Fifth generation Non-English-based Visual v t e Computer science Note This template roughly follows the 2012 ACM Computing Classification System . Hardware Printed circuit board Peripheral Integrated circuit Very Large Scale Integration Systems on Chip SoCs Energy consumption Green computing Electronic design automation Hardware acceleration Computer systems organization Computer architecture Embedded system Real-time computing Dependability Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domain-specific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Software development process Requirements analysis Software design Software construction Software deployment Software maintenance Programming team Open-source model Theory of computation Model of computation Formal language Automata theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security services Intrusion detection system Hardware security Network security Information security Application security Humancomputer interaction Interaction design Social computing Ubiquitous computing Visualization Accessibility Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multi-task learning Cross-validation Graphics Animation Rendering Image manipulation Graphics processing unit Mixed reality Virtual reality Image compression Solid modeling Applied computing E-commerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Book Category Portal Outline WikiProject Commons Authority control GND  7585264-0 LCCN  sh2007005223 Retrieved from  httpsen.wikipedia.orgwindex.phptitleDomain-specific_language oldid908097306  Categories  Domain-specific programming languages Programming language classification Hidden categories CS1 maint archived copy as title CS1 errors deprecated parameters All articles with unsourced statements Articles with unsourced statements from September 2009 Wikipedia articles needing clarification from March 2016 Articles with unsourced statements from September 2011 Articles lacking in-text citations from September 2009 All articles lacking in-text citations CS1 errors missing periodical Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers