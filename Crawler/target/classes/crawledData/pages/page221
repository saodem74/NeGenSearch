Concurrency computer science From Wikipedia, the free encyclopedia Jump to navigation Jump to search For a more practical discussion, see Concurrent computing . The Dining Philosophers , a classic problem involving concurrency and shared resources In computer science , concurrency is the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome. This allows for parallel execution of the concurrent units, which can significantly improve overall speed of the execution in multi-processor and multi-core systems. In more technical terms, concurrency refers to the decomposability property of a program, algorithm, or problem into order-independent or partially-ordered components or units. 1  A number of mathematical models have been developed for general concurrent computation including Petri nets , process calculi , the parallel random-access machine model, the actor model and the Reo Coordination Language . Contents 1 History 2 Issues 3 Theory 3.1 Models 3.2 Logics 4 Practice 5 See also 6 References 7 Further reading 8 External links History  edit  As Leslie Lamport 2015 notes, While concurrent program execution had been considered for years, the computer science of concurrency began with Edsger Dijkstra s seminal 1965 paper that introduced the mutual exclusion problem. ... The ensuing decades have seen a huge growth of interest in concurrencyparticularly in distributed systems . Looking back at the origins of the field, what stands out is the fundamental role played by Edsger Dijkstra. 2  Issues  edit  Because computations in a concurrent system can interact with each other while being executed, the number of possible execution paths in the system can be extremely large, and the resulting outcome can be indeterminate . Concurrent use of shared resources can be a source of indeterminacy leading to issues such as deadlocks , and resource starvation . 3  Design of concurrent systems often entails finding reliable techniques for coordinating their execution, data exchange, memory allocation , and execution scheduling to minimize response time and maximise throughput . 4  Theory  edit  Concurrency theory has been an active field of research in theoretical computer science . One of the first proposals was Carl Adam Petri s seminal work on Petri nets in the early 1960s. In the years since, a wide variety of formalisms have been developed for modeling and reasoning about concurrency. Models  edit  A number of formalisms for modeling and understanding concurrent systems have been developed, including 5  The parallel random-access machine 6  The actor model Computational bridging models such as the bulk synchronous parallel BSP model Petri nets Process calculi Calculus of communicating systems CCS Communicating sequential processes CSP model -calculus Tuple spaces , e.g., Linda Simple Concurrent Object-Oriented Programming SCOOP Reo Coordination Language Some of these models of concurrency are primarily intended to support reasoning and specification, while others can be used through the entire development cycle, including design, implementation, proof, testing and simulation of concurrent systems. Some of these are based on message passing , while others have different mechanisms for concurrency. The proliferation of different models of concurrency has motivated some researchers to develop ways to unify these different theoretical models. For example, Lee and Sangiovanni-Vincentelli have demonstrated that a so-called tagged-signal model can be used to provide a common framework for defining the denotational semantics of a variety of different models of concurrency, 7  while Nielsen, Sassone, and Winskel have demonstrated that category theory can be used to provide a similar unified understanding of different models. 8  The Concurrency Representation Theorem in the actor model provides a fairly general way to represent concurrent systems that are closed in the sense that they do not receive communications from outside. Other concurrency systems, e.g., process calculi can be modeled in the actor model using a two-phase commit protocol . 9   The mathematical denotation denoted by a closed system S is constructed increasingly better approximations from an initial behavior called  S using a behavior approximating function progression S to construct a denotation meaning  for S as follows 10  Denote S   i progression S i  S  In this way, S can be mathematically characterized in terms of all its possible behaviors. Logics  edit  Various types of temporal logic 11  can be used to help reason about concurrent systems. Some of these logics, such as linear temporal logic and computation tree logic , allow assertions to be made about the sequences of states that a concurrent system can pass through. Others, such as action computational tree logic , HennessyMilner logic , and Lamports temporal logic of actions , build their assertions from sequences of actions changes in state. The principal application of these logics is in writing specifications for concurrent systems. 3  Practice  edit  This section does not cite any sources . Please help improve this section by adding citations to reliable sources . Unsourced material may be challenged and removed .  April 2007   Learn how and when to remove this template message  Concurrent programming encompasses programming languages and algorithms used to implement concurrent systems. Concurrent programming is usually considered to be more general than parallel programming because it can involve arbitrary and dynamic patterns of communication and interaction, whereas parallel systems generally have a predefined and well-structured communications pattern. The base goals of concurrent programming include correctness , performance and robustness . Concurrent systems such as Operating systems and Database management systems are generally designed to operate indefinitely, including automatic recovery from failure, and not terminate unexpectedly see Concurrency control . Some concurrent systems implement a form of transparent concurrency, in which concurrent computational entities may compete for and share a single resource, but the complexities of this competition and sharing are shielded from the programmer. Because they use shared resources, concurrent systems in general require the inclusion of some kind of arbiter somewhere in their implementation often in the underlying hardware, to control access to those resources. The use of arbiters introduces the possibility of indeterminacy in concurrent computation which has major implications for practice including correctness and performance. For example, arbitration introduces unbounded nondeterminism which raises issues with model checking because it causes explosion in the state space and can even cause models to have an infinite number of states. Some concurrent programming models include coprocesses and deterministic concurrency . In these models, threads of control explicitly yield their timeslices, either to the system or to another process. See also  edit  Clientserver network nodes Clojure Cluster nodes Concurrency control Concurrent computing Concurrent object-oriented programming Concurrency pattern Chu space Distributed systemnodes Go programming language Rust programming language Elixir programming language Erlang programming language Gordon Pask OpenMP Parallel computing Partitioned global address space Processes Ptolemy Project International Conference on Concurrency Theory Sheaf mathematics Threads X10 programming language References  edit   Lamport, Leslie July 1978. Time, Clocks, and the Ordering of Events in a Distributed System PDF . Communications of the ACM . 21 7 558565. doi  10.1145359545.359563 . Retrieved 4 February 2016 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Lamport, Leslie . Turing Lecture The Computer Science of Concurrency The Early Years Communications of the ACM, Vol. 58 No. 6, June 2015 . ACM . Retrieved 22 Mar 2017 .  a b Cleaveland, Rance Scott Smolka December 1996. Strategic Directions in Concurrency Research. ACM Computing Surveys . 28 4 607. doi  10.1145242223.242252 .  Campbell, Colin Johnson, Ralph Miller, Ade Toub, Stephen August 2010. Parallel Programming with Microsoft .NET . Microsoft Press. ISBN   978-0-7356-5159-3 .  Filman, Robert Daniel Friedman 1984. Coordinated Computing - Tools and Techniques for Distributed Software . McGraw-Hill. ISBN   978-0-07-022439-1 . Archived from the original on 2007-05-16. Cite uses deprecated parameter deadurl  help   Keller, Jrg Christoph Keler Jesper Trff 2001. Practical PRAM Programming . John Wiley and Sons.  Lee, Edward Alberto Sangiovanni-Vincentelli December 1998. A Framework for Comparing Models of Computation. IEEE Transactions on CAD . 17 12 12171229. doi  10.110943.736561 .  Mogens Nielsen Vladimiro Sassone Glynn Winskel 1993. Relationships Between Models of Concurrency . REX SchoolSymposium .  Frederick Knabe. A Distributed Protocol for Channel-Based Communication with Choice PARLE 1992.  William Clinger June 1981. Foundations of Actor Semantics. Mathematics Doctoral Dissertation. MIT. hdl  1721.16935 . Cite journal requires journal  help   Roscoe, Colin 2001. Modal and Temporal Properties of Processes . Springer. ISBN   978-0-387-98717-0 . Further reading  edit  Lynch, Nancy A. 1996. Distributed Algorithms . Morgan Kaufmann. ISBN   978-1-55860-348-6 . Tanenbaum, Andrew S. Van Steen, Maarten 2002. Distributed Systems Principles and Paradigms . Prentice Hall. ISBN   978-0-13-088893-8 . Kurki-Suonio, Reino 2005. A Practical Theory of Reactive Systems . Springer. ISBN   978-3-540-23342-8 . Garg, Vijay K. 2002. Elements of Distributed Computing . Wiley-IEEE Press. ISBN   978-0-471-03600-5 . Magee, Jeff Kramer, Jeff 2006. Concurrency State Models and Java Programming . Wiley. ISBN   978-0-470-09355-9 . Distefano, S.,  Bruneo, D. 2015. Quantitative assessments of distributed systems Methodologies and techniques 1st ed.. Somerset John Wiley  Sons Inc. ISBN   9781119131144 Bhattacharyya, S. S. 20132014. Handbook of signal processing systems Second22nd 2013 ed.. New York, NY Springer.10.1007978-1-4614-6859-2 ISBN   9781461468592 Wolter, K. 20122014. Resilience assessment and evaluation of computing systems 1. Aufl.1 ed.. LondonBerlin Springer. ISBN   9783642290329 External links  edit  Concurrent Systems at The WWW Virtual Library Concurrency patterns presentation given at scaleconf Retrieved from  httpsen.wikipedia.orgwindex.phptitleConcurrency_computer_science oldid911029889  Categories  Concurrency computer science Edsger W. Dijkstra Hidden categories CS1 errors deprecated parameters CS1 errors missing periodical Articles needing additional references from April 2007 All articles needing additional references