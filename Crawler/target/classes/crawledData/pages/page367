Unified Process From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article includes a list of references , related reading or external links , but its sources remain unclear because it lacks inline citations . Please help to improve this article by introducing more precise citations.  November 2017   Learn how and when to remove this template message  Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e The Unified Software Development Process or Unified Process is an iterative and incremental software development process framework. The best-known and extensively documented refinement of the Unified Process is the Rational Unified Process RUP. Other examples are OpenUP and Agile Unified Process . Profile of a typical project showing the relative sizes of the four phases of the Unified Process. Contents 1 Overview 2 Unified Process characteristics 2.1 Iterative and incremental 2.2 Architecture-centric 2.3 Risk-focused 3 Project lifecycle Phases of Unified Process 3.1 Inception phase 3.2 Elaboration phase 3.3 Construction phase 3.4 Transition phase 4 Refinements and variations 5 References Overview  edit  The Unified Process is not simply a process, but rather an extensible framework which should be customized for specific organizations or projects. The Rational Unified Process is, similarly, a customizable framework. As a result, it is often impossible to say whether a refinement of the process was derived from UP or from RUP, and so the names tend to be used interchangeably. The name Unified Process as opposed to Rational Unified Process is generally used to describe the generic process, including those elements which are common to most refinements. The Unified Process name is also used to avoid potential issues of trademark infringement since Rational Unified Process and RUP are trademarks of IBM . The first book to describe the process was titled The Unified Software Development Process  .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em ISBN   0-201-57169-2  and published in 1999 by Ivar Jacobson , Grady Booch and James Rumbaugh . Since then various authors unaffiliated with Rational Software have published books and articles using the name Unified Process , whereas authors affiliated with Rational Software have favored the name Rational Unified Process . In 2012 the Disciplined Agile Delivery framework was released, a hybrid framework that adopts and extends strategies from Unified Process, Scrum, XP, and other methods. Unified Process characteristics  edit  Iterative and incremental  edit  Diagram illustrating how the relative emphasis of different disciplines changes over the course of the project The Unified Process is an iterative and incremental development process. The Elaboration, Construction and Transition phases are divided into a series of timeboxed iterations. The Inception phase may also be divided into iterations for a large project. Each iteration results in an increment , which is a release of the system that contains added or improved functionality compared with the previous release. Although most iterations will include work in most of the process disciplines  e.g. Requirements, Design, Implementation, Testing the relative effort and emphasis will change over the course of the project. Architecture-centric  edit  The Unified Process insists that architecture sits at the heart of the project teams efforts to shape the system. Since no single model is sufficient to cover all aspects of a system, the Unified Process supports multiple architectural models and views. One of the most important deliverables of the process is the executable architecture baseline which is created during the Elaboration phase. This partial implementation of the system serves to validate the architecture and act as a foundation for remaining development. Risk-focused  edit  The Unified Process requires the project team to focus on addressing the most critical risks early in the project life cycle. The deliverables of each iteration, especially in the Elaboration phase, must be selected in order to ensure that the greatest risks are addressed first. Project lifecycle Phases of Unified Process  edit  The Unified Process divides the project into four phases Inception Elaboration milestone Construction release Transition final production release Inception phase  edit  Inception is the smallest phase in the project, and ideally it should be quite short. If the Inception Phase is long then it may be an indication of excessive up-front specification, which is contrary to the spirit of the Unified Process. The following are typical goals for the Inception phase Establish Prepare a preliminary project schedule and cost estimate Feasibility Buy or develop it The Lifecycle Objective Milestone marks the end of the Inception phase. Develop an approximate vision of the system, make the business case, define the scope, and produce rough estimate for cost and schedule. Elaboration phase  edit  During the Elaboration phase, the project team is expected to capture a healthy majority of the system requirements. However, the primary goals of Elaboration are to address known risk factors and to establish and validate the system architecture. Common processes undertaken in this phase include the creation of use case diagrams , conceptual diagrams  class diagrams with only basic notation and package diagrams architectural diagrams. The architecture is validated primarily through the implementation of an Executable Architecture Baseline. This is a partial implementation of the system which includes the core most architecturally significant components. It is built in a series of small time-boxed iterations. By the end of the Elaboration phase, the system architecture must have stabilized and the executable architecture baseline must demonstrate that the architecture will support the key system functionality and exhibit the right behavior in terms of performance, scalability, and cost. The final Elaboration phase deliverable is a plan including cost and schedule estimates for the Construction phase. At this point the plan should be accurate and credible since it should be based on the Elaboration phase experience and since significant risk factors should have been addressed during the Elaboration phase. Construction phase  edit  Construction is the largest phase of the project. In this phase, the remainder of the system is built on the foundation laid in Elaboration. System features are implemented in a series of short, time-boxed iterations. Each iteration results in an executable release of the software. It is customary to write full-text use cases during the construction phase and each one becom es the start of a new iteration. Common Unified Modeling Language UML diagrams used during this phase include activity diagrams , sequence diagrams , collaboration diagrams , State Transition diagrams and interaction overview diagrams . Iterative implementation for the lower risks and easier elements are done. The final Construction phase deliverable is software ready to be deployed in the Transition phase. Transition phase  edit  The final project phase is Transition. In this phase the system is deployed to the target users. Feedback received from an initial release or initial releases may result in further refinements to be incorporated over the course of several Transition phase iterations. The Transition phase also includes system conversions and user training. Refinements and variations  edit  Refinements of the Unified Process vary from each other in how they categorize the project disciplines or workflows . The Rational Unified Process defines nine disciplines Business Modeling , Requirements , Analysis and Design , Implementation , Test , Deployment , Configuration and Change Management , Project Management , and Environment . The Enterprise Unified Process extends RUP through the addition of eight enterprise disciplines. Agile refinements of UP such as OpenUPBasic and the Agile Unified Process simplify RUP by reducing the number of disciplines. Refinements also vary in the emphasis placed on different project artifacts . Agile refinements streamline RUP by simplifying workflows and reducing the number of expected artifacts. Refinements also vary in their specification of what happens after the Transition phase. In the Rational Unified Process the Transition phase is typically followed by a new Inception phase. In the Enterprise Unified Process the Transition phase is followed by a Production phase. The number of Unified Process refinements and variations are countless. Organizations utilizing the Unified Process invariably incorporate their own modifications and extensions. The following is a list of some of the better known refinements and variations. Agile Unified Process AUP, a lightweight variation developed by Scott W. Ambler Basic Unified Process BUP, a lightweight variation developed by IBM and a precursor to OpenUP Enterprise Unified Process EUP, an extension of the Rational Unified Process Essential Unified Process EssUP, a lightweight variation developed by Ivar Jacobson Open Unified Process OpenUP, the Eclipse Process Framework software development process Rational Unified Process RUP, the IBM  Rational Software development process Oracle Unified Method OUM, the Oracle development and implementation process Rational Unified Process-System Engineering RUP-SE, a version of RUP tailored by Rational Software for System Engineering References  edit  Kroll, Per Kruchten, Philippe 2003. The Rational Unified Process Made Easy A Practitioners Guide to the RUP . ISBN   0-321-16609-4 . Kruchten, Philippe 2004. The Rational Unified Process An Introduction 3rd Ed.. ISBN   0-321-19770-4 . Ambler, Scott 2002. Agile Modeling Effective Practices for EXtreme Programming and the Unified Process . J. Wiley. ISBN   0-471-20282-7 . Scott, Kendall 2002. The Unified Process Explained . ISBN   0-201-74204-7 . Bergstrom, Stefan Raberg, Lotta 2004. Adopting the Rational Unified Process Success with the RUP . ISBN   0-321-20294-5 . Ambler, Scott  Constantine, Larry 2002. The Unified Process Transition and Production Phases . CMP Books. ISBN   1-57820-092-X . Larman, Craig 2004. Agile and Iterative Development A Managers Guide . ISBN   0-13-111155-8 . v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleUnified_Process oldid908579868  Categories  Software development process Hidden categories Articles lacking in-text citations from November 2017 All articles lacking in-text citations