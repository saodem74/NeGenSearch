Man or boy test From Wikipedia, the free encyclopedia Jump to navigation Jump to search The man or boy test was proposed by computer scientist Donald Knuth as a means of evaluating implementations of the ALGOL 60 programming language. The aim of the test was to distinguish compilers that correctly implemented  recursion and non-local references  from those that did not. .mw-parser-output .templatequoteoverflowhiddenmargin1em 0padding0 40px.mw-parser-output .templatequote .templatequoteciteline-height1.5emtext-alignleftpadding-left1.6emmargin-top0 There are quite a few ALGOL60 translators in existence which have been designed to handle recursion and non-local references properly, and I thought perhaps a little test-program may be of value. Hence I have written the following simple routine, which may separate the man-compilers from the boy-compilers.  Donald Knuth 1  Contents 1 Knuths example 2 Explanation 3 See also 4 References 5 External links Knuths example  edit  In ALGOL 60  begin real procedure A  k , x1 , x2 , x3 , x4 , x5   value k  integer k  real x1 , x2 , x3 , x4 , x5  begin real procedure B  begin k  k - 1  B  A  A  k , B , x1 , x2 , x3 , x4  end  if k  0 then A  x4  x5 else B end outreal  1 , A  10 , 1 , - 1 , - 1 , 1 , 0  end This creates a tree of B call frames that refer to each other and to the containing A call frames, each of which has its own copy of k that changes every time the associated B is called. Trying to work it through on paper is probably fruitless, but for k 10, the correct answer is 67, despite the fact that in the original paper Knuth conjectured it to be 121. The survey paper by Charles H. Lindsey mentioned in the references contains a table for different starting values. Even modern machines quickly run out of stack space for larger values of k, which are tabulated below  OEIS    A132343 . 2  k A  k , 1 ,  1 ,  1 , 1 , 0  displaystyle Ak,1,-1,-1,1,0 0 1 1 0 2 2 3 0 4 1 5 0 6 1 7 1 8 10 9 30 10 67 11 138 12 291 13 642 14 1,446 15 3,250 16 7,244 17 16,065 18 35,601 19 78,985 20 175,416 21 389,695 22 865,609 23 1,922,362 24 4,268,854 25 9,479,595 26 21,051,458 Explanation  edit  There are three Algol features used in this program that can be difficult to implement properly in a compiler Nested function definitions  Since B is being defined in the local context of A , the body of B has access to symbols that are local to A  most notably k which it modifies, but also x1 , x2 , x3 , x4 , and x5 . This is straightforward in the Algol descendant Pascal , but not possible in the other major Algol descendant C without manually simulating the mechanism by using Cs address-of operator, passing around pointers to local variables between the functions. Function references  The B in the recursive call Ak,B,x1,x2,x3,x4 is not a call to B , but a reference to B , which will be called only when k is greater than zero. This is straightforward in standard Pascal  ISO 7185 , and also in C. Some variants of Pascal e.g. older versions of Turbo Pascal  do not support procedure references, but when the set of functions that may be referenced is known beforehand in this program it is only B , this can be worked around. Constantfunction dualism  The x1 through x5 parameters of A may be numeric constants or references to the function B  the x4x5 expression must be prepared to handle both cases as if the formal parameters x4 and x5 had been replaced by the corresponding actual parameter  call by name . This is probably more of a problem in statically typed languages than in dynamically typed languages, but the standard workaround is to reinterpret the constants 1, 0, and 1 in the main call to A as functions without arguments that return these values. These things are however not what the test is about theyre merely prerequisites for the test to at all be meaningful. What the test is about is whether the different references to B resolve to the correct instance of B  one that has access to the same A -local symbols as the B that created the reference. A boy compiler might for example instead compile the program so that B always accesses the topmost A call frame. See also  edit  Funarg problem Jensens Device References  edit   Donald Knuth July 1964. Man or boy . Retrieved Dec 25, 2009 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  See Performance and Memory on the Rosetta Code Man or Boy Page External links  edit  The Man or Boy Test , ALGOL Bulletin 17 , p. 7 available at chilton-computing.org  Man or boy test examples in many programming languages v t e Donald Knuth Publications The Art of Computer Programming  The Complexity of Songs  Computers and Typesetting Concrete Mathematics Surreal Numbers Things a Computer Scientist Rarely Talks About Selected papers series Software TeX Metafont MIXAL  MIX MMIX GNU MDK  Fonts AMS Euler Computer Modern Concrete Roman Literate programming WEB CWEB Algorithms Knuths Algorithm X KnuthBendix completion algorithm KnuthMorrisPratt algorithm Knuth shuffle RobinsonSchenstedKnuth correspondence Trabb PardoKnuth algorithm Generalization of Dijkstras algorithm Knuths Simpath algorithm Other Dancing Links Knuth reward check Knuth Prize Man or boy test Quater-imaginary base -yllion Potrzebie system of weights and measures Retrieved from  httpsen.wikipedia.orgwindex.phptitleMan_or_boy_test oldid885163872  Categories  Programming language design Compiler construction Donald Knuth Programming language implementation Programming language folklore Test items in computer languages Computer-related introductions in 1964 Hidden categories Articles with example ALGOL 60 code