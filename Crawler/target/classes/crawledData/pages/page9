Extreme programming From Wikipedia, the free encyclopedia Jump to navigation Jump to search Software development methodology Planning and feedback loops in extreme programming Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Extreme programming  XP  is a software development methodology which is intended to improve software quality and responsiveness to changing customer requirements. As a type of agile software development , 1  2  3  it advocates frequent releases in short development cycles, which is intended to improve productivity and introduce checkpoints at which new customer requirements can be adopted. Other elements of extreme programming include programming in pairs or doing extensive code review , unit testing of all code, avoiding programming of features until they are actually needed , a flat management structure, code simplicity and clarity, expecting changes in the customers requirements as time passes and the problem is better understood, and frequent communication with the customer and among programmers. 2  3  4  The methodology takes its name from the idea that the beneficial elements of traditional software engineering practices are taken to extreme levels. As an example, code reviews are considered a beneficial practice taken to the extreme, code can be reviewed continuously , i.e. the practice of pair programming . .mw-parser-output .toclimit-2 .toclevel-1 ul,.mw-parser-output .toclimit-3 .toclevel-2 ul,.mw-parser-output .toclimit-4 .toclevel-3 ul,.mw-parser-output .toclimit-5 .toclevel-4 ul,.mw-parser-output .toclimit-6 .toclevel-5 ul,.mw-parser-output .toclimit-7 .toclevel-6 uldisplaynone Contents 1 History 1.1 Origins 1.2 Current state 2 Concept 2.1 Goals 2.2 Activities 2.2.1 Coding 2.2.2 Testing 2.2.3 Listening 2.2.4 Designing 2.3 Values 2.3.1 Communication 2.3.2 Simplicity 2.3.3 Feedback 2.3.4 Courage 2.3.5 Respect 2.4 Rules 2.5 Principles 2.5.1 Feedback 2.5.2 Assuming simplicity 2.5.3 Embracing change 3 Practices 3.1 Fine-scale feedback 3.2 Continuous process 3.3 Shared understanding 3.4 Programmer welfare 4 Controversial aspects 4.1 Scalability 4.2 Severability and responses 5 Criticism 6 See also 7 References 8 Further reading 9 External links History  edit  Kent Beck developed extreme programming during his work on the Chrysler Comprehensive Compensation System C3 payroll project . 5  Beck became the C3 project leader in March 1996. He began to refine the development methodology used in the project and wrote a book on the methodology  Extreme Programming Explained , published in October 1999. 5  Chrysler cancelled the C3 project in February 2000, after seven years, when Daimler-Benz acquired the company. 6  Many extreme-programming practices have been around for some time the methodology takes  best practices  to extreme levels. For example, the practice of test-first development, planning and writing tests before each micro-increment was used as early as NASAs Project Mercury , in the early 1960s. 7  To shorten the total development time, some formal test documents such as for acceptance testing  have been developed in parallel with or shortly before the software being ready for testing. A NASA independent test group can write the test procedures, based on formal requirements and logical limits, before programmers write the software and integrate it with the hardware. XP takes this concept to the extreme level, writing automated tests sometimes inside software modu les which validate the operation of even small sections of software coding, rather than only testing the larger features. Origins  edit  Two major influences shaped software development in the 1990s Internally, object-oriented programming replaced procedural programming as the programming paradigm favored by some developers. Externally, the rise of the Internet and the dot-com boom emphasized speed-to-market and company growth as competitive business factors. Rapidly changing requirements demanded shorter product life-cycles , and often clashed with traditional methods of software development. The Chrysler Comprehensive Compensation System C3 started in order to determine the best way to use object technologies, using the payroll systems at Chrysler as the object of research, with Smalltalk as the language and GemStone as the data access layer . Chrysler brought in Kent Beck , 5  a prominent Smalltalk practitioner, to do performance tuning on the system, but his role expanded as he noted several problems with the development process. He took this opportunity to propose and implement some changes in development practices - based on his work with his frequent collaborator, Ward Cunningham . Beck describes the early conception of the methods 8  .mw-parser-output .templatequoteoverflowhiddenmargin1em 0padding0 40px.mw-parser-output .templatequote .templatequoteciteline-height1.5emtext-alignleftpadding-left1.6emmargin-top0 The first time I was asked to lead a team, I asked them to do a little bit of the things I thought were sensible, like testing and reviews. The second time there was a lot more on the line. I thought, Damn the torpedoes, at least this will make a good article, and asked the team to crank up all the knobs to 10 on the things I thought were essential and leave out everything else. Beck invited Ron Jeffries to the project to help develop and refine these methods. Jeffries thereafter acted as a coach to instill the practices as habits in the C3 team. Information about the principles and practices behind XP disseminated to the wider world through discussions on the original wiki , Cunninghams WikiWikiWeb . Various contributors discussed and expanded upon the ideas, and some spin-off methodologies resulted see agile software development . Also, XP concepts have been explained  by whom  , for several years, using a hypertext system map on the XP website at httpwww.extremeprogramming.org circa 1999. Beck edited a series of books on XP, beginning with his own Extreme Programming Explained 1999, .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em ISBN   0-201-61641-6 , spreading his ideas to a much larger audience. Authors in the series went through various aspects attending XP and its practices. The series included a book critical of the practices. Current state  edit  XP generated significant interest among software communities in the late 1990s and early 2000s, seeing adoption in a number of environments radically different from its origins. The high discipline required by the original practices often went by the wayside, causing some of these practices, such as those thought too rigid, to be deprecated or reduced, or even left unfinished, on individual sites. For example, the practice of end-of-day integration tests for a particular project could be changed to an end-of-week schedule, or simply reduced to testing on mutually agreed dates. Such a more relaxed schedule could avoid people feeling rushed to generate artificial stubs just to pass the end-of-day testing. A less-rigid schedule allows, instead, the development of complex features over a period of several days. Meanwhile, other agile-development practices have not stood still, and as of 2019 update  XP continues to evolve, assimilating more lessons from experiences in the field, to use other practices. In the second edition of Extreme Programming Explained November 2004, five years after the first edition, Beck added more values and practices and differentiated between primary and corollary practices. The Theory of Sustainable Software Development explains why extreme programming teams can thrive in spite of team disruptions. 9   non-primary source needed  Concept  edit  Goals  edit  Extreme Programming Explained describes extreme programming as a software-development discipline that organizes people to produce higher-quality software more productively. XP attempts to reduce the cost of changes in requirements by having multiple short development cycles, rather than a long one. In this doctrine, changes are a natural, inescapable and desirable aspect of software-development projects, and should be planned for, instead of attempting to define a stable set of requirements. Extreme programming also introduces a number of basic values, principles and practices on top of the agile programming framework. Activities  edit  XP describes four basic activities that are performed within the software development process coding, testing, listening, and designing. Each of those activities is described below. Coding  edit  The advocates of XP argue that the only truly important product of the system development process is code  software instructions that a computer can interpret. Without code, there is no working product. Coding can be used to figure out the most suitable solution. Coding can also help to communicate thoughts about programming problems. A programmer dealing with a complex programming problem, or finding it hard to explain the solution to fellow programmers, might code it in a simplified manner and use the code to demonstrate what he or she means. Code, say the proponents of this position, is always clear and concise and cannot be interpreted in more than one way. Other programmers can give feedback on this code by also coding their thoughts. Testing  edit  Main article Test-driven development Testing is central to extreme programming. 10  Extreme programmings approach is that if a little testing can eliminate a few flaws, a lot of testing can eliminate many more flaws. Unit tests determine whether a given feature works as intended. Programmers write as many automated tests as they can think of that might break the code if all tests run successfully, then the coding is complete. Every piece of code that is written is tested before moving on to the next feature. Acceptance tests verify that the requirements as understood by the programmers satisfy the customers actual requirements. System-wide integration testing was encouraged, initially, as a daily end-of-day activity, for early detection of incompatible interfaces, to reconnect before the separate sections diverged widely from coherent functionality. However, system-wide integration testing has been reduced, to weekly, or less often, depending on the stability of the overall interfaces in the system.  citation needed  Listening  edit  Programmers must listen to what the customers need the system to do, what  business logic  is needed. They must understand these needs well enough to give the customer feedback about the technical aspects of how the problem might be solved, or cannot be solved. Communication between the customer and programmer is further addressed in the planning game . Designing  edit  From the point of view of simplicity, of course one could say that system development doesnt need more than coding, testing and listening. If those activities are performed well, the result should always be a system that works. In practice, this will not work. One can come a long way without designing but at a given time one will get stuck. The system becomes too complex and t he dependencies within the system cease to be clear. One can avoid this by creating a design structure that organizes the logic in the system. Good design will avoid lots of dependencies within a system this means that changing one part of the system will not affect other parts of the system.  citation needed  Values  edit  Extreme programming initially recognized four values in 1999 communication, simplicity, feedback, and courage. A new value, respect, was added in the second edition of Extreme Programming Explained . Those five values are described below. Communication  edit  Building software systems requires communicating system requirements to the developers of the system. In formal software development methodologies, this task is accomplished through documentation. Extreme programming techniques can be viewed as methods for rapidly building and disseminating institutional knowledge among members of a development team. The goal is to give all dev elopers a shared view of the system which matches the view held by the users of the system. To this end, extreme programming favors simple designs, common metaphors, collaboration of users and programmers, frequent verbal communication, and feedback. Simplicity  edit  Extreme programming encourages starting with the simplest solution. Extra functionality can then be added later. The difference between this approach and more conventional system development methods is the focus on designing and coding for the needs of today instead of those of tomorrow, next week, or next month. This is sometimes summed up as the  You arent gonna need it  YAGNI approach. 11  Proponents of XP acknowledge the disadvantage that this can sometimes entail more effort tomorrow to change the system their claim is that this is more than compensated for by the advantage of not investing in possible future requirements that might change before they become relevant. Coding and designing for uncertain future requirements implies the risk of spending resource s on something that might not be needed, while perhaps delaying crucial features. Related to the communication value, simplicity in design and coding should improve the quality of communication. A simple design with very simple code could be easily understood by most programmers in the team. Feedback  edit  Within extreme programming, feedback relates to different dimensions of the system development Feedback from the system by writing unit tests , 5  or running periodic integration tests, the programmers have direct feedback from the state of the system after implementing changes. Feedback from the customer The functional tests aka acceptance tests  are written by the customer and the testers. They will get concrete feedback about the current state of their system. This review is planned once in every two or three weeks so the customer can easily steer the development. Feedback from the team When customers come up with new requirements in the planning game the team directly gives an estimation of the time that it will take to implement. Feedback is closely related to communication and simplicity. Flaws in the system are easily communicated by writing a unit test that proves a certain piece of code will break. The direct feedback from the system tells programmers to recode this part. A customer is able to test the system periodically according to the functional requirements, known as user stories . 5  To quote Kent Beck , Optimism is an occupational hazard of programming. Feedback is the treatment. 12  Courage  edit  Several practices embody courage. One is the commandment to always design and code for today and not for tomorrow. This is an effort to avoid getting bogged down in design and requiring a lot of effort to implement anything else. Courage enables developers to feel comfortable with refactoring their code when necessary. 5  This means reviewing the existing system and modifying it so that future changes can be implemented more easily. Another example of courage is knowing when to throw code away courage to remove source code that is obsolete, no matter how much effort was used to create that source code. Also, courage means persistence a programmer might be stuck on a complex problem for an ent ire day, then solve the problem quickly the next day, but only if they are persistent. Respect  edit  The respect value includes respect for others as well as self-respect. Programmers should never commit changes that break compilation, that make existing unit-tests fail, or that otherwise delay the work of their peers. Members respect their own work by always striving for high quality and seeking for the best design for the solution at hand through refactoring. Adopting the four earlier values leads to respect gained from others in the team. Nobody on the team should feel unappreciated or ignored. This ensures a high level of motivation and encourages loyalty toward the team and toward the goal of the project. This value is dependent upon the other values, and is oriented toward teamwork. Rules  edit  The first version of rules for XP was published in 1999 by Don Wells 13  at the XP website. 29 rules are given in the categories of planning, managing, designing, coding, and testing. Planning, managing and designing are called out explicitly to counter claims that XP doesnt support those activities. Another version of XP rules was proposed by Ken Auer 14  in XPAgile Universe 2003. He felt XP was defined by its rules, not its practices which are subject to more variation and ambiguity. He defined two categories Rules of Engagement which dictate the environment in which software development can take place effectively, and Rules of Play which define the minute-by-minute activities and rules within the framework of the Rule s of Engagement. Here are some of the rules incomplete Coding The customer is always available Code the unit test first Only one pair integrates code at a time Leave optimization until last No overtime Testing All code must have unit tests All code must pass all unit tests before it can be released. When a bug is found, tests are created before the bug is addressed a bug is not an error in logic it is a test that was not written Acceptance tests are run often and the results are published Principles  edit  The principles that form the basis of XP are based on the values just described and are intended to foster decisions in a system development project. The principles are intended to be more concrete than the values and more easily translated to guidance in a practical situation. Feedback  edit  Extreme programming sees feedback as most useful if it is done frequently and promptly. It stresses that minimal delay between an action and its feedback is critical to learning and making changes. Unlike traditional system development methods, contact with the customer occurs in more frequent iterations. The customer has clear insight into the system that is being developed, a nd can give feedback and steer the development as needed. With frequent feedback from the customer, a mistaken design decision made by the developer will be noticed and corrected quickly, before the developer spends much time implementing it. Unit tests contribute to the rapid feedback principle. When writing code, running the unit test provides direct feedback as to how the system reacts to the changes made. This includes running not only the unit tests that test the developers code, but running in addition all unit tests against all the software, using an automated process that can be initiated by a single comman d. That way, if the developers changes cause a failure in some other portion of the system that the developer knows little or nothing about, the automated all-unit-test suite will reveal the failure immediately, alerting the developer of the incompatibility of their change with other parts of the system, and the necessity of removing or modifying their change. Under traditiona l development practices, the absence of an automated, comprehensive unit-test suite meant that such a code change, assumed harmless by the developer, would have been left in place, appearing only during integration testing  or worse, only in production and determining which code change caused the problem, among all the changes made by all the developers during the weeks or ev en months previous to integration testing, was a formidable task. Assuming simplicity  edit  This is about treating every problem as if its solution were extremely simple. Traditional system development methods say to plan for the future and to code for reusability. Extreme programming rejects these ideas. The advocates of extreme programming say that making big changes all at once does not work. Extreme programming applies incremental changes for example, a system might have small releases every three weeks. When many little steps are made, the customer has more control over the development process and the system that is being developed. Embracing change  edit  The principle of embracing change is about not working against changes but embracing them. For instance, if at one of the iterative meetings it appears that the customers requirements have changed dramatically, programmers are to embrace this and plan the new requirements for the next iteration. Practices  edit  Further information Extreme programming practices Extreme programming has been described as having 12 practices, grouped into four areas Fine-scale feedback  edit  Pair programming 5  Planning game Test-driven development Whole team Continuous process  edit  Continuous integration Refactoring or design improvement 5  Small releases Shared understanding  edit  Coding standards Collective code ownership 5  Simple design 5  System metaphor Programmer welfare  edit  Sustainable pace Controversial aspects  edit  The practices in XP have been heavily debated. 5  Proponents of extreme programming claim that by having the on-site customer 5  request changes informally, the process becomes flexible, and saves the cost of formal overhead. Critics of XP claim this can lead to costly rework and project scope creep beyond what was previously agreed or funded. Change-control boards are a sign that there are potential conflicts in project objectives and constraints between multiple users. XPs expedited methods are somewhat dependent on programmers being able to assume a unified client viewpoint so the programmer can concentrate on coding, rather than documentation of compromise objectives and constraints. 15  This also applies when multiple programming organizations are involved, particularly organizations which compete for shares of projects.  citation needed  Other potentially controversial aspects of extreme programming include Requirements are expressed as automated acceptance tests rather than specification documents. Requirements are defined incrementally, rather than trying to get them all in advance. Software developers are usually required to work in pairs. There is no Big Design Up Front . Most of the design activity takes place on the fly and incrementally, starting with the simplest thing that could possibly work and adding complexity only when its required by failing tests. Critics compare this to  debugging a system into appearance and fear this will result in more re-design effort than only re-designing when requirements change. A customer representative is attached to the project. This role can become a single-point-of-failure for the project, and some people have found it to be a source of stress. Also, there is the danger of micro-management by a non-technical representative trying to dictate the use of technical software features and architecture. Dependence upon all other aspects of XP XP is like a ring of poisonous snakes, daisy-chained together. All it takes is for one of them to wriggle loose, and youve got a very angry, poisonous snake heading your way. 16  Critics have noted several potential drawbacks, 5  including problems with unstable requirements, no documented compromises of user conflicts, and a lack of an overall design specification or document. Scalability  edit  ThoughtWorks has claimed reasonable success on distributed XP projects with up to sixty people.  citation needed  In 2004, industrial extreme programming IXP 17  was introduced as an evolution of XP. It is intended to bring the ability to work in large and distributed teams. It now has 23 practices and flexible values. Severability and responses  edit  In 2003, Matt Stephens and Doug Rosenberg published Extreme Programming Refactored The Case Against XP , which questioned the value of the XP process and suggested ways in which it could be improved. 6  This triggered a lengthy debate in articles, Internet newsgroups, and web-site chat areas. The core argument of the book is that XPs practices are interdependent but that few practical organizations are willingable to adopt all the practices therefore the entire process fails. The book also makes other criticisms, and it draws a likeness of XPs collective ownership model to socialism in a negative manner. Certain aspects of XP have changed since the publication of Extreme Programming Refactored  in particular, XP now accommodates modifications to the practices as long as the required objectives are still met. XP also uses increasingly generic terms for processes. Some argue that these changes invalidate previous criticisms others claim that this is simply watering the process down. Other authors have tried to reconcile XP with the older methodologies in order to form a unified methodology. Some of these XP sought to replace, such as the waterfall methodology  example Project Lifecycles Waterfall, Rapid Application Development RAD, and All That. JPMorgan Chase  Co. tried combining XP with the computer programming methods of capability maturity model integration CMMI, and Six Sigma . They found that the three systems reinforced each other well, leading to better development, and did not mutually contradict. 18  Criticism  edit  Extreme programmings initial buzz and controversial tenets, such as pair programming and continuous design , have attracted particular criticisms, such as the ones coming from McBreen 19  and Boehm and Turner, 20  Matt Stephens and Doug Rosenberg. 21  Many of the criticisms, however, are believed by Agile practitioners to be misunderstandings of agile development. 22  In particular, extreme programming has been reviewed and critiqued by Matt Stephenss and Doug Rosenbergs Extreme Programming Refactored . 6  Criticisms include a methodology is only as effective as the people involved, Agile does not solve this  citation needed  often used as a means to bleed money from customers through lack of defining a deliverable product  citation needed  lack of structure and necessary documentation  citation needed  only works with senior-level developers  citation needed  incorporates insufficient software design  citation needed  requires meetings at frequent intervals at enormous expense to customers  citation needed  requires too much cultural change to adopt  citation needed  can lead to more difficult contractual negotiations  citation needed  can be very inefficient if the requirements for one area of code change through various iterations, the same programming may need to be done several times over. Whereas if a plan were there to be followed, a single area of code is expected to be written once.  citation needed  impossible to develop realistic estimates of work effort needed to provide a quote, because at the beginning of the project no one knows the entire scoperequirements  citation needed  can increase the risk of scope creep due to the lack of detailed requirements documentation  citation needed  Agile is feature-driven non-functional quality attributes are hard to represent as user stories .  citation needed  See also  edit  Agile software development Continuous obsolescence EXtreme Manufacturing Extreme project management Extreme programming practices Kaizen List of software development philosophies Pair programming Scrum development Software engineering Software craftsmanship Stand-up meeting Timeboxing References  edit   Human Centred Technology Workshop 2005, 2005, PDF, Informatics-UK-report-cdrp585  permanent dead link   a b UPenn-Lectures-design-patterns Design Patterns and Refactoring, University of Pennsylvania, 2003 .  a b USFCA-edu-601-lecture Extreme Programming .  Manifesto for Agile Software Development . Agilemanifesto.org. 2001 . Retrieved March 26, 2019 .  a b c d e f g h i j k l m Computerworld-appdev-92 Extreme Programming, Computerworld online, December 2001 .  a b c Rosenberg, Doug Stephens, Matt 2003. Extreme Programming Refactored The Case Against XP . Apress. ISBN   978-1-59059-096-6 .  Larman 2003 .  Interview with Kent Beck and Martin Fowler . informit.com . March 23, 2001.  Sedano, Todd Ralph, Paul Praire, Ccile 2016. Proceedings of the 10th ACMIEEE International Symposium on Empirical Software Engineering and Measurement - ESEM 16 . pp.  110. doi  10.11452961111.2962590 . ISBN   9781450344272 .  Lisa Crispin Tip House 2003. Testing Extreme Programming . ISBN   9780321113559 .  Everyones a Programmer by Clair Tristram. Technology Review , November 2003. p. 39.  Beck, K. 1999. Extreme Programming Explained Embrace Change . Addison-Wesley. ISBN   978-0-321-27865-4 .  Extreme Programming Rules . extremeprogramming.org .  Ken Auer Archived September 20, 2008, at the Wayback Machine  John Carroll David Morris July 29, 2015. Agile Project Management in easy steps, 2nd edition . In Easy Steps. p.  162. ISBN   978-1-84078-703-0 .  Extreme Programming explained What we really think of XP . softwarereality.com .  Cutter Consortium. Industrial XP Making XP Work in Large Organizations - Cutter Consortium . cutter.com .  Extreme Programming XP Six Sigma CMMI .  McBreen, P. 2003. Questioning Extreme Programming . Boston, MA Addison-Wesley. ISBN   978-0-201-84457-3 .  Boehm, B.  R. Turner 2004. Balancing Agility and Discipline A Guide for the Perplexed . Boston, MA Addison-Wesley. ISBN   978-0-321-18612-6 .  Stephens, Matt  Doug Rosenberg 2004. The irony of extreme programming . , MA Dr Dobbs journal.  sdmagazine Archived March 16, 2006, at the Wayback Machine Further reading  edit  Ken Auer and Roy Miller. Extreme Programming Applied Playing To Win , AddisonWesley. Ken Auer Ron Jeffries  Jeff Canna Glen B. Alleman Lisa Crispin Janet Gregory 2002. Are Testers eXtinct How Can Testers Contribute to XP Teams. Springer-Verlag. doi  10.10073-540-45672-4_50 . Cite journal requires journal  help  Kent Beck  Extreme Programming Explained Embrace Change , AddisonWesley. Kent Beck and Martin Fowler  Planning Extreme Programming , AddisonWesley. Kent Beck and Cynthia Andres. Extreme Programming Explained Embrace Change, Second Edition , AddisonWesley. Alistair Cockburn  Agile Software Development , AddisonWesley. Martin Fowler  Refactoring Improving the Design of Existing Code , AddisonWesley. Harvey Herela 2005. Case Study The Chrysler Comprehensive Compensation System . Galen Lab, U.C. Irvine. Jim Highsmith . Agile Software Development Ecosystems , AddisonWesley. Ron Jeffries , Ann Anderson and Chet Hendrickson 2000, Extreme Programming Installed , AddisonWesley. Craig Larman  V. Basili 2003. Iterative and Incremental Development A Brief History, Computer IEEE Computer Society 36 6 4756. Matt Stephens and Doug Rosenberg 2003. Extreme Programming Refactored The Case Against XP , Apress. Waldner, JB. 2008. Nanocomputers and Swarm Intelligence. In ISTE, 225256. External links  edit  Wikimedia Commons has media related to Extreme programming . Wikiquote has quotations related to Extreme programming Extreme Programming A gentle introduction Industrial eXtreme Programming XP magazine Problems and Solutions to XP implementation Using an Agile Software Process with Offshore Development  ThoughtWorks  experiences with implementing XP in large distributed projects v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Authority control BNE  XX550562 BNF  cb144400247 data GND  4618499-5 LCCN  sh99004731 Retrieved from  httpsen.wikipedia.orgwindex.phptitleExtreme_programming oldid914475764  Categories  Extreme programming Software development philosophies Agile software development Hidden categories All articles with dead external links Articles with dead external links from January 2018 Articles with permanently dead external links Webarchive template wayback links Articles with short description Use mdy dates from November 2018 Articles with specifically marked weasel-worded phrases from August 2019 Articles containing potentially dated statements from 2019 All articles containing potentially dated statements All pages needing factual verification Wikipedia articles needing factual verification from September 2018 All articles with unsourced statements Articles with unsourced statements from January 2013 Articles with unsourced statements from June 2009 Articles with unsourced statements from July 2008 Articles with unsourced statements from August 2009 Articles with unsourced statements from May 2019 CS1 errors missing periodical Commons category link is on Wikidata Wikipedia articles with BNE identifiers Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers