DRAKON From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article is about the programming language. For other uses, see Drakon disambiguation . Algorithm mapping tool This article may be expanded with text translated from the corresponding article in Russian . February 2015 Click show for important translation instructions. View a machine-translated version of the Russian article. Machine translation like Deepl or Google Translate is a useful starting point for translations, but translators must revise errors as necessary and confirm that the translation is accurate, rather than simply copy-pasting machine-translated text into the English Wikipedia. Do not translate text that appears unreliable or low-quality. If possible, verify the text with references provided in the foreign-language article. You must provide copyright attribution in the edit summary accompanying your translation by providing an interlanguage link to the source of your translation. A model attribution edit summary using German Content in this edit is translated from the existing German Wikipedia article at deExact name of German article see its history for attribution. You should also add the template Translatedru to the talk page . For more guidance, see WikipediaTranslation . A major contributor to this article appears to have a close connection with its subject. It may require cleanup to comply with Wikipedias content policies, particularly neutral point of view . Please discuss further on the talk page .  March 2015   Learn how and when to remove this template message  DRAKON Paradigm visual First  appeared 1996 Typing discipline defined by the second language that is part of the selected hybrid language Website drakon-editor .sourceforge .net Major implementations GRAFIT-FLOKS 1996, IS Drakon 2008, DRAKON Editor 2011, DrakonHub 2018, Drakon.Tech 2019 Influenced by PROL2, DIPOL, LAKS Influenced QReal DSM platform 1  DRAKON algorithm execution is animated by highlighting diagram elements in the running order. Dijkstra search algorithm in DRAKON Outer part of quicksort algorithm in DRAKON-C A DRAKON diagram describing a transportation of a cryonics patient DRAKON is an algorithmic visual programming and modeling language developed within the Buran space project following ergonomic design principles. The language provides a uniform way to represent flowcharts of any complexity that are easy to read and understand. The DRAKON Editor, which was released in September 2011, is an implementation of the language available in the public domain. It can be used for creating documentation, or for creating visual programs that can be converted to source code in other languages. Unlike UML s philosophy, DRAKONs language philosophy is based on being augmented if needed, by using a hybrid language, which can be illustrated as incrustating code snippets from text language used into shape DRAKON requires. This way, DRAKON always remains a simple visual language that can be used as an augmentation for a programmer who is interested in making their own project code easier to support or other long-term needs for example improving the ergonomics of the coding process or to making code easier to review and understand. The name DRAKON is the Russian acronym for    ,   , which translates to Friendly Russian algorithmic language that illustrates or provides clarity. The word  pronounced approximately as naa-glya-dno-st-th refers to a concept or idea being easy to imagine and understand, and may be tra nslated as clarity. The DRAKON language can be used both as a modellingmarkup language which is considered a standalone pure DRAKON program and as a programming language as part of a hybrid language. Integration of a stricter, academic, variant of a markup language into programming, such as provided by DRAKON, adds syntactic sugar allowing users of different programming languages to comprehend each others contributions to the overall project and even provide commentary if needed. Contents 1 History 2 Family of DRAKON-languages hybrid languages 3 Design 3.1 Purposes 4 Visual syntax 5 Manual 6 Examples 6.1 Branching 6.2 Check-do while loop 6.3 Do-check do-while loop 7 DRAKON algorithm execution animation 8 DRAKON Editor 8.1 Features 9 DRAKON in the German Aerospace Center 10 DRAKON language in medical care 11 Notes 12 References 13 External links History  edit  The development of DRAKON started in 1986 and was directed by Vladimir Parondzhanov with the participation of the Russian Federal Space Agency Academician Pilyugin Center, Moscow  and Russian Academy of Sciences  Keldysh Institute of Applied Mathematics . The language was constructed by formalization, ergonomization and nonclassical structurization of flowcharts described in the ISO 5807-85 standard and Russian standard  19.701-90 and for the development of real time programs. 2  3  The goal was to replace the specialized languages PROL2 2 used for developing onboard complex software for embedded computer system Biser-4 -4 on board Buran, 4  DIPOL  used for developing software for the ground maintenance computer system of Buran 4  and LAKS  used for modelling used in the Buran project with one universal programming language . The work was finished in 1996 3 years after the Buran project was officially closed, when an automated CASE programming system called Grafit-Floks was developed. 5  This CASE is used since 1996 in many major space programs an international project Sea Launch , Russian orbit insertion upper stage Fregat Russian , frigate, 6  upgraded heavy launch vehicle carrier rocket Proton-M , etc. The exact role DRAKON played in these projects however can not be determined. The actual real-world experience of building systems with DRAKON remains extremely scarce as only a few very short snippets of code are publicly available. DRAKON rules for creating diagrams are cognitively optimized for easy comprehension, making it a tool for intelligence augmentation . 2  7  8  9  Family of DRAKON-languages hybrid languages  edit  Icons of DRAKON language Macroicons of DRAKON language. DRAKON  Russian    dragon in English is designed with humanistic ideas in mind, as usage of three different languages for the same project was a source of human factor-related hardships such risks of having a mutual misunderstanding. DRAKON is used not as a single stand-alone language but as a family of hybrid languages, such as DRAKON-C, DRAKON-ASM, DRAKON-Java, etc. All hybrid languages of the DRAKON-family have the uniform graphical syntax, based on flowcharts. The standard graphical syntax provides similarity of drakon-charts for different hybrid languages. The text language used uses its own syntax. Strict distinction of the graphical and textual syntax along with rich graphics improves flexibility and variety of expressive means of the language. The unification of the rules of the graphical syntax in the hybrid languages secures their conceptual unity. The basis of the graphical syntax is a graphical alphabet. Graphical elements graphical letters of the DRAKON alphabet are called icons not symbols. There are 27 icons in the DRAKON graphical alphabet. DRAKON has not only icons, but also macroicons. Macroicons are the graphical words of the DRAKON language. Just as words are made up of letters, macroions graphical words consist of the icons graphical letters. There are 21 macroicons in the DRAKON language. Icons and macroions are the building blocks for constructing drakon-charts. The important parts of maroions are valence points in the illustration to the right, they are depicted as little black circles. Into these points, icons or microicons can be successively entered and arranged by drakon-editor in neat, orderly vertical rows. Design  edit  DRAKON was created as a language with a set of rules that would allow to depict algorithms in fields, not necessarily related to computing, being easy to learn. The main reason to the development of the language was emerging risk of misunderstanding, and following errors upon interaction between users of different programming languages in same project namely, DIPOL, LAX and PROL2, used in the 1980s in Russian space program development. DRAKON initially uses drakon-chart, which is initially based on a formalization of a traditional flowchart yet with additional functionality for handling code in text language. This technique allows to produce and keep readable flowchart at hand simultaneously with process of making the program in question. It is to note a large multi-purpose program with too large drakon-chart may be harder to be comprehended that a set of small programs that serve same purposes separately similar problem of maintaining code of a single large program is occasionally referred to as rule of 30 lines of code among programmers. Purposes  edit  While DRAKON is designed to be a tool that allows to comprehend purposes of programs in different programming languages, for illustrative, planning and strategy purposes mirrored to Perl programming languages primary function. Drakoncharts can also be made in spoken language with same tools. Example of medical program on reducing body fat not translated. DRAKON editor is popular in Russia for being used as a tool for making charts without programming language syntax in the medicine field in Russia as a markup language for algorithms of performing actions in certain cases and scenarios. DRAKON allows both create a map-like guide for patients and form instructions for medical personnel. DRAKON editor takes infographics and flowchart together in a some way for some purposes DRAKON icons can be augmented a photo inside an icon which will be placed under icons text. Visual syntax  edit  The full-text article containing description of the visual syntax of the DRAKON language in English, 12 pages, free to download, pdf. 10  This section needs expansion . You can help by adding to it .  November 2017  Manual  edit  A full description of the DRAKON language is provided in a Russian book. The book is 520 pages long and free to download. 9  Examples  edit  Branching  edit  In DRAKON, the less desirable path goes to the right. The algorithm of going out of ones apartment Put on clothes. Take umbrella if its raining. Leave the house. Check-do while loop  edit  First, check the exit condition. Then perform the action. The workout algorithm Warm up. While you are not tired, lift the weight and rest. Repeat. Do-check do-while loop  edit  First, perform the action. Then check the exit condition Another training algorithm Warm up. Lift the weight. Rest. If tired, quit. Repeat. DRAKON algorithm execution animation  edit  The picture below illustrated the execution of the silhouette DRAKON algorithm. The algorithm execution is animated by highlighting diagram elements in the running order. The Fishing silhouette consists of four trees Preparing for fishing. Waiting for a bite. Fishing work. Way back. The main path of each tree is shown by highlighting thick vertical line which is called a skewer. Note that each path from the Fishing Headline icon start point to the End icon stop point goes smoothly and continuously without any breaks or interruptions. This animation shows that any human can slide his finger along any route from the Headline icon to the End one without lifting his finger or pencil from the paper or screen. It means that silhouette control flow graph always has a path from the Headline icon to each vertex node of the control flow graph. Consequently, a silhouette cant have unreachable code in any conditions. DRAKON algorithm execution is animated by highlighting diagram elements in the running order. DRAKON Editor  edit  DRAKON Editor is software for making DRAKON flowcharts . 11  It is used for two purposes documenting algorithms and programming. DRAKON Editor is written in TclTk and runs on Windows , OS X and Linux . As a documentation tool, DRAKON Editor helps create diagrams that capture algorithmic knowledge. Such knowledge covers both behaviour of computer systems and procedures not directly related to computers, for example medical algorithms and business processes . DRAKON Editor can generate source code from diagrams. This way, DRAKON Editor can be used as an IDE . Features  edit  The process of editing in DRAKON Editor is based on free drawing. The user inserts and manipulates primitive shapes such as rectangles, vertical and horizontal lines. The user experience is similar to that of business drawing tools. DRAKON Editor does not prevent the user from violating the rules of DRAKON language. It is possible, however, to perform an automated check of the visual syntax at any time. DRAKON Editor has an alternative editing algorithm, called smart mode. 12  When in the smart mode , the user can change the visual appearance of the diagram without breaking its topology . In other words, the smart mode allows to fine-tune the layout of the diagram while keeping the underlying algorithm intact. DRAKON Editor supports the following programming languages  AutoHotKey C C C D Erlang Go Java JavaScript Lua Processing Python Tcl Verilog For some programming languages, DRAKON Editor generates source code for ERIL data modeling language. 13  DRAKON Editor can also generate source code for finite state machines represented with the silhouette construct of DRAKON language. For Erlang, DRAKON Editor generates boilerplate code from a visual representation of a supervision tree . Thanks to the nature of the free drawing principle, DRAKON Editor can produce other types of diagrams including class diagrams and sequence diagrams . DRAKON in the German Aerospace Center  edit  DRAKON language is used in the German Aerospace Center for implementation of some critical functions dictated by the safety regulations of the flight tests, where automation is important because of maximum distance to the ground station and the process needs quick automatic execution. The DRAKON Editor software was using to graphically program flowcharts which were specially checked. C-code was generated from the drakon-charts, for instance, for DRAKON representation of launch detection code. 14  DRAKON language in medical care  edit  The goal of clinical algorithms is to do the right clinical decisions while standardizing and equalizing performance of practitioners. Besides, it improves the quality of health care and minimizes the risk of errors. DRAKON algorithms are ergonomical ones and help to prevent mistakes and ambiguities. DRAKON algorithmic language uniforms medical algorithms and allows complete clinical tasks successfully. .mw-parser-output .templatequoteoverflowhiddenmargin1em 0padding0 40px.mw-parser-output .templatequote .templatequoteciteline-height1.5emtext-alignleftpadding-left1.6emmargin-top0 The importance of clinical algorithms in the patient diagnosis, treatment, and intervention is obvious. Similarly, algorithms are useful in education of medical practitioners, especially while working as a team. In order to maximize the utility of algorithms, they need to be simple, inclusive, and ergonomic, so that every user executes a specific algorithm in the identical mann er. Medical care requires an instant implementation of latest scientific achievements. DRAKON algorithm can be used for practical skills and drills of undergraduate and postgraduate students. The DRAKON charts standardize, ensure quality of diagnostic and treatment procedures. It minimizes the possibility of error, thus, increases patient safety. 15  Notes  edit   Terekhov, Andrey Bryksin, Timofey Litvinov, Yurii. How to make visual modeling more attractive to software developers  11th LASER Summer School on Software Engineering. Leading-Edge Software Engineering. September 7-13, 2014 - Elba Island, Italy  a b  . .           .   .      ,        Innowacje i badania naukowe, jak rowniez ich zastosowanie w praktyce.  29.05.2012- 31.05.2012.   Warszaw.  Parondzhanov V. D. Visual Syntax of the DRAGON Language  Programming and Computer Software, 01  1995 Volume 21 Issue 3 p. 142 - 153. Here is an incorrect translation. This should be read as DRAKON language.  a b       . . .  . --, 2008.  384 .  C. 192.  .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em ISBN   978-5-93735-008-4  Technique of development of algorithms and programms Grafit-Floks.  permanent dead link    ..,  ..,  ..,  ..,  ..,  ..,  ..,  ..           ..    .  2014, 1 22.  . 1625. In Russian Morozov V.V., Trunov Yu.V., Komissarov A.I., Pak E.A., Zhuchkov A.G., Dishel V.D., Zalihina E.E., Parondzhanov V.D. Control System of Fregat Versatile Space Tug  Vestnik NPO imeni S.A. Lavochkina. Cosmonautics and Rocket Engineering  2014, 1 22.  P. 1625.  Bezel Ja. V. Is it possible to improve the workings of the mind A new look at the problem. Herald of the Russian Academy of Sciences. Volume 73, Issue 4, 2003.   . .,  . . -              .   -            11-12  2009 .  a b  . . 2012.        .  ,    .    .   . .  . p.  520. ISBN   978-5-94074-800-7 .  Parondzhanov V.D. 1995. Visual Syntax of the DRAKON Language . 21 . PROGRAMMING AND COMPUTER SOFTWARE. Official English Translation of Programmirovanie. pp.  142153.  DRAKON Editor . drakon-editor.sourceforge.net . Retrieved 2016-10-04 .  Smart editing mode in DRAKON Editor . drakon-editor.sourceforge.net . Retrieved 2016-10-04 .  The ERIL Language . drakon-editor.sourceforge.net . Retrieved 2016-10-04 .  Marc Schwarzbach, Sven Wlach, Maximilian Laiacker. Modifying a Scientific Flight Control System for Balloon Launched UAV Missions  German Aerospace Center DLR  IEEE, 2015 PDF . drakon.su . Retrieved 2017-12-03 .  Nadisauskiene R., Pukenyte E., Bardauskiene L., Vileikyte A., Dobozinskas P., Kumpaitiene B., Vaitkaitis D., and Krikscionaitiene A. Drakon Algorithmic Language in Medical Care  Journal of Gynecology and Womens Health. Volume 4. Issue 3.  April 2017.  555636. DOI 10.19080JGWH.2017.04.555636. References  edit  V. Parondzhanov. How to improve the work of your mind. Algorithms without programmers - its very simple     .    -    . , 2001. - 360.  S. Mitkin. DRAKON The Human Revolution in Understanding Programs External links  edit  Wikimedia Commons has media related to DRAKON . History of DRAKON in Russian Transhumanism  DRAKON List of Internet Resources about Drakon in Russian DRAKON  Oberon  DRON visual programming language in English DRAKON  Oberon  DRON visual programming language in Russian DRAKON Editor for Windows, Mac and Linux. Drakon.Tech an online IDE based on DRAKON.   for Windows. Learn Drakon Synchronized Music Slideshow Video Slideshow on how to use Drakon set to Kevin MacLeod music synchronized for easy learning. Retrieved from  httpsen.wikipedia.orgwindex.phptitleDRAKON oldid914011554  Categories  Visual programming languages Buran program Computing in the Soviet Union Diagramming software Modeling languages Hidden categories All articles with dead external links Articles with dead external links from January 2018 Articles with permanently dead external links Articles with short description Articles to be expanded from February 2015 All articles to be expanded Articles needing translation from Russian Wikipedia Wikipedia articles with possible conflicts of interest from March 2015 Articles containing Russian-language text Articles to be expanded from November 2017 Articles using small message boxes Commons category link from Wikidata Articles with Russian-language external links