Change impact analysis From Wikipedia, the free encyclopedia Jump to navigation Jump to search Change impact analysis  IA  is defined by Bohner and Arnold 1  as identifying the potential consequences of a change, or estimating what needs to be modified to accomplish a change, and they focus on IA in terms of scoping changes within the details of a design. In contrast, Pfleeger and Atlee 2  focus on the risks associated with changes and state that IA is the evaluation of the many risks associated with the change, including estimates of the effects on resources, effort, and schedule. Both the design details and risks associated with modifications are critical to performing IA within the change management processes . A technical colloquial term is also mentioned sometimes in this context, dependency hell . Contents 1 Types of Impact Analysis Techniques 2 Package management and dependency IA 3 Source code and dependency IA 4 Requirements, and traceability to source code 5 See also 6 References 7 Further reading Types of Impact Analysis Techniques  edit  IA techniques can be classified into three types 3  Trace Dependency Experiential Bohner and Arnold 4  identify two classes of IA, traceability and dependency IA. In traceability IA, links between requirements, specifications, design elements, and tests are captured, and these relationships can be analysed to determine the scope of an initiating change. 5  In dependency IA, linkages between parts, variables, logic, modules etc. are assessed to determine the consequences of an initiating change. Dependency IA occurs at a more detailed level than traceability IA. Within software design, static and dynamic algorithms can be run on code to perform dependency IA. 6  7  Static methods focus on the program structure, while dynamic algorithms gather information about program behaviour at run-time. Literature and engineering practice also suggest a third type of IA, experiential IA, in that the impact of changes is often determined using expert design knowledge. Review meeting protocols, 8  informal team discussions, and individual engineering judgement 9  can all be used to determine the consequences of a modification. Package management and dependency IA  edit  Software is often delivered in packages, which contain dependencies to other software packages necessary that the one deployed runs. Following these dependencies in reverse order is a convenient way to identify the impact of changing the contents of a software package. Examples for software helpful to do this scripts like whatrequires 10  for RPM , and debian package formats Source code and dependency IA  edit  Dependencies are also declared in source code. MetaData can be used to understand the dependencies via Static analysis. Amongst the tools supporting to show such dependencies are Integrated development environment FindBugs JRipples AppDynamics Crosscode Panoptics There are as well tools applying full-text search over source code stored in various repositories. If the source code is web-browsable, then classical search engines can be used. If the source is only available in the runtime environment, it gets more complicated and specialized tools may be of help. 11  Learning techniques can be used to automatically identify impact dependencies. 12  Requirements, and traceability to source code  edit  Recent tools use often stable links to trace dependencies. This can be done on all levels, amongst them specification, blueprint, bugs, commits. Despite this, the use of backlink checkers known from search engine optimization is not common. Research in this area is done as well, just to name use case maps 13  Commercial tools in this area include Telelogic DOORS , and IBM Rational . See also  edit  Change management engineering References  edit   Bohner and Arnold, 1996, pg.3  Pfleeger and Atlee, 2006, pg.526  Kilpinen, 2008  Bohner and Arnold, 1996  Eisner, 2002, pg.236-237  Rajlich, 2000  Ren et al., 2005  Endres and Rombach, 2003, pg.17  Ambler, 2002, pg. 244  httpwww.pixelbeat.orgscriptswhatrequires  ohloh, discover, track, and compare open source.  Musco, Vincenzo Carette, Antonin Monperrus, Martin Preux, Philippe 2016. A learning algorithm for change impact prediction  814. arXiv  1512.07435 . doi  10.11452896995.2896996 . Cite journal requires journal  help  .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Change Impact Analysis for Requirement Evolution using Use Case Maps , Jameleddine Hassine, Juergen Rilling, Jacqueline Hewitt, Department of Computer Science, Concordia University, 2005. Further reading  edit  Ambler, S. 2002. Agile Modeling Effective Practices for Extreme Programming and the Unified Process. New York, New York, USA, John Wiley  Sons. Bohner, S.A. and R.S. Arnold, Eds. 1996. Software Change Impact Analysis. Los Alamitos, California, USA, IEEE Computer Society Press. Eisner, H. 2002. Essentials of Project and Systems Engineering Management. New York, New York, USA, John Wiley  Sons. Endres, A. and D. Rombach 2003. A Handbook of Software and Systems Engineering Empirical Observations, Laws and Theories. New York, New York, USA, Addison-Wesley. Kilpinen, M.S. 2008. The Emergence of Change at the Systems Engineering and Software Design Interface An Investigation of Impact Analysis. PhD Thesis . University of Cambridge. Cambridge, UK. Pfleeger, S.L. and J.M. Atlee 2006. Software Engineering Theory and Practice. Upper Saddle River, New Jersey, USA, Prentice Hall. Rajlich, V. 2000. A Model and a Tool for Change Propagation in Software. ACM SIGSOFT Software Engineering Notes 25172. Ren, X., F. Shah, et al. 2005. Chianti A Tool for Change Impact Analysis of Java Programs. International Conference on Software Engineering ICSE 2005, St Louis, Missouri, USA. Retrieved from  httpsen.wikipedia.orgwindex.phptitleChange_impact_analysis oldid909757695  Categories  Change management Hidden categories CS1 errors missing periodical