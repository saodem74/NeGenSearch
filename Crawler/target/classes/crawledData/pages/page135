Infrastructure as code From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article contains content that is written like an advertisement . Please help improve it by removing promotional content and inappropriate external links , and by adding encyclopedic content written from a neutral point of view .  March 2018   Learn how and when to remove this template message  Infrastructure as code  IaC  is the process of managing and provisioning computer data centers through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools. 1  The IT infrastructure managed by this comprises both physical equipment such as bare-metal servers as well as virtual machines and associated configuration resources. The definitions may be in a version control system . It can use either scripts or declarative definitions, rather than manual processes, but the term is more often used to promote declarative approaches. IaC approaches are promoted for cloud computing , which is sometimes marketed as infrastructure as a service IaaS. IaC supports IaaS, but should not be confused with it. 1  Contents 1 Overview 2 Added value and advantages 3 Types of approaches 4 Methods 5 Tools 5.1 Continuous configuration automation 5.1.1 Community content 6 Relationship to DevOps 7 See also 8 References Overview  edit  IaC grew as a response to the difficulty posed from two pieces of technology  utility computing and second-generation web frameworks. In 2006, the launch of Amazon Web Services  Elastic Compute Cloud and the 1.0 version of Ruby on Rails just months before 2  brought about widespread scaling problems for many enterprises, problems that were previously only witnessed by huge companies. 3  With new tools emerging to handle this ever growing field, the idea of IaC was born. The thought of modelling infrastructure with code, and then having the ability to design, implement, and deploy applications infrastructure with known software best practices appealed to software developers and IT infrastructure administrators. The ability to treat it like code and use the sam e tools as any other software project would allow developers to rapidly deploy applications. 4  Added value and advantages  edit  The value of IaC can be broken down into three measurable categories cost reduction, speed faster execution and risk remove errors and security violations.  citation needed  Cost reduction aims at helping not only the enterprise financially, but also in terms of people and effort, meaning that by removing the manual component, people are able to refocus their efforts towards other enterprise tasks.  citation needed  Infrastructure automation enables speed through faster execution when configuring your infrastructure and aims at providing visibility to help other teams across the enterprise work quickly and more efficiently. Automation removes the risk associated with human error, like manual misconfiguration removing this can decrease downtime and increase reliability. These outcomes and attributes help the enterprise move towards implementing a culture of DevOps , the combined working of development and operations . 5  Types of approaches  edit  There are generally three approaches to IaC declarative functional vs. imperative procedural vs. intelligent environment aware.  citation needed  The difference between the declarative, the imperative and the intelligent approach is essentially what versus how versus why . The declarative approach focuses on what the eventual target configuration should be the imperative focuses on how the infrastructure is to be changed to meet this the intelligent approach focuses on why the configuration should be a certain way in consideration of all the co-relationships and co-dependencies of multiple applications running on the same infrastructure typically found in production. 6  The declarative approach defines the desired state and the system executes what needs to happen to achieve that desired state. Imperative defines specific commands that need to be executed in the appropriate order to end with the desired conclusion. The intelligent determines the correct desired state before the system executes what needs to happen to achieve a desired state that does not impact co-dependent applications. Environment aware desired state is the next generation of IaC. 7  Methods  edit  There are two methods of IaC  push  and  pull  . The main difference is the manner in which the servers are told how to be configured. In the pull method the server to be configured will pull its configuration from the controlling server. In the push method the controlling server pushes the configuration to the destination system. 8  Tools  edit  There are many tools that fulfill infrastructure automation capabilities and use IaC. Broadly speaking, any framework or tool that performs changes or configures infrastructure declaratively or imperatively based on a programmatic approach can be considered IaC. 9  Traditionally, server lifecycle automation and configuration management tools were used to accomplish IaC. Now enterprises are also using continuous configuration automation tools or stand-alone IaC frameworks, such as Microsofts PowerShell DSC 10  or AWS CloudFormation . 11  Continuous configuration automation  edit  All continuous configuration automation CCA tools can be thought of as an extension of traditional IaC frameworks. They leverage IaC to change, configure, and automate infrastructure, and they also provide visibility, efficiency and flexibility in how infrastructure is managed. 3  These additional attributes provide enterprise-level security and compliance - making companies keen on implementing these types of tools. Community content  edit  An important aspect when considering CCA tools, if they are open source, is the community content. As Gartner states, the value of CCA tools is as dependent on user-community-contributed content and support as it is on the commercial maturity and performance of the automation tooling. 3  Vendors like Puppet and Chef , those that have been around a significant amount of time, have created their own communities. Chef has Chef Community Repository and Puppet has PuppetForge . 12  Other vendors rely on adjacent communities and leverage other IaC frameworks such as PowerShell DSC. 10  New vendors are emerging that are not content driven, but model driven with the intelligence in the product to deliver content. These visual, object-oriented systems work well for developers, but they are especially useful to production oriented DevOps and operations constituents that value models versus scripting for content. As the field continues to develop and change, the community based content will become ever important to how IaC tools are used, unless they are model driven and object oriented. Notable CCA tools include Tool Released by Method Approach Written in Pulumi Pulumi Push Declarative Typescript, Python, Go Chef Chef 2009 Pull Declarative and imperative Ruby Otter Inedo Push Declarative and imperative - Puppet Puppet 2005 Pull Declarative Ruby SaltStack SaltStack Push and Pull Declarative and imperative Python CFEngine CFEngine Pull Declarative - Terraform HashiCorp 2014 Push Declarative Go DSC Microsoft PushPull DeclarativeImperative PowerShell Ansible  Ansible Tower RedHat 2012 Push Declarative and imperative Python Relationship to DevOps  edit  IaC can be a key attribute of enabling best practices in DevOps  Developers become more involved in defining configuration and Ops teams get involved earlier in the development process. 13  Tools that utilize IaC bring visibility to the state and configuration of servers and ultimately provide the visibility to users within the enterprise, aiming to bring teams together to maximize their efforts. 14  Automation in general aims to take the confusion and error-prone aspect of manual processes and make it more efficient, and productive. Allowing for better software and applications to be created with flexibility, less downtime, and an overall cost effective way for the company. IaC is intended to reduce the complexity that kills efficiency out of manual configuration. Automat ion and collaboration are considered central points in DevOps Infrastructure automation tools are often included as components of a DevOps toolchain . 15  See also  edit  Configuration management Orchestration References  edit   a b Wittig, Andreas Wittig, Michael 2016. Amazon Web Services in Action . Manning Press. p.  93. ISBN   978-1-61729-288-0 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Bower, Joseph L. Christensen, Claton M. Disruptive Technologies Catching the Wave. Harvard Business Review .  a b c Fletcher, Colin Cosgrove, Terrence 26 August 2015. Innovation Insight for Continuous Configuration Automation Tools . Gartner Report.  Riley, Chris 12 November 2015. Version Your Infrastructure . DevOps.com .  Phillips, Andrew 14 May 2015. Moving from Infrastructure Automation to True DevOps . DevOps.com .  Declarative v. Imperative Models for Configuration Management Which Is Really Better . Scriptrock.com . Retrieved 14 December 2015 .  Loschwitz, Martin 14 November 2014. Choosing between the leading open source configuration managers . Admin Network  Security . Lawrence, KS USA Linux New Media USA LLC.  Venezia, Paul 21 November 2013. Puppet vs. Chef vs. Ansible vs. Salt . networkworld.com . Network World . Retrieved 14 December 2015 .  Garner Market Trends DevOps  Not a Market, but Tool-Centric Philosophy That supports a Continuous Delivery Value Chain Report. Gartner. 18 February 2015.  a b Chaganti, Ravikanth 5 January 2016. DevOps, Infrastructure as Code, and PowerShell DSC The Introduction . PowerShell Magazine . PowerShell Magazine . Retrieved 11 January 2016 .  httpsaws.amazon.comabout-awswhats-new20110225introducing-aws-cloudformation  Sturgeon, Phil 28 October 2012. Puppet or Chef .  Ramos, Martin 4 November 2015. Continuous Integration Infrastructure as Code in DevOps . easydynamics.com .  dead link   Infrastructure As Code Fueling the Fire for Faster Application Delivery Report. Forrester. March 2015.  Wurster, Laurie F. Colville, Ronni J. Height, Cameron Tripathi, Somendra Rastogi, Aditi. Emerging Technology Analysis DevOps a Culture Shift, Not a Technology Report. Gartner. Retrieved from  httpsen.wikipedia.orgwindex.phptitleInfrastructure_as_code oldid914196594  Categories  Agile software development Software development process Configuration management Systems engineering Orchestration software Cloud computing As a service Hidden categories All articles with dead external links Articles with dead external links from June 2019 Articles with a promotional tone from March 2018 All articles with a promotional tone All articles with unsourced statements Articles with unsourced statements from September 2019 Articles with unsourced statements from March 2017 Use dmy dates from June 2017