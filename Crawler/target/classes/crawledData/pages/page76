Automated planning and scheduling From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article includes a list of references , but its sources remain unclear because it has insufficient inline citations . Please help to improve this article by introducing more precise citations.  January 2012   Learn how and when to remove this template message  Artificial intelligence Major goals Knowledge reasoning Planning Machine learning Natural language processing Computer vision Robotics Artificial general intelligence Approaches Symbolic Deep learning Bayesian networks Evolutionary algorithms Philosophy Ethics Existential risk Turing test Chinese room Control problem Friendly AI History Timeline Progress AI winter Technology Applications Projects Programming languages Glossary Glossary v t e Automated planning and scheduling , sometimes denoted as simply AI planning , 1  is a branch of artificial intelligence that concerns the realization of strategies or action sequences, typically for execution by intelligent agents , autonomous robots and unmanned vehicles . Unlike classical control and classification problems, the solutions are complex and must be discovered and optimized in multidimensional space. Planning is also related to decision theory . In known environments with available models, planning can be done offline. Solutions can be found and evaluated prior to execution. In dynamically unknown environments, the strategy often needs to be revised online. Models and policies must be adapted. Solutions usually resort to iterative trial and error processes commonly seen in artificial intelligence . These include dynamic programming , reinforcement learning and combinatorial optimization . Languages used to describe planning and scheduling are often called action languages . Contents 1 Overview 2 Domain independent planning 3 Planning domain modelling languages 4 Algorithms for planning 4.1 Classical planning 4.2 Reduction to other problems 4.3 Temporal planning 4.4 Probabilistic planning 4.5 Preference-based planning 4.6 Conditional planning 4.6.1 Contingent planning 4.6.2 Conformant planning 5 Deployment of planning systems 6 See also 7 References 8 Further reading 9 External links Overview  edit  Given a description of the possible initial states of the world, a description of the desired goals, and a description of a set of possible actions, the planning problem is to synthesise a plan that is guaranteed when applied to any of the initial states to generate a state which contains the desired goals such a state is called a goal state. The difficulty of planning is dependent on the simplifying assumptions employed. Several classes of planning problems can be identified depending on the properties the problems have in several dimensions. Are the actions deterministic or nondeterministic For nondeterministic actions, are the associated probabilities available Are the state variables discrete or continuous If they are discrete, do they have only a finite number of possible values Can the current state be observed unambiguously There can be full observability and partial observability. How many initial states are there, finite or arbitrarily many Do actions have a duration Can several actions be taken concurrently, or is only one action possible at a time Is the objective of a plan to reach a designated goal state, or to maximize a reward function Is there only one agent or are there several agents Are the agents cooperative or selfish Do all of the agents construct their own plans separately, or are the plans constructed centrally for all agents The simplest possible planning problem, known as the Classical Planning Problem, is determined by a unique known initial state, durationless actions, deterministic actions, which can be taken only one at a time, and a single agent. Since the initial state is known unambiguously, and all actions are deterministic, the state of the world after any sequence of actions can be accurately predicted, and the question of observability is irrelevant for classical planning. Further, plans can be defined as sequences of actions, because it is always known in advance which actions will be needed. With nondeterministic actions or other events outside the control of the agent, the possible executions form a tree, and plans have to determine the appropriate actions for every node of the tree. Discrete-time Markov decision processes MDP are planning problems with durationless actions, nondeterministic actions with probabilities, full observability, maximization of a reward function, and a single agent. When full observability is replaced by partial observability, planning corresponds to partially observable Markov decision process POMDP. If there are more than one agent, we have multi-agent planning , which is closely related to game theory . Domain independent planning  edit  In AI planning, planners typically input a domain model a description of a set of possible actions which model the domain as well as the specific problem to be solved specified by the initial state and goal, in contrast to those in which there is no input domain specified. Such planners are called domain independent to emphasis the fact that they can solve planning problems from a wide range of domains. Typical examples of domains are block stacking, logistics, workflow management, and robot task planning. Hence a single domain independent planner can be used to solve planning problems in all these various domains. On the other hand, a route planner is typical of a domain specific planner. Planning domain modelling languages  edit  The most commonly used languages for representing planning domains and specific planning problems, such as STRIPS and PDDL for Classical Planning, are based on state variables. Each possible state of the world is an assignment of values to the state variables, and actions determine how the values of the state variables change when that action is taken. Since a set of state variables induce a state space that has a size that is exponential in the set, planning, similarly to many other computational problems, suffers from the curse of dimensionality and the combinatorial explosion . An alternative language for describing planning problems is that of hierarchical task networks , in which a set of tasks is given, and each task can be either realized by a primitive action or decomposed into a set of other tasks. This does not necessarily involve state variables, although in more realistic applications state variables simplify the description of task networks. Algorithms for planning  edit  Classical planning  edit  forward chaining state space search , possibly enhanced with heuristics backward chaining search, possibly enhanced by the use of state constraints see STRIPS , graphplan  partial-order planning See also Sussman Anomaly Reduction to other problems  edit  reduction to the propositional satisfiability problem  satplan . reduction to Model checking - both are essentially problems of traversing state spaces, and the classical planning problem corresponds to a subclass of model checking problems. Temporal planning  edit  Temporal planning can be solved with methods similar to classical planning. The main difference is, because of the possibility of several, temporally overlapping actions with a duration being taken concurrently, that the definition of a state has to include information about the current absolute time and how far the execution of each active action has proceeded. Further, in pla nning with rational or real time, the state space may be infinite, unlike in classical planning or planning with integer time. Temporal planning is closely related to scheduling problems. Temporal planning can also be understood in terms of timed automata . Probabilistic planning  edit  Main articles Markov decision process and Partially observable Markov decision process Probabilistic planning can be solved with iterative methods such as value iteration and policy iteration , when the state space is sufficiently small. With partial observability, probabilistic planning is similarly solved with iterative methods, but using a representation of the value functions defined for the space of beliefs instead of states. Preference-based planning  edit  Main article Preference-based planning In preference-based planning, the objective is not only to produce a plan but also to satisfy user-specified preferences . A difference to the more common reward-based planning, for example corresponding to MDPs, preferences dont necessarily have a precise numerical value. Conditional planning  edit  Deterministic planning was introduced with the STRIPS planning system, which is a hierarchical planner. Action names are ordered in a sequence and this is a plan for the robot. Hierarchical planning can be compared with an automatic generated behavior tree . 2  The disadvantage is, that a normal behavior tree is not so expressive like a computer program. That means, the notation of a behavior graph contains action commands, but no loops or if-then-statements. Conditional planning overcomes the bottleneck and introduces an elaborated notation which is similar to a control flow , known from other programming languages like Pascal . It is very similar to program synthesis , that means a planner generates sourcecode which can be executed by an interpreter. 3  An early example of a conditional planner is Warplan-C which was introduced in the mid 1970s. 4  Until now, the question was not answered what the difference is between a normal sequence and a complicated plan, which contains if-then-statements. It has to do with uncertainty at runtime of a plan. The idea is, that a plan can react to sensor signals which are unknown for the planner. The planner generates two choices in advance. For example, if an object was detected, then action A is executed, if an object is missing, then action B is executed. 5  A major advantage of conditional planning is the ability to handle partial plans . 6  An agent is not forced to plan everything from start to finish but can divide the problem into chunks . This helps to reduce the state space and solves much more complex problems. Contingent planning  edit  We speak of contingent planning when the environment is observable through sensors, which can be at faulty. It is thus a situation where the planning agent acts under incomplete information. For a contingent planning problem, a plan is no longer a sequence of actions but a decision tree because each step of the plan is represented by a set of states rather than a single perfectly observable state, as in the case of classical planning 7  . The selected actions depend on the state of the system. For example, if it rains, the agent chooses to take the umbrella, and if it doesnt, they may choose not to take it. Mikael L. Littman showed in 1998 that with branching actions, the planning problem becomes EXPTIME -complete 8  9  . A particular case of contiguous planning is represented by FOND problems - for fully-observable and non-deterministic. If the goal is specified in LTLf linear time logic on finite trace then the problem is always EXPTIME-complete 10  and 2EXPTIME-complete if the goal is specified with LDLf. Conformant planning  edit  Conformant planning is when the agent is uncertain about the state of the system, and it cannot make any observations. The agent then has beliefs about the real world, but cannot verify them with sensing actions, for instance. These problems are solved by techniques similar to those of classical planning 11  12  , but where the state space is exponential in the size of the problem, because of the uncertainty about the current state. A solution for a conformant planning problem is a sequence of actions. Haslum and Jonsson have demonstrated that the problem of conformant planning is EXPSPACE -complete 13  , and 2EXPTIME-complete when the initial situation is uncertain, and there is non-deternimism in the actions outcomes 9  . Deployment of planning systems  edit  The Hubble Space Telescope uses a short-term system called SPSS and a long-term planning system called Spike . See also  edit  Action description language Actor model Applications of artificial intelligence Constraint satisfaction problem Reactive planning Scheduling computing Strategy game theory Lists List of SMT solvers List of constraint programming languages List of emerging technologies Outline of artificial intelligence References  edit   Ghallab, Malik Nau, Dana S. Traverso, Paolo 2004, Automated Planning Theory and Practice , Morgan Kaufmann , ISBN   1-55860-856-7 .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Neufeld, Xenija and Mostaghim, Sanaz and Sancho-Pradel, Dario and Brand, Sandy 2017. Building a Planner A Survey of Planning Systems Used in Commercial Video Games. IEEE Transactions on Games . IEEE. CS1 maint multiple names authors list  link   Sanelli, Valerio and Cashmore, Michael and Magazzeni, Daniele and Iocchi, Luca 2017. Short-term human robot interaction through conditional planning and execution . Proc. of International Conference on Automated Planning and Scheduling ICAPS. CS1 maint multiple names authors list  link   Peot, Mark A and Smith, David E 1992. Conditional nonlinear planning PDF . Artificial Intelligence Planning Systems. Elsevier. pp.  189--197. CS1 maint multiple names authors list  link   Karlsson, Lars 2001. Conditional progressive planning under uncertainty PDF . IJCAI. pp.  431--438.  Liu, Daphne Hao 2008. A survey of planning in intelligent agents from externally motivated to internally motivated systems Technical report. Technical Report TR-2008-936, Department of Computer Science, University of Rochester.  Alexandre Albore Hector Palacios Hector Geffner. A Translation-Based Approach to Contingent Planning . International Joint Conference of Artificial Intelligence IJCAI. Pasadena, CA AAAI.  Littman, Michael L. 1997. Probabilistic Propositional Planning Representations and Complexity . Fourteenth National Conference on Artificial Intelligence. MIT Press. pp.  748754 . Retrieved 2019-02-10 .  a b Jussi Rintanen 2004. Complexity of Planning with Partial Observability PDF . Int. Conf. Automated Planning and Scheduling. AAAI.  De Giacomo, Giuseppe Rubin, Sasha 2018. Automata-Theoretic Foundations of FOND Planning for LTLf and LDLf Goals . IJCAI . Retrieved 2018-07-17 .  Palacios, Hector Geffner, Hector 2009. Compiling uncertainty away in conformant planning problems with bounded width . Journal of Artificial Intelligence Research . 35  623675.  Albore, Alexandre Ramrez, Miquel Geffner, Hector 2011. Effective heuristics and belief tracking for planning with incomplete information . Twenty-First International Conference on Automated Planning and Scheduling ICAPS.  Haslum, Patrik Jonsson, Peter 2000. Some Results on the Complexity of Planning with Incomplete Information . Recent Advances in AI Planning . Lecture Notes in Computer Science. Springer Berlin Heidelberg 308318. doi  10.100710720246_24 . ISBN   9783540446576 . Retrieved 2019-02-10 . Further reading  edit  Vlahavas, I. Planning and Scheduling . EETN . Archived from the original on 2013-12-22. Cite uses deprecated parameter deadurl  help  External links  edit  International Conference on Automated Planning and Scheduling Retrieved from  httpsen.wikipedia.orgwindex.phptitleAutomated_planning_and_scheduling oldid911123353  Categories  Automated planning and scheduling Hidden categories CS1 maint multiple names authors list Articles lacking in-text citations from January 2012 All articles lacking in-text citations Portal templates with all redlinked portals CS1 errors deprecated parameters