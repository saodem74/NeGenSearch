Continuous integration From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article includes a list of references , but its sources remain unclear because it has insufficient inline citations . Please help to improve this article by introducing more precise citations.  July 2016   Learn how and when to remove this template message  Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e In software engineering , continuous integration  CI  is the practice of merging all developers working copies to a shared mainline several times a day. 1  Grady Booch first proposed the term CI in his 1991 method , 2  although he did not advocate integrating several times a day. Extreme programming XP adopted the concept of CI and did advocate integrating more than once per day  perhaps as many as tens of times per day. 3  Contents 1 Rationale 2 Workflow 3 History 4 Common practices 4.1 Maintain a code repository 4.2 Automate the build 4.3 Make the build self-testing 4.4 Everyone commits to the baseline every day 4.5 Every commit to baseline should be built 4.6 Keep the build fast 4.7 Test in a clone of the production environment 4.8 Make it easy to get the latest deliverables 4.9 Everyone can see the results of the latest build 4.10 Automate deployment 5 Costs and benefits 6 See also 7 References 8 Further reading 9 External links Rationale  edit  The main aim of CI is to prevent integration problems, referred to as integration hell in early descriptions of XP. CI is not universally accepted as an improvement over frequent integration, so it is important to distinguish between the two as there is disagreement about the virtues of each.  citation needed  In XP, CI was intended to be used in combination with automated unit tests written through the practices of test-driven development . Initially this was conceived of as running and passing all unit tests in the developers local environment before committing to the mainline. This helps avoid one developers work-in-progress breaking another developers copy. Where necessary, partially complete features can be disabled before committing, using feature toggles for instance. Later elaborations of the concept introduced build servers, which automatically ran the unit tests periodically or even after every commit and reported the results to the developers. The use of build servers not necessarily running unit tests had already been practised by some teams outside the XP community. Nowadays, many organisations have adopted CI without adopting all of XP. In addition to automated unit tests, organisations using CI typically use a build server to implement continuous processes of applying quality control in general  small pieces of effort, applied frequently. In addition to running the unit and integration tests, such processes run additional static and dynamic tests, measure and profile performance, extract and format documentation from the source code and facilitate manual QA processes. This continuous application of quality control aims to improve the quality of software , and to reduce the time taken to deliver it, by replacing the traditional practice of applying quality control after completing all development. This is very similar to the original idea of integrating more frequently to make integration easier, only applied to QA processes. In the same vein, the practice of continuous delivery further extends CI by making sure the software checked in on the mainline is always in a state that can be deployed to users and makes the deployment process very rapid. Workflow  edit  When embarking on a change, a developer takes a copy of the current code base on which to work. As other developers submit changed code to the source code repository , this copy gradually ceases to reflect the repository code. Not only can the existing code base change, but new code can be added as well as new libraries, and other resources that create dependencies, and potential conflicts. The longer development continues on a branch without merging back to the mainline, the greater the risk of multiple integration conflicts and failures when the developer branch is eventually merged back. When developers submit code to the repository they must first update their code to reflect the changes in the repository since they took their copy. The more changes the reposi tory contains, the more work developers must do before submitting their own changes. Eventually, the repository may become so different from the developers baselines that they enter what is sometimes referred to as merge hell, or integration hell, 4  where the time it takes to integrate exceeds the time it took to make their original changes. Continuous integration involves integrating early and often, so as to avoid the pitfalls of integration hell. The practice aims to reduce rework and thus reduce cost and time. 5  A complementary practice to CI is that before submitting work, each programmer must do a complete build and run and pass all unit tests . Integration tests are usually run automatically on a CI server when it detects a new commit. History  edit  This section needs expansion . You can help by adding to it .  August 2014  The earliest known work on continuous integration was the Infuse environment developed by G.E. Kaiser, D.E. Perry and W.M. Schell. 6  In 1994, Grady Booch used the phrase continuous integration in Object-Oriented Analysis and Design with Applications 2nd edition 7  to explain how, when developing using micro processes, internal releases represent a sort of continuous integration of the system, and exist to force closure of the micro process. In 1997, Kent Beck and Ron Jeffries invented Extreme Programming XP while on the Chrysler Comprehensive Compensation System project, including continuous integration. 8  Beck published about continuous integration in 1998, emphasising the importance of face-to-face communication over technological support. 9  In 1999, Beck elaborated more in his first full book on Extreme Programming. 10  CruiseControl , one of the first open-source CI tools, 11  was released in 2001. Common practices  edit  This section contains instructions, advice, or how-to content . The purpose of Wikipedia is to present facts, not to train. Please help improve this article either by rewriting the how-to content or by moving it to Wikiversity , Wikibooks or Wikivoyage .  May 2015  This section lists best practices suggested by various authors on how to achieve continuous integration, and how to automate this practice. Build automation is a best practice itself. 12  13  Continuous integration  the practice of frequently integrating ones new or changed code with the existing code repository  should occur frequently enough that no intervening window remains between commit and build , and such that no errors can arise without developers noticing them and correcting them immediately. 14  Normal practice is to trigger these builds by every commit to a repository, rather than a periodically scheduled build. The practicalities of doing this in a multi-developer environment of rapid commits are such that it is usual to trigger a short time after each commit, then to start a build when either this timer expires, or after a rather longer interval since the last buil d. Note that since each new commit resets the timer used for the short time trigger, this is the same technique used in many button debouncing algorithms ex 15  . In this way the commit events are debounced to prevent unnecessary builds between a series of rapid-fire commits. Many automated tools offer this scheduling automatically. Another factor is the need for a version control system that supports atomic commits , i.e. all of a developers changes may be seen as a single commit operation. There is no point in trying to build from only half of the changed files. To achieve these objectives, continuous integration relies on the following principles. Maintain a code repository  edit  Main article Version control This practice advocates the use of a revision control system for the projects source code. All artifacts required to build the project should be placed in the repository. In this practice and in the revision control community, the convention is that the system should be buildable from a fresh checkout and not require additional dependencies. Extreme Programming advocate Martin Fowler also mentions that where branching is supported by tools, its use should be minimised. 14  Instead, it is preferred for changes to be integrated rather than for multiple versions of the software to be maintained simultaneously. The mainline or trunk  should be the place for the working version of the software. Automate the build  edit  Main article Build automation A single command should have the capability of building the system. Many build tools, such as make , have existed for many years. Other more recent tools are frequently used in continuous integration environments. Automation of the build should include automating the integration, which often includes deployment into a production-like environment . In many cases, the build script not only compiles binaries, but also generates documentation, website pages, statistics and distribution media such as Debian DEB , Red Hat RPM or Windows MSI files. Make the build self-testing  edit  Once the code is built, all tests should run to confirm that it behaves as the developers expect it to behave. 16  Everyone commits to the baseline every day  edit  By committing regularly, every committer can reduce the number of conflicting changes. Checking in a weeks worth of work runs the risk of conflicting with other features and can be very difficult to resolve. Early, small conflicts in an area of the system cause team members to communicate about the change they are making. 1  Committing all changes at least once a day once per feature built is generally considered part of the definition of Continuous Integration. In addition performing a nightly build is generally recommended.  citation needed  These are lower bounds the typical frequency is expected to be much higher. Every commit to baseline should be built  edit  The system should build commits to the current working version to verify that they integrate correctly. A common practice is to use Automated Continuous Integration, although this may be done manually. Automated Continuous Integration employs a continuous integration server or daemon to monitor the revision control system for changes, then automatically run the build process. Keep the build fast  edit  The build needs to complete rapidly, so that if there is a problem with integration, it is quickly identified. Test in a clone of the production environment  edit  Main article Test environment Having a test environment can lead to failures in tested systems when they deploy in the production environment because the production environment may differ from the test environment in a significant way. However, building a replica of a production environment is cost prohibitive. Instead, the test environment, or a separate pre-production environment staging should be built to be a scalable version of the production environment to alleviate costs while maintaining technology stack composition and nuances. Within these test environments, service virtualisation is commonly used to obtain on-demand access to dependencies e.g., APIs, third-party applications, services, mainframes , etc. that are beyond the teams control, still evolving, or too complex to configure in a virtual test lab. Make it easy to get the latest deliverables  edit  Making builds readily available to stakeholders and testers can reduce the amount of rework necessary when rebuilding a feature that doesnt meet requirements. Additionally, early testing reduces the chances that defects survive until deployment. Finding errors earlier can reduce the amount of work necessary to resolve them. All programmers should start the day by updating the project from the repository. That way, they will all stay up to date. Everyone can see the results of the latest build  edit  It should be easy to find out whether the build breaks and, if so, who made the relevant change and what that change was. Automate deployment  edit  Most CI systems allow the running of scripts after a build finishes. In most situations, it is possible to write a script to deploy the application to a live test server that everyone can look at. A further advance in this way of thinking is continuous deployment , which calls for the software to be deployed directly into production, often with additional automation to prevent defects or regressions. 17  18  Costs and benefits  edit  The neutrality of this section is disputed . Relevant discussion may be found on the talk page . Please do not remove this message until conditions to do so are met .  May 2016   Learn how and when to remove this template message  This section needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Continuous integration     news    newspapers    books    scholar    JSTOR  May 2016   Learn how and when to remove this template message  Continuous integration is intended to produce benefits such as Integration bugs are detected early and are easy to track down due to small change sets. This saves both time and money over the lifespan of a project. Avoids last-minute chaos at release dates, when everyone tries to check in their slightly incompatible versions When unit tests fail or a bug emerges, if developers need to revert the codebase to a bug-free state without debugging , only a small number of changes are lost because integration happens frequently Constant availability of a current build for testing, demo, or release purposes Frequent code check-in pushes developers to create modular, less complex code  citation needed  With continuous automated testing benefits can include Enforces discipline of frequent automated testing Immediate feedback on system-wide impact of local changes Software metrics generated from automated testing and CI such as metrics for code coverage , code complexity , and feature completeness  focus developers on developing functional, quality code, and help develop momentum in a team  citation needed  Some downsides of continuous integration can include Constructing an automated test suite requires a considerable amount of work, including ongoing effort to cover new features and follow intentional code modifications. Testing is considered a best practice for software development in its own right, regardless of whether or not continuous integration is employed, and automation is an integral part of project methodologies like test-driven development . Continuous integration can be performed without any test suite, but the cost of quality assurance to produce a releasable product can be high if it must be done manually and frequently. There is some work involved to set up a build system , and it can become complex, making it difficult to modify flexibly. 19  However, there are a number of continuous integration software projects , both proprietary and open-source, which can be used. Continuous Integration is not necessarily valuable if the scope of the project is small or contains untestable legacy code. Value added depends on the quality of tests and how testable the code really is. 20  Larger teams means that new code is constantly added to the integration queue, so tracking deliveries while preserving quality is difficult and builds queueing up can slow down everyone. 20  With multiple commits and merges a day, partial code for a feature could easily be pushed and therefore integration tests will fail until the feature is complete. 20  Safety and mission-critical development assurance e.g., DO-178C , ISO 26262  require rigorous documentation and in-process review that are difficult to achieve using Continuous Integration. This type of life cycle often requires additional steps be completed prior to product release when regulatory approval of the product is required. See also  edit  Application release automation Build light indicator Comparison of continuous integration software Continuous design Continuous testing Multi-stage continuous integration Rapid application development References  edit   a b Continuous Integration . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Booch, Grady 1991. Object Oriented Design With Applications . Benjamin Cummings . p.  209. ISBN   9780805300918 . Retrieved 18 August 2014 .  Embracing Change with Extreme Programming. CiteSeerX   10.1.1.617.9195 . Cite journal requires journal  help   Cunningham, Ward 5 August 2009. Integration Hell . WikiWikiWeb . Retrieved 19 September 2009 .  What is Continuous Integration . Amazon Web Services .  G. E. Kaiser, D. E. Perry and W. M. Schell, Infuse fusing integration test management with change management, 1989 Proceedings of the Thirteenth Annual International Computer Software  Applications Conference, Orlando, FL, USA, 1989, pp. 552-558. doi  10.1109CMPSAC.1989.65147  Booch, Grady December 1998. Object-Oriented Analysis and Design with applications 2nd edition, 15th printing PDF . www.cvauni.edu . Retrieved 2 December 2014 .  Fowler, Martin 1 May 2006. Continuous Integration . martinfowler.com . Retrieved 9 January 2014 .  Beck, Kent 28 March 1998. Extreme Programming A Humanistic Discipline of Software Development . Fundamental Approaches to Software Engineering First International Conference, FASE98, Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS98, Lisbon, Portugal, 28 March  4 April 1998, Proceedings, Volume 1 . Lisbon Springer . p.  4. ISBN   9783540643036 .  Beck, Kent 1999. Extreme Programming Explained . ISBN   978-0-201-61641-5 .  A Brief History of DevOps, Part III Automated Testing and Continuous Integration . CircleCI . 1 February 2018 . Retrieved 19 May 2018 .  Brauneis, David 1 January 2010.  OSLC  Possible new Working Group  Automation . open-services.net Community Mailing list . Retrieved 16 February 2010 .  Taylor, Bradley. Rails Deployment and Automation with ShadowPuppet and Capistrano . Rails machine  World wide web log. Archived from the original on 2 December 2012 . Retrieved 16 February 2010 . Cite uses deprecated parameter dead-url  help   a b Fowler, Martin . Practices . Continuous Integration article . Retrieved 29 November 2015 .  Arduino - Debounce .  Reaching true agility with continuous integration .  Ries, Eric 30 March 2009. Continuous deployment in 5 easy steps . Radar . OReilly . Retrieved 10 January 2013 .  Fitz, Timothy 10 February 2009. Continuous Deployment at IMVU Doing the impossible fifty times a day . Wordpress . Retrieved 10 January 2013 .  Laukkanen, Eero 2016. Problems, causes and solutions when adopting continuous deliveryA systematic literature review PDF . Information and Software Technology . 82  5579. doi  10.1016j.infsof.2016.10.001  via Elsevier Science Direct.  a b c Debbiche, Adam. Assessing challenges of continuous integration in the context of software requirements breakdown a case study PDF . Further reading  edit  Duvall, Paul M. 2007. Continuous Integration. Improving Software Quality and Reducing Risk . Addison-Wesley. ISBN   978-0-321-33638-5 . External links  edit  Fowler, Martin. Continuous Integration . Continuous Integration wiki a collegial discussion. C2. Cite journal requires journal  help  Richardson, Jared. Continuous Integration The Cornerstone of a Great Shop introduction. Flowers, Jay. A Recipe for Build Maintainability and Reusability . Duvall, Paul 4 December 2007. Developer works . Version lifecycle . MediaWiki. Continuous Integration in the Cloud PDF . CrossTalk. 2016. Continuous Integration Introduction . Katalon. 2019. Bugayenko, Yegor.  Why Continuous Integration Doesnt Work Retrieved from  httpsen.wikipedia.orgwindex.phptitleContinuous_integration oldid914194436  Categories  Agile software development Continuous integration Extreme programming Types of tools used in software development Hidden categories CS1 errors missing periodical CS1 errors deprecated parameters Articles lacking in-text citations from July 2016 All articles lacking in-text citations Use dmy dates from May 2017 EngvarB from February 2019 All articles with unsourced statements Articles with unsourced statements from December 2013 Articles to be expanded from August 2014 All articles to be expanded Articles using small message boxes Articles needing cleanup from May 2015 All pages needing cleanup Articles containing how-to sections Articles with unsourced statements from April 2012 NPOV disputes from May 2016 All NPOV disputes Articles needing additional references from May 2016 All articles needing additional references Articles with unsourced statements from November 2009