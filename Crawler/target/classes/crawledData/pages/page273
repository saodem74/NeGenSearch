Software development process From Wikipedia, the free encyclopedia    Redirected from Software development methodology  Jump to navigation Jump to search This article has multiple issues. Please help improve it or discuss these issues on the talk page .  Learn how and when to remove these template messages  This article may require cleanup to meet Wikipedias quality standards . The specific problem is Section re-structuring in progress, suggestions welcome. Please help improve this article if you can.  July 2017   Learn how and when to remove this template message  This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Software development process     news    newspapers    books    scholar    JSTOR  December 2010   Learn how and when to remove this template message   Learn how and when to remove this template message  Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e In software engineering , a software development process is the process of dividing software development work into distinct phases to improve design , product management , and project management . It is also known as a software development life cycle  SDLC . The methodology may include the pre-definition of specific deliverables and artifacts that are created and completed by a project team to develop or maintain an application. 1  Most modern development processes can be vaguely described as agile . Other methodologies include waterfall , prototyping , iterative and incremental development , spiral development , rapid application development , and extreme programming . Some people  who  consider a life-cycle model a more general term for a category of methodologies and a software development process a more specific term to refer to a specific process chosen by a specific organization. For example, there are many specific software development processes that fit the spiral life-cycle model. The field is often considered a subset of the systems development life cycle . Contents 1 History 2 Practices 2.1 Continuous integration 2.2 Prototyping 2.3 Incremental development 2.4 Rapid application development 3 Methodologies 3.1 Agile development 3.2 Waterfall development 3.3 Spiral development 3.4 Offshore development 3.5 Other 4 Process meta-models 5 In practice 6 See also 7 References 8 External links History  edit  The software development methodology also known as SDM framework didnt emerge until the 1960s. According to Elliott 2004 the systems development life cycle SDLC can be considered to be the oldest formalized methodology framework for building information systems . The main idea of the SDLC has been to pursue the development of information systems in a very deliberate, structured and methodical way, requiring each stage of the life cyclefrom inception of the idea to delivery of the final systemto be carried out rigidly and sequentially 2  within the context of the framework being applied. The main target of this methodology framework in the 1960s was to develop large scale functional business systems in an age of large scale business conglomerates. Information systems activities revolved around heavy data processing and number crunching routines. 2  Methodologies, processes, and frameworks range from specific proscriptive steps that can be used directly by an organization in day-to-day work, to flexible frameworks that an organization uses to generate a custom set of steps tailored to the needs of a specific project or group. In some cases a sponsor or maintenance organization distributes an official set of documents that describe the process. Specific examples include 1970s Structured programming since 1969 Cap Gemini SDM , originally from PANDATA, the first English translation was published in 1974. SDM stands for System Development Methodology 1980s Structured systems analysis and design method SSADM from 1980 onwards Information Requirement AnalysisSoft systems methodology 1990s Object-oriented programming OOP developed in the early 1960s, and became a dominant programming approach during the mid-1990s Rapid application development RAD, since 1991 Dynamic systems development method DSDM, since 1994 Scrum , since 1995 Team software process , since 1998 Rational Unified Process RUP, maintained by IBM since 1998 Extreme programming , since 1999 2000s Agile Unified Process AUP maintained since 2005 by Scott Ambler Disciplined agile delivery DAD Supersedes AUP 2010s Scaled Agile Framework SAFe Large-Scale Scrum LeSS DevOps It is notable that since DSDM in 1994, all of the methodologies on the above list except RUP have been agile methodologies - yet many organisations, especially governments, still use pre-agile processes often waterfall or similar. Software process and software quality are closely interrelated some unexpected facets and effects have been observed in practice 3  Since the early 2000s scaling agile delivery processes has become the biggest challenge for teams using agile processes. 4  Among these another software development process has been established in open source . The adoption of these best practices known and established processes within the confines of a company is called inner source . Practices  edit  Several software development approaches have been used since the origin of information technology, in two main categories  citation needed  . Typically an approach or a combination of approaches is chosen by management or a development team  citation needed  . Traditional methodologies such as waterfall that have distinct phases are sometimes known as software development life cycle SDLC methodologies  citation needed  , though this term could also be used more generally to refer to any methodology. A life cycle approach with distinct phases is in contrast to Agile approaches which define a process of iteration, but where design, construction, and deployment of different pieces can occur simultaneously  citation needed  . Continuous integration  edit  Main article Continuous integration Continuous integration is the practice of merging all developer working copies to a shared mainline several times a day. 5  Grady Booch first named and proposed CI in his 1991 method , 6  although he did not advocate integrating several times a day. Extreme programming XP adopted the concept of CI and did advocate integrating more than once per day  perhaps as many as tens of times per day. Prototyping  edit  Software prototyping is about creating prototypes, i.e. incomplete versions of the software program being developed. The basic principles are 1  Prototyping is not a standalone, complete development methodology, but rather an approach to try out particular features in the context of a full methodology such as incremental, spiral, or rapid application development RAD. Attempts to reduce inherent project risk by breaking a project into smaller segments and providing more ease-of-change during the development process. The client is involved throughout the development process, which increases the likelihood of client acceptance of the final implementation. While some prototypes are developed with the expectation that they will be discarded, it is possible in some cases to evolve from prototype to working system. A basic understanding of the fundamental business problem is necessary to avoid solving the wrong problems, but this is true for all software methodologies. Incremental development  edit  Main article Iterative and incremental development Various methods are acceptable for combining linear and iterative systems development methodologies, with the primary objective of each being to reduce inherent project risk by breaking a project into smaller segments and providing more ease-of-change during the development process. There are three main variants of incremental development 1  A series of mini-Waterfalls are performed, where all phases of the Waterfall are completed for a small part of a system, before proceeding to the next increment, or Overall requirements are defined before proceeding to evolutionary, mini-Waterfall development of individual increments of a system, or The initial software concept, requirements analysis, and design of architecture and system core are defined via Waterfall, followed by incremental implementation, which culminates in installing the final version, a working system. Rapid application development  edit  Rapid Application Development RAD Model Rapid application development RAD is a software development methodology, which favors iterative development and the rapid construction of prototypes instead of large amounts of up-front planning. The planning of software developed using RAD is interleaved with writing the software itself. The lack of extensive pre-planning generally allows software to be written much faster, and makes it easier to change requirements. The rapid development process starts with the development of preliminary data models and business process models using structured techniques . In the next stage, requirements are verified using prototyping, eventually to refine the data and process models. These stages are repeated iteratively further development results in a combined business requirements and technical design statement to be used for constructing new systems. 7  The term was first used to describe a software development process introduced by James Martin in 1991. According to Whitten 2003, it is a merger of various structured techniques , especially data-driven information technology engineering , with prototyping techniques to accelerate software systems development. 7  The basic principles of rapid application development are 1  Key objective is for fast development and delivery of a high quality system at a relatively low investment cost. Attempts to reduce inherent project risk by breaking a project into smaller segments and providing more ease-of-change during the development process. Aims to produce high quality systems quickly, primarily via iterative Prototyping at any stage of development, active user involvement, and computerized development tools. These tools may include Graphical User Interface GUI builders, Computer Aided Software Engineering CASE tools, Database Management Systems DBMS, fourth-generation programming languages , code generators, and object-oriented techniques. Key emphasis is on fulfilling the business need, while technological or engineering excellence is of lesser importance. Project control involves prioritizing development and defining delivery deadlines or timeboxes. If the project starts to slip, emphasis is on reducing requirements to fit the timebox, not in increasing the deadline. Generally includes joint application design JAD, where users are intensely involved in system design , via consensus building in either structured workshops, or electronically facilitated interaction. Active user involvement is imperative. Iteratively produces production software, as opposed to a throwaway prototype. Produces documentation necessary to facilitate future development and maintenance. Standard systems analysis and design methods can be fitted into this framework. Methodologies  edit  Agile development  edit  Main article Agile software development Agile software development refers to a group of software development methodologies based on iterative development, where requirements and solutions evolve via collaboration between self-organizing cross-functional teams. The term was coined in the year 2001 when the Agile Manifesto was formulated. Agile software development uses iterative development as a basis but advocates a lighter and more people-centric viewpoint than traditional approaches. Agile processes fundamentally incorporate iteration and the continuous feedback that it provides to successively refine and deliver a software system. There are many agile methodologies, including Dynamic systems development method DSDM Kanban Scrum Waterfall development  edit  Main article Waterfall model The activities of the software development process represented in the waterfall model . There are several other models to represent this process. The waterfall model is a sequential development approach, in which development is seen as flowing steadily downwards like a waterfall through several phases, typically Requirements analysis resulting in a software requirements specification Software design Implementation Testing Integration , if there are multiple subsystems Deployment or Installation  Maintenance The first formal description of the method is often cited as an article published by Winston W. Royce 8  in 1970 although Royce did not use the term waterfall in this article. Royce presented this model as an example of a flawed, non-working model. 9  The basic principles are 1  Project is divided into sequential phases, with some overlap and splashback acceptable between phases. Emphasis is on planning, time schedules, target dates, budgets and implementation of an entire system at one time. Tight control is maintained over the life of the project via extensive written documentation, formal reviews, and approvalsignoff by the user and information technology management occurring at the end of most phases before beginning the next phase. Written documentation is an explicit deliverable of each phase. The waterfall model is a traditional engineering approach applied to software engineering. A strict waterfall approach discourages revisiting and revising any prior phase once it is complete. This inflexibility in a pure waterfall model has been a source of criticism by supporters of other more flexible models. It has been widely blamed for several large-scale government projects running over budget, over time and sometimes failing to deliver on requirements due to the Big Design Up Front approach. Except when contractually required, the waterfall model has been largely superseded by more flexible and versatile methodologies developed specifically for software development. See Criticism of Waterfall model . Spiral development  edit  Spiral model Boehm, 1988 Main article Spiral model In 1988, Barry Boehm published a formal software system development spiral model, which combines some key aspect of the waterfall model and rapid prototyping methodologies, in an effort to combine advantages of top-down and bottom-up concepts. It provided emphasis in a key area many felt had been neglected by other methodologies deliberate iterative risk analysis, particularly suited to large-scale complex systems. The basic principles are 1  Focus is on risk assessment and on minimizing project risk by breaking a project into smaller segments and providing more ease-of-change during the development process, as well as providing the opportunity to evaluate risks and weigh consideration of project continuation throughout the life cycle. Each cycle involves a progression through the same sequence of steps, for each part of the product and for each of its levels of elaboration, from an overall concept-of-operation document down to the coding of each individual program. 10  Each trip around the spiral traverses four basic quadrants 1 determine objectives, alternatives, and constraints of the iteration 2 evaluate alternatives Identify and resolve risks 3 develop and verify deliverables from the iteration and 4 plan the next iteration. 11  Begin each cycle with an identification of stakeholders and their win conditions, and end each cycle with review and commitment. 12  Offshore development  edit  Main article Offshore custom software development Offshore custom software development aims at dispatching the software development process over various geographical areas to optimize project spending by capitalizing on countries with lower salaries and operating costs. Geographically distributed teams can be integrated at any point of the software development process through custom hybrid models. 13  Other  edit  Other high-level software project methodologies include Behavior-driven development and business process management 14  Chaos model - The main rule is always resolve the most important issue first. Incremental funding methodology - an iterative approach Lightweight methodology - a general term for methods that only have a few rules and practices Structured systems analysis and design method - a specific version of waterfall Slow programming, as part of the larger Slow Movement , emphasizes careful and gradual work without or minimal time pressures. Slow programming aims to avoid bugs and overly quick release schedules. V-Model software development - an extension of the waterfall model Unified Process UP is an iterative software development methodology framework, based on Unified Modeling Language UML. UP organizes the development of software into four phases, each consisting of one or more executable iterations of the software at that stage of development inception, elaboration, construction, and guidelines. Many tools and products exist to facilitate UP implementation. One of the more popular versions of UP is the Rational Unified Process RUP. Process meta-models  edit  Some  process models  are abstract descriptions for evaluating, comparing, and improving the specific process adopted by an organization. ISOIEC 12207 is the international standard describing the method to select, implement, and monitor the life cycle for software. The Capability Maturity Model Integration CMMI is one of the leading models and based on best practice. Independent assessments grade organizations on how well they follow their defined processes, not on the quality of those processes or the software produced. CMMI has replaced CMM . ISO 9000 describes standards for a formally organized process to manufacture a product and the methods of managing and monitoring progress. Although the standard was originally created for the manufacturing sector, ISO 9000 standards have been applied to software development as well. Like CMMI, certification with ISO 9000 does not guarantee the quality of the end result, only that form alized business processes have been followed. ISOIEC 15504 Information technology  Process assessment also known as Software Process Improvement Capability Determination SPICE, is a framework for the assessment of software processes. This standard is aimed at setting out a clear model for process comparison. SPICE is used much like CMMI. It models processes to manage, control, guide and monitor software development. This model is then used to measure what a development org anization or project team actually does during software development. This information is analyzed to identify weaknesses and drive improvement. It also identifies strengths that can be continued or integrated into common practice for that organization or team. ISOIEC 24744 Software Engineering  Metamodel for Development Methodologies , is a powertype-based metamodel for software development methodologies. SPEM 2.0 by the Object Management Group Soft systems methodology - a general method for improving management processes Method engineering - a general method for improving information system processes In practice  edit  The three basic approaches applied to software development methodology frameworks. A variety of such frameworks have evolved over the years, each with its own recognized strengths and weaknesses. One software development methodology framework is not necessarily suitable for use by all projects. Each of the available methodology frameworks are best suited to specific kinds of projects, based on various technical, organizational, project and team considerations . 1  Software development organizations implement process methodologies to ease the process of development. Sometimes, contractors may require methodologies employed, an example is the U.S. defense industry , which requires a rating based on process models to obtain contracts. The international standard for describing the method of selecting, implementing and monitoring the life cycle for software is ISOIEC 12207 . A decades-long goal has been to find repeatable, predictable processes that improve productivity and quality. Some try to systematize or formalize the seemingly unruly task of designing software. Others apply project management techniques to designing software. Large numbers of software projects do not meet their expectations in terms of functionality, cost, or delivery schedule - see List of failed and overbudget custom software projects for some notable examples. Organizations may create a Software Engineering Process Group SEPG, which is the focal point for process improvement. Composed of line practitioners who have varied skills, the group is at the center of the collaborative effort of everyone in the organization who is involved with software engineering process improvement. A particular development team may also agree to programming environment details, such as which integrated development environment is used, and one or more dominant programming paradigms , programming style rules, or choice of specific software libraries or software frameworks . These details are generally not dictated by the choice of model or general methodology. Software development life cycle SDLC See also  edit  Systems development life cycle Computer-aided software engineering some of these tools support specific methodologies List of software development philosophies Outline of software engineering OpenUP Project management Software development Software development effort estimation Software release life cycle Top-down and bottom-up designComputer science References  edit   a b c d e f g Centers for Medicare  Medicaid Services CMS Office of Information Service 2008. Selecting a development approach . Webarticle. United States Department of Health and Human Services HHS. Re-validated March 27, 2008. Retrieved 27 Oct 2008.  a b Geoffrey Elliott 2004 Global Business Information Technology an integrated systems approach . Pearson Education. p.87.  Suryanarayana, Girish 2015. Software Process versus Design Quality Tug of War. IEEE Software . 32 4 711. doi  10.1109MS.2015.87 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  saeeda, Hina Khalid, Hannan Ahmed, Mukhtar Sameer, Abu Arif, Fahim 2015-09-01. Systematic Literature Review of Agile Scalability for Large Scale Projects . ResearchGate . 6 9. CiteSeerX   10.1.1.695.4994 . doi  10.14569IJACSA.2015.060908 . ISSN   2156-5570 .  Continuous Integration .  Booch, Grady 1991. Object Oriented Design With Applications . Benjamin Cummings . p.  209. ISBN   9780805300918 . Retrieved 18 August 2014 .  a b Whitten, Jeffrey L.  Lonnie D. Bentley , Kevin C. Dittman . 2003. Systems Analysis and Design Methods . 6th edition. ISBN   0-256-19906-X .  Wasserfallmodell  Entstehungskontext , Markus Rerych, Institut fr Gestaltungs- und Wirkungsforschung, TU-Wien. Accessed on line November 28, 2007.  Conrad Weisert, Waterfall methodology theres no such thing  Barry Boehm 1996., A Spiral Model of Software Development and Enhancement . In ACM SIGSOFT Software Engineering Notes ACM 11414-24, August 1986  Richard H. Thayer, Barry W. Boehm 1986. Tutorial software engineering project management . Computer Society Press of the IEEE. p.130  Barry W. Boehm 2000. Software cost estimation with Cocomo II Volume 1 .  Stephanie Overby 1 October 2012. 7 Tips to Offshore Agile Development . Cio.com . Retrieved 12 March 2019 .  Lbke, Daniel van Lessen, Tammo 2016. Modeling Test Cases in BPMN for Behavior-Driven Development. IEEE Software . 33 5 1521. doi  10.1109MS.2016.117 . External links  edit  Wikimedia Commons has media related to Software development methodology . Selecting a development approach at cms.hhs.gov. Gerhard Fischer, The Software Technology of the 21st Century From Software Reuse to Collaborative Software Design , 2001 Subway map of agile practices at Agile Alliance v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleSoftware_development_process oldid908833796  Categories  Software development process Methodology Software engineering Hidden categories Articles needing cleanup from July 2017 All pages needing cleanup Cleanup tagged articles with a reason field from July 2017 Wikipedia pages needing cleanup from July 2017 Articles needing additional references from December 2010 All articles needing additional references Articles with multiple maintenance issues All articles with specifically marked weasel-worded phrases Articles with specifically marked weasel-worded phrases from June 2019 All articles with unsourced statements Articles with unsourced statements from February 2017 Commons category link is on Wikidata