Software patent debate From Wikipedia, the free encyclopedia Jump to navigation Jump to search For general information on software patents, see software patent . Computer programs, software and patent law Topics Software patent Debate Free software List of patents Treaties TRIPS Agreement Patent Cooperation Treaty European Patent Convention Countries Canada United Kingdom United States Case law European Patent Office United Kingdom Related topics Business methods This box view talk edit The software patent debate is the argument about the extent to which, as a matter of public policy , it should be possible to patent software and computer-implemented inventions. Policy debate on software patents has been active for years. 1  The opponents to software patents have gained more visibility with fewer resources through the years than their pro-patent opponents. 2  Arguments and critiques have been focused mostly on the economic consequences of software patents. One aspect of the debate has focused on the proposed European Union directive on the patentability of computer-implemented inventions , also known as the CII Directive or the Software Patent Directive, which was ultimately rejected by the EU Parliament in July 2005. Contents 1 Arguments for patentability 1.1 Public disclosure 1.2 Economic benefit 1.3 Encouragement of innovation 1.4 Copyright limitations 1.5 Protection for small companies 1.6 Hardware patents analogy 2 Arguments against patentability 2.1 Software is math 2.2 Software encourages patent thickets 2.3 Hinders research and development 2.4 Hinders innovation 2.5 Cost and loss of R D funds 2.6 Copyright 2.7 Software is different 2.8 Trivial patents 2.9 Open source disadvantage 2.10 Software patents usefulness as an information source is limited 2.11 Long patent pendencies 2.12 Patent trolls 2.13 Disproportionately harms startups 3 U.S. Supreme Court decisions 3.1 Bilski case 3.2 Mayo case 3.3 Alice case 3.4 Subsequent developments 4 See also 5 References Arguments for patentability  edit  There are several arguments commonly given in defense of software patents or defense of the patentability of computer-implemented inventions. Public disclosure  edit  Through public disclosure, patents encourage the open sharing of information and additional transparency about legal exposure . 3  Through public disclosure, patents encourage the transfer of mechanical technology , which may apply more broadly. 3  Economic benefit  edit  Software patents resulting from the production of patentable ideas can increase the valuation of small companies. 4  Software patents increase the return on investment made, which includes government funded research. 5  Encouragement of innovation  edit  The ability to patent new software developed as a result of research encourages investment in software-related research by increasing the potential return of investment of said research. 6  Copyright limitations  edit  Main article Copyright infringement of software Patents protect functionality. Copyright on the other hand only protects expression. Substantial modification to an original work, even if it performs the same function, would not be prevented by copyright. To prove copyright infringement also requires the additional hurdle of proving copying, which is not necessary for patent infringement. Copyright law protects unique expressions, while patent law protects inventions, which in the case of software, are algorithms  copyright cannot protect a novel means of accomplishing a function, merely the syntax of one such means. 7  This means that patents incentivize projects that are unique and innovative in functionality rather than simply form. Copyrights, in turn, only incentivize uniqueness in form. 8  Protection for small companies  edit  Software patents can afford smaller companies market protection by preventing larger companies from stealing work done by a smaller organization, leveraging their greater resources to go to market before the smaller company can. 9  Hardware patents analogy  edit  Hardware and software are sometimes interchangeable. If people can patent hardware, then ideas describing software implemented by that hardware should also be patentable. 10  Arguments against patentability  edit  Opponents of software patents argue that Software is math  edit  A program is the transcription of an algorithm in a programming language . Since every  Turing-complete  programming language implements Churchs lambda calculus by virtue of the Church-Turing thesis , a program is thus the transcription of a mathematical function. Math is not patentable. Therefore, neither is software. 11  Software encourages patent thickets  edit  A patent thicket is a dense web of patents that companies must decipher to develop new technology. There are various types of patent thickets such as when a single innovation is protected by multiple patent holders or when a product is covered by numerous patents. The consequences of patent thickets are increased difficulty of innovation, complex cross-licensing relations between companies, an d discouragement of newcomers from entering the software industry. 12  Hinders research and development  edit  Some scientific studies and expert reviews have concluded that patent systems paradoxically hinder technological progress 13  and allows monopolies and powerful companies to exclude others from industrial science in a manner that is irreconcilable with anti-trust laws. 14  Gary Becker , Nobel Prizewinning economist, argues, Their exclusion from the patent system would discourage some software innovations, but the saving from litigation costs over disputed patent rights would more than compensate the economy for that cost. 15  Hinders innovation  edit  The Electronic Frontier Foundation published the Defend Innovation whitepaper after doing two and a half years of research on software patents. They concluded that many overbroad software patents are being awarded, which is actually stifling innovation. 16  Interoperability is thought to promote innovation, and patent systems have the potential to block the development of such technologies. 17  There has been a lack of empirical evidence to suggest that patents have any positive effect on innovation, and furthermore, the system primarily encourages failing monopolists to inhibit competition by blocking innovation. 18  Cost and loss of R D funds  edit  Should a software developer hire a patent attorney to perform a clearance search and provide a clearance opinion , there is no guarantee that the search could be complete. Different patents and published patent applications may use different words to describe the same concepts and thus patents that cover different aspects of the invention may not show up in a search. The cost of a clearance search may not prove cost effective to businesses with smaller budgets or individual inventors. 19  For the U.S. the economic benefit is dubious. A study in 2008 found that American public companies total profits from patents excluding pharmaceuticals in 1999 were about 4 billion, but that the associated litigation costs were 14 billion. 20  Software developers and hardware manufacturers may be forced to pay license fees for standards that are covered by patents the so-called essential patents . Some examples are H.264 , MP3 and GIF that uses the patented LZW compression algorithm and JPEG for graphics. Copyright  edit  It is argued that traditional copyright has provided sufficient protection to facilitate massive investment in software development. 21  Copyright is the right of an authors to prevent others from copying their creative work without a license. Thus the author of a particular piece of software can sue someone that copies that software without a license. Copyright protection is given automatically and immediately without the need to register the copyright with a government, although registration does strengthen protectio n. Copyrighted material can also be kept secret. Software is different  edit  See also artificial scarcity Software programs are different from other electromechanical devices because they are designed solely in terms of their function. The inventor of a typical electromechanical device must design new physical features to qualify for a patent. On the other hand, a software developer need only design new functions to create a working embodiment of the program. 22  Software is a component of a machine. The computers hardware is generic it performs functions that are common to all of the software that is capable of being executed on the computer. Each software program that is capable of executing on the computer is a component of the computer. 22  Computers design and build the structure of executable software. Thus, software developers do not design the executable softwares physical structure because they merely provide the functional terms. 22  Trivial patents  edit  Anecdotal evidence suggests that some software patents cover either trivial inventions or inventions that would have been obvious to persons of ordinary skill in the art at the time the invention was made. 23  Patent examiners rarely have a comprehensive knowledge of the specific technologies disclosed in the patent applications they examine. This is in large part due to the enormous number of micro-niches in the software field and the relatively limited number of examiners. So, patents are sometimes allowed on inventions that appear to be trivial extensions of existing technologies. 24  Open source disadvantage  edit  Main article Software patents and free software The free and open source software community, and many companies that use and contribute to open source oppose software patents because they can impede or prohibit the distribution of free software. They contend that patents threaten to undermine FLOSS, regardless of innovations produced by FLOSS collaborations. Software patents usefulness as an information source is limited  edit  Some patent disclosures in the software field are not readable to some programmers as a result, patents are rarely used as a source of technical information by software developers. 25  Long patent pendencies  edit  In the software industry, product lifecycles churn rapidly a product can run through its entire lifecycle and become outdated during the time it takes a patent filed on the invention underlying it to issue. 26   Chapter 3, p 45 According to the United States Patent and Trademark Office s official statistics for 2015, the average pendency for patent applications categorized under Computer Architecture, Software, and Information Security was approximately two and a half years, exceeding the pendencies of all other patent categories. 27  The average total pendency of European technology patents in 2015 was approximately two and a half years. Technology patents in China, Korea, Japan, and Europe had first action pendencies of approximately one year compared to those in the United States, with first action pendencies of under two years. Europe and the United States have the longest total pendencies of around 26 m onths, while China, Korea, and Japan have shorter total pendencies from 15 to 21 months. 28  Patent trolls  edit  Software companies are becoming patent hoarders, spending billions of dollars on accumulating patents and even more on litigations and settlements  resources could be better put to use in creating new and innovative software advances. Too many patents are given out, making it difficult for developers to create new software due to possibility of accidental infringement. Enginee rs say it impedes their creativity. 29  In 2016 IBM earned 8,088 U.S. patents thus earning the most grants from the U.S. Patent Office for the 24th year in a row. They bested their closest tech rival by more than 2,500 patents. Behemoths like IBM, Google, and Oracle gather as many patents in the fields considered hot such as Artificial Intelligence to limit the innovation potential of smaller firms. 30  Patent claims were part of the Oracle America, Inc. v. Google, Inc. case, where Oracle claimed that Googles implementation of Java within Android violated Oracles copyright and patents. Duke Computer Science Professor Owen Astrachan was involved in the case. Not only large companies are patent hoarders. NPEs Non-Practising Entities are businesses that assert patents through litigation to achieve revenues from alleged infringers without practising or commercialising the technology covered by the patents they hold. NPEs are very effective in their litigations. Damages awards for NPEs almost are 3 times greater than practicing entit ies over the last 5 years. 31  Disproportionately harms startups  edit  Patent assertion entities  patent trolls  disproportionately affect startups, which are important for job creation and innovation. Companies with less than 100M annual revenue represent two-thirds of unique defendants in troll suits. A large percentage of startups reported that being sued by trolls resulted in significant operational impact. 32  U.S. Supreme Court decisions  edit  Several Supreme Court decisions since 2000, as well as the Federal Circuit and district court decisions interpreting and implementing them, have dramatically impacted the status of software patents in the United States. They have particularly affected many thousands of business-method patents that issued as a result of Federal Circuit decisions in the 1990s. The two principal Supreme Court decisions were Bilski v. Kappos and Alice v. CLS Bank , the latter of which confirmed the applicability of the earlier decision Mayo v. Prometheus to computer-related inventions in which a computer was used to implement an abstract principle or preexisting business practice. These cases are the subject of separate Wikipedia articles, which discuss the background and rulings in these cases in more detail, and supply authorities supporting the generalizations about those cases that follow. Additional detail is found in th e Wikipedia article Software patents under United States patent law , along with supporting citations not repeated in this summary of those articles. Bilski case  edit  The Bilski case involved a patent application on methods for hedging against commodity price fluctuations, which the PTO had rejected. The Federal Circuit , in In re Bilski , upheld the PTOs rejection on the grounds that the claims failed the machine-or-transformation test , which the court held should be used as the sole test of patent eligibility. The court did not hold that all business methods are patent ineligible, though a minority of the judges would have ruled that business methods are not properly the subject of patents. The Supreme Court affirmed the judgment of ineligibility, in Bilski v. Kappos , but on more general, and less articulated in detail, grounds of undue abstractness. It rejected the Federal Circuits elevation of the machine-or-transformation test as the sole test of patent eligibility, saying that rather it was simply a useful clue. The 5-4 majority refused to hold that all business methods were incapable of being patented, but four justices would have established such a rule. A concurring opinion pointed out that the Court was unanimous, however, as to many issues in the Bilski case, including a rejection of the Federal Circuits late 1990s State Street Bank decision, which allowed patents on any advance, technical or nontechnical and in that case a numerical financial calculation of stock price changes that produces a useful, concrete and tangible result. The Supreme Courts Bilski decision was criticized because of its lack of detailed guidance on how to determine whether a claim was directed to an abstract idea. Nonetheless, it provided some clarification and affirmed the Federal Circuits taking a new direction in its software-related patent cases. Mayo case  edit  In Mayo v. Prometheus , the Supreme Court invalidated a patent on a diagnostic method, because it non-inventively implemented a natural principle the Court drew on cases involving computer software and other abstract ideas. In this case, the Court was much more detailed in describing how to recognize a patent-ineligible claim to an abstract idea. The Mayo methodology has come to dominate patent-eligibility law. It revived the approach of the Flook and Neilson cases, which is to treat the underlying principle, idea, or algorithm on which the claimed patent is based as if it were part of the prior art and to make patent eligibility turn on whether the implementation of it is inventive. This led to the two-step Alice test described next. Alice case  edit  At the time the Mayo case was decided, there was some uncertainty over whether it applied only to natural principles laws of nature or more generally to patent eligibility of all abstract ideas and general principles, including those involved in software patents. The Alice decision confirmed that the test was general. The Alice case involved patents on electronic methods and computer programs for financial-trading systems on which trades between two parties who are to exchange payment are settled by a third party in ways that reduce the risk that one party performs while the other does not. The patents cover what amounts to a computerized escrow arrangement. The Court held that Mayo explained how to address the problem of determining whether a patent claimed an unpatentable abstract idea or instead a potentially patentable practical implementation of an idea. This requires using a two-step analysis. In the first step, the court must determine whether the patent claim under examination contains an abstract idea, such as an algorithm, method of computation, or other general principle. If not, the claim is potentially patentable, subject to the other requirements of the patent code. If the answer is affirmative, the court must proceed to the next step. In the second step of the analysis, the court must determine whether the patent adds to the idea something extra that embodies an inventive concept. If there is no addition of an inventive element to the underlying abstract idea, the court finds the patent invalid under section 101. This means that the implementation of the idea must not be conventional or obvious to qualif y for a patent. Ordinary and customary use of a general-purpose digital computer is insufficient the Court saidmerely requiring generic computer implementation fails to transform an abstract idea into a patent-eligible invention. The ruling continued with these points A mere instruction to implement an abstract idea on a computer cannot impart patent eligibility. The mere recitation of a generic computer cannot transform a patent-ineligible abstract idea into a patent-eligible invention. Stating an abstract idea while adding the words apply it is not enough for patent eligibility. Nor is limiting the use of an abstract idea to a particular technological environment. The Alice decision met a mixed reception, but profoundly affected U.S. patent law. In its wake, as explained in the Wikipedia article on the case , courts invalidated vast numbers of so-called software and business-method patents the overwhelming majority of those the United States Court of Appeals for the Federal Circuit considered and the number of such patents issued has drastically fallen. The Alice decision has been widely criticized for its failure to specify in detail the boundaries of patent eligibility, but it has also been defended because its unanimity tends to stabilize decisional law in the field. 33  Subsequent developments  edit  After Alice , the Federal Circuit and district courts invalidated large numbers of business-method and software patents based on those courts interpretations of Alice . Federal Circuit Judge William Bryson summed this up in these terms In short, such patents, although frequently dressed up in the argot of invention, simply describe a problem, announce purely functional steps that purport to solve the problem, and recite standard computer operations to perform some of those steps. The principal flaw in these patents is that they do not contain an inventive concept that solves practical problems and ensures t hat the patent is directed to something significantly more than the ineligible abstract idea itself. Citing Alice and Mayo . As such, they represent little more than functional descriptions of objectives, rather than inventive solutions. In addition, because they describe the claimed methods in functional terms, they preempt any subsequent specific solutions to the problem at issue. Citing Alice and Mayo . It is for those reasons that the Supreme Court has characterized such patents as claiming abstract ideas and has held that they are not directed to patentable subject matter. 34  See also  edit  Criticism of patents Debates within software engineering European Information, Communications and Consumer Electronics Technology Industry Associations EICTA Foundation for a Free Information Infrastructure FFII Free Software Foundation Irish Free Software Organisation Jacobsen v. Katzer Piano roll blues Public Patent Foundation Mozilla Open Software Patent License References  edit   Nichols, Kenneth 1998. Inventing Software The Rise of computer-related Patents . Greenwood Publishing Group. p.  15. ISBN   1-56720-140-7 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Vlimki, Mikko 2005. The Rise of Open Source Licensing . Turre Publishing. ISBN   952-91-8779-3 .  a b Gallini, Nancy T 2002-06-01. The Economics of Patents Lessons from Recent U.S. Patent Reform. Journal of Economic Perspectives . 16 2 131154. doi  10.12570895330027292 . ISSN   0895-3309 .  Ways in Which Patents can Help Your E-Commerce Business . World International Property Organization . Retrieved 2008-06-19 .  Coriat, Benjamin 2002. Establishing a New Intellectual Property Rights Regime in the United States Origins, Content and Problems. Research Policy . 31 89 14911507. doi  10.1016s0048-73330200078-1 .  The Experts Does the Patent System Encourage Innovation . Wall Street Journal . 2013-05-16. ISSN   0099-9660 . Retrieved 2017-03-29 .  Experts Debate Constitutionality Of Software Copyrights . Retrieved 2017-03-28 .  Software Myths and Facts . Retrieved 2017-03-29 .  Shaw, Steven. Why we need software patents, and yes, Im smarter than you  ZDNet . ZDNet . Retrieved 2017-03-29 .  Should Patents Be Awarded to Software . Retrieved 2017-03-28 .  Pamela Jones, An Explanation of Computation Theory for Lawyers .  Gonzlez, A. G. 2006. The software patent debate. Journal of Intellectual Property Law  Practice, 13, 196206. doi10.1093jiplpjpi046  Jaffe, Adam B. Lerner, Joshua. Innovation and its discontents how our broken patent system is endangering innovation and progress. ISBN   978-0-691-11725-6  Almarin Phillips March 1, 1966. Patents, Potential Competition, and Technical Progress. The American Economic Review . 56 12 301310. JSTOR   1821293 .  Lee, Timothy B. 31 July 2013. Heres why economists hate software patents . The Washington Post . Retrieved 31 August 2016 .  EFF Outlines Plan to Fix the Broken Patent System . Electronic Frontier Foundation. 2015-02-23.  Samuelson, Pamela 2008. Are Patents on Interfaces Impeding Interoperability . Berkeley Law  via Berkeley Law Scholarship Repository.  Boldrin, Michele Levine, David K 2013-02-01. The Case Against Patents. Journal of Economic Perspectives . 27 1 322. doi  10.1257jep.27.1.3 . ISSN   0895-3309 .  Mulligan, Christina and Lee, Timothy B., Scaling the Patent System March 6, 2012. NYU Annual Survey of American Law, Forthcoming. Available at SSRN httpssrn.comabstract2016968  Patent medicine - Why Americas patent system needs to be reformed, and how to do it . Economist. 2011-08-20 . Retrieved 2011-09-26 .  The Basics . NoSoftwarePatents.com . Retrieved 2008-06-19 .  a b c Plotkin, R. 2002. Intellectual property and the process of invention Why software is different. IEEE 2002 International Symposium on Technology and Society ISTAS02. Social Implications of Information and Communication Technology. Proceedings Cat. No.02CH37293 . p.  236. doi  10.1109ISTAS.2002.1013821 . ISBN   0-7803-7284-0 .  James Bessen  Michael J. Meurer Patent Failure How Judges, Bureaucrats, and Lawyers Put Innovators at Risk Princeton University Press, 2008, ISBN   978-0-691-13491-8  ... many people have focused solely on patent examination quality as the objective of reform, based largely on anecdotal evidence of trivial, obvious, or otherwise invalid patents. Although we support efforts to improve patent examination quality large numbers of questionable patents create conditions in which poor patent notice is unavoidable, our analysis suggests that this is only part of the problem and the patent system cannot likely be fixed by addressing only this issue. Of course, the notice problems that we find central to the poor performance of the patent system are not the only ones looking for a remedy. We argue, however, that many proposed reforms, including reforms directed toward improving patent examination quality, are unlikely to be effective u nless patent notice is improved generally.  James Bessen  Michael J. Meurer Patent Failure How Judges, Bureaucrats, and Lawyers Put Innovators at Risk Princeton University Press, 2008, ISBN   978-0-691-13491-8  It is possible, however, that features of software technology make it particularly susceptible to the patenting of obvious ideas, especially given the legal doctrines of non-obviousness developed by the Federal Circuit. For one thing, the general-purpose nature of software technologyagain, because the technology is abstract, similar techniques can be used in a wide range of applications makes it inevitable that techniques known in one realm might be applied in another, yet the documentary evidence that the Federal Circuit requires for a demonstration of obviousness might not be published.  Software patents need shelter from the storm . ZDNet - Tech News.  To Promote Innovation The Proper Balance of Competition and Patent Law and Policy A Report by the Federal Trade Commission PDF . Federal Trade Commission. October 2003.  USPTO Performance and Accountability Report 2015 PDF . United States Patent Office.  IP5 Statistics Report 2015 PDF . IP5.  EFF If You Want to Fix Software Patents, Eliminate Software Patents . Retrieved 2017-04-26 .  httpswww.uspto.gov . Missing or empty title  help   2016 Patent Litigation Study Are we at an inflection point . PwC . May 2016. Archived from the original on 2016-09-26.  Startups and Patent Trolls . Stanford Technology Law Review.  Richard H. Stern, Alice v CLS Bank US Business Method and Software Patents Marching towards Oblivion , 2014 .mw-parser-output .smallcapsfont-variantsmall-caps Eur. Intell. Prop. Rev. 619, 629.  Loyalty Conversion Sys. Corp. v. American Airlines, Inc. . v t e Intellectual property activism Issues Artificial scarcity Copyright infringement Digital rights management Gripe site Legal aspects of file sharing Mashup digital music videos Monopolies of knowledge Music piracy Orphan works Patents biological software software patent debate trolling Public domain Concepts All rights reversed Alternative compensation system Anti-copyright notice Business models for open-source software Copyleft Commercial use of copyleft works Commons-based peer production Electronic sell-through Free content Free software license Libertarian positions Open content Open-design movement Open Music Model Open patent Open-source Open-source hardware Open-source software Prize system contests Share-alike Video on demand Movements Access to Knowledge movement Anti-copyright Cultural environmentalism Free-culture movement Free software movement Organizations Pro-copyright Copyright Alliance Pro-copyleft Creative Commons Electronic Frontier Foundation Free Software Foundation Open Rights Group Organization for Transformative Works The Pirate Bay Piratbyrn Pirate Party Public Knowledge Sci-Hub Students for Free Culture People Cory Doctorow Alexandra Elbakyan Rick Falkvinge Lawrence Lessig Richard Stallman Peter Suber Peter Sunde Aaron Swartz Documentaries Steal This Film 2006, 2007 Good Copy Bad Copy 2007 RiP A Remix Manifesto 2008 TPB AFK The Pirate Bay Away From Keyboard 2013 The Internets Own Boy 2014 Retrieved from  httpsen.wikipedia.orgwindex.phptitleSoftware_patent_debate oldid913143692  Categories  Software patent law Intellectual property activism Discovery and invention controversies Legal disputes Hidden categories Pages with citations lacking titles Pages with citations having bare URLs