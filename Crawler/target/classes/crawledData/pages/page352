Formal methods From Wikipedia, the free encyclopedia Jump to navigation Jump to search In computer science , specifically software engineering and hardware engineering , formal methods are a particular kind of mathematically based techniques for the specification , development and verification of software and hardware systems. 1  The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. 2  Formal methods are best described as the application of a fairly broad variety of theoretical computer science fundamentals, in particular logic calculi, formal languages , automata theory , discrete event dynamic system and program semantics , but also type systems and algebraic data types to problems in software and hardware specification and verification. 3  Contents 1 Background 2 Taxonomy 2.1 Lightweight formal methods 3 Uses 3.1 Specification 3.2 Development 3.3 Verification 3.3.1 Sign-off verification 3.3.2 Human-directed proof 3.3.3 Automated proof 4 Applications 5 In software development 6 Formal methods and notations 6.1 Specification languages 6.2 Model checkers 7 See also 8 References 9 Further reading 10 External links Background  edit  Semi-Formal Methods are formalisms and languages that are not considered fully  formal . It defers the task of completing the semantics to a later stage, which is then done either by human interpretation or by interpretation through software like code or test case generators. 4  Taxonomy  edit  Formal methods can be used at a number of levels Level 0 Formal specification may be undertaken and then a program developed from this informally. This has been dubbed formal methods lite . This may be the most cost-effective option in many cases. Level 1 Formal development and formal verification may be used to produce a program in a more formal manner. For example, proofs of properties or refinement from the specification to a program may be undertaken. This may be most appropriate in high-integrity systems involving safety or security . Level 2 Theorem provers may be used to undertake fully formal machine-checked proofs. This can be very expensive and is only practically worthwhile if the cost of mistakes is extremely high e.g., in critical parts of microprocessor design. Further information on this is expanded below . As with programming language semantics , styles of formal methods may be roughly classified as follows Denotational semantics , in which the meaning of a system is expressed in the mathematical theory of domains . Proponents of such methods rely on the well-understood nature of domains to give meaning to the system critics point out that not every system may be intuitively or naturally viewed as a function. Operational semantics , in which the meaning of a system is expressed as a sequence of actions of a presumably simpler computational model. Proponents of such methods point to the simplicity of their models as a means to expressive clarity critics counter that the problem of semantics has just been delayed who defines the semantics of the simpler model. Axiomatic semantics , in which the meaning of the system is expressed in terms of preconditions and postconditions which are true before and after the system performs a task, respectively. Proponents note the connection to classical logic  critics note that such semantics never really describe what a system does merely what is true before and afterwards. Lightweight formal methods  edit  Some practitioners believe that the formal methods community has overemphasized full formalization of a specification or design. 5  6  They contend that the expressiveness of the languages involved, as well as the complexity of the systems being modelled, make full formalization a difficult and expensive task. As an alternative, various lightweight formal methods, which emphasize partial specification and focused application, have been proposed. Examples of this lightweight approach to formal methods include the Alloy object modelling notation, 7  Denneys synthesis of some aspects of the Z notation with use case driven development, 8  and the CSK VDM Tools. 9  Uses  edit  Formal methods can be applied at various points through the development process . Specification  edit  Formal methods may be used to give a description of the system to be developed, at whatever levels of detail desired. This formal description can be used to guide further development activities see following sections additionally, it can be used to verify that the requirements for the system being developed have been completely and accurately specified. or formalising sys tem requirements by expressing them in a formal language with a precise and unambiguously defined syntax and semantics. The need for formal specification systems has been noted for years. In the ALGOL 58 report, 10  John Backus presented a formal notation for describing programming language syntax, later named Backus normal form then renamed BackusNaur form BNF. 11  Backus also wrote that a formal description of the meaning of syntactically valid ALGOL programs wasnt completed in time for inclusion in the report. Therefore the formal treatment of the semantics of legal programs will be included in a subsequent paper. It never appeared. Development  edit  Formal development using formal methods as an integrated part of a tool-supported system development process. Once a formal specification has been produced, the specification may be used as a guide while the concrete system is developed during the design process i.e., realized typically in software, but also potentially in hardware. For example If the formal specification is in an operational semantics, the observed behavior of the concrete system can be compared with the behavior of the specification which itself should be executable or simulateable. Additionally, the operational commands of the specification may be amenable to direct translation into executable code. If the formal specification is in an axiomatic semantics, the preconditions and postconditions of the specification may become assertions in the executable code. Verification  edit  Formal verification using a software tool to prove properties of a formal specification, or that a formal model of a system implementation satisfies its specification. Once a formal specification has been developed, the specification may be used as the basis for proving properties of the specification and hopefully by inference the developed system. Sign-off verification  edit  A formal verification tool for sign-off verification is a tool that is highly trusted such that it can replace traditional verification methods the tool may even be certified. Human-directed proof  edit  Sometimes, the motivation for proving the correctness of a system is not the obvious need for reassurance of the correctness of the system, but a desire to understand the system better. Consequently, some proofs of correctness are produced in the style of mathematical proof  handwritten or typeset using natural language , using a level of informality common to such proofs. A good proof is one which is readable and understandable by other human readers. Critics of such approaches point out that the ambiguity inherent in natural language allows errors to be undetected in such proofs often, subtle errors can be present in the low-level details typically overlooked by such proofs. Additionally, the work involved in producing such a good proof requires a high level of mathematical sophistication and expertise. Automated proof  edit  In contrast, there is increasing interest in producing proofs of correctness of such systems by automated means. Automated techniques fall into three general categories Automated theorem proving , in which a system attempts to produce a formal proof from scratch, given a description of the system, a set of logical axioms, and a set of inference rules. Model checking , in which a system verifies certain properties by means of an exhaustive search of all possible states that a system could enter during its execution. Abstract interpretation , in which a system verifies an over-approximation of a behavioural property of the program, using a fixpoint computation over a possibly complete lattice representing it. Some automated theorem provers require guidance as to which properties are interesting enough to pursue, while others work without human intervention. Model checkers can quickly get bogged down in checking millions of uninteresting states if not given a sufficiently abstract model. Proponents of such systems argue that the results have greater mathematical certainty than human-produced proofs, since all the tedious details have been algorithmically verified. The training required to use such systems is also less than that required to produce good mathematical proofs by hand, making the techniques accessible to a wider variety of practitioners. Critics note that some of those systems are like oracles  they make a pronouncement of truth, yet give no explanation of that truth. There is also the problem of  verifying the verifier  if the program which aids in the verification is itself unproven, there may be reason to doubt the soundness of the produced results. Some modern model checking tools produce a proof log detailing each step in their proof, making it possible to perform, given suitable tools, independent verification. The main feature of the abstract interpretation approach is that it provides a sound analysis, i.e. no false negatives are returned. Moreover, it is efficiently scalable, by tuning the abstract domain representing the property to be analyzed, and by applying widening operators 12  to get fast convergence. Applications  edit  Formal methods are applied in different areas of hardware and software, including routers, Ethernet switches, routing protocols, security applications, and operating system microkernels such as seL4 . There are several examples in which they have been used to verify the functionality of the hardware and software used in DCs  clarification needed  . IBM used ACL2 , a theorem prover, in AMD x86 processor development process  citation needed  . Intel uses such methods to verify its hardware and firmware permanent software programmed into a read-only memory  citation needed  . Dansk Datamatik Center used formal methods in the 1980s to develop a compiler system for the Ada programming language that went on to become a long-lived commercial product. 13  14  There are several other projects of NASA in which formal methods are applied, such as Next Generation Air Transportation System  citation needed  , Unmanned Aircraft System integration in National Airspace System, 15  and Airborne Coordinated Conflict Resolution and Detection ACCoRD. 16  B-Method with AtelierB , 17  is used to develop safety automatisms for the various subways installed throughout the world by Alstom and Siemens , and also for Common Criteria certification and the development of system models by ATMEL and STMicroelectronics . Formal verification has been frequently used in hardware by most of the well-known hardware vendors, such as IBM, Intel, and AMD. There are many areas of hardware, where Intel have used FMs to verify the working of the products, such as parameterized verification of cache coherent protocol, 18  Intel Core i7 processor execution engine validation 19  using theorem proving, BDDs , and symbolic evaluation, optimization for Intel IA-64 architecture using HOL light theorem prover, 20  and verification of high performance dual-port gigabit Ethernet controller with a support for PCI express protocol and Intel advance management technology using Cadence. 21  Similarly, IBM has used formal methods in the verification of power gates, 22  registers, 23  and functional verification of the IBM Power7 microprocessor. 24  In software development  edit  In software development , formal methods are mathematical approaches to solving software and hardware problems at the requirements, specification, and design levels. Formal methods are most likely to be applied to safety-critical or security-critical software and systems, such as avionics software . Software safety assurance standards, such as DO-178C allows the usage of formal methods through supplementation, and Common Criteria mandates formal methods at the highest levels of categorization. For sequential software, examples of formal methods include the B-Method , the specification languages used in automated theorem proving , RAISE , and the Z notation . In functional programming , property-based testing has allowed the mathematical specification and testing if not exhaustive testing of the expected behaviour of individual functions. The Object Constraint Language and specializations such as Java Modeling Language  has allowed object-oriented systems to be formally specified, if not necessarily formally verified. For concurrent software and systems, Petri nets , process algebra , and finite state machines which are based on automata theory - see also virtual finite state machine or event driven finite state machine  allow executable software specification and can be used to build up and validate application behavior. Another approach to formal methods in software development is to write a specification in some form of logic usually a variation of first-order logic FOL and then to directly execute the logic as though it were a program. The OWL language, based on Description Logic DL, is an example. There is also work on mapping some version of English or another natural language automatically to and from logic, and executing the logic directly. Examples are Attempto Controlled English , and Internet Business Logic, which do not seek to control the vocabulary or syntax. A feature of systems that support bidirectional English-logic mapping and direct execution of the logic is that they can be made to explain their results, in English, at the business or scientific level.  citation needed  Formal methods and notations  edit  This section is in list format, but may read better as prose . You can help by converting this section , if appropriate. Editing help is available.  August 2009  There are a variety of formal methods and notations available. Specification languages  edit  Abstract State Machines ASMs A Computational Logic for Applicative Common Lisp ACL2 ANSIISO C Specification Language ACSL Alloy Autonomic System Specification Language ASSL B-Method CADP Common Algebraic Specification Language CASL Java Modeling Language JML Knowledge Based Software Assistant KBSA Process calculi CSP LOTOS -calculus Actor model Esterel Lustre mCRL2 Perfect Developer Petri nets Predicative programming RAISE Rebeca Modeling Language SPARK Ada Spec sharp Spec Specification and Description Language TLA USL VDM VDM-SL VDM Z notation Model checkers  edit  SPIN PAT is a powerful free model checker, simulator and refinement checker for concurrent systems and CSP extensions e.g. shared variables, arrays, fairness. MALPAS Software Static Analysis Toolset is an industrial strength model checker used for formal proof of safety-critical systems UPPAAL ESBMC See also  edit  Abstract interpretation Automated theorem proving Design by contract Formal methods people Formal specification Formal verification Formal system Model checking Software engineering Specification language References  edit   R. W. Butler 2001-08-06. What is Formal Methods . Retrieved 2006-11-16 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  C. Michael Holloway. Why Engineers Should Consider Formal Methods PDF . 16th Digital Avionics Systems Conference 2730 October 1997. Archived from the original PDF on 16 November 2006 . Retrieved 2006-11-16 . Cite uses deprecated parameter deadurl  help  Cite journal requires journal  help   Monin, pp.3-4  X2R-2, deliverable D5.1 .  Daniel Jackson and Jeannette Wing , Lightweight Formal Methods , IEEE Computer , April 1996  Vinu George and Rayford Vaughn, Application of Lightweight Formal Methods in Requirement Engineering Archived 2006-03-01 at the Wayback Machine , Crosstalk The Journal of Defense Software Engineering , January 2003  Daniel Jackson, Alloy A Lightweight Object Modelling Notation , ACM Transactions on Software Engineering and Methodology TOSEM , Volume 11, Issue 2 April 2002, pp. 256-290  Richard Denney, Succeeding with Use Cases Working Smart to Deliver Quality , Addison-Wesley Professional Publishing, 2005, ISBN   0-321-31643-6 .  Sten Agerholm and Peter G. Larsen, A Lightweight Approach to Formal Methods Archived 2006-03-09 at the Wayback Machine , In Proceedings of the International Workshop on Current Trends in Applied Formal Methods , Boppard, Germany, Springer-Verlag, October 1998  Backus, J.W. 1959. The Syntax and Semantics of the Proposed International Algebraic Language of Zrich ACM-GAMM Conference. Proceedings of the International Conference on Information Processing . UNESCO.  Knuth, Donald E. 1964, Backus Normal Form vs Backus Naur Form. Communications of the ACM , 712735736.  A.Cortesi and M.Zanioli, Widening and Narrowing Operators for Abstract Interpretation . Computer Languages, Systems and Structures. Volume 371, pp. 2442, Elsevier, ISSN   1477-8424 2011.  Bjrner, Dines Gram, Christian Oest, Ole N. Rystrm, Leif 2011. Dansk Datamatik Center. In Impagliazzo, John Lundin, Per Wangler, Benkt eds.. History of Nordic Computing 3 IFIP Advances in Information and Communication Technology . Springer. pp.  350359.  Bjrner, Dines Havelund, Klaus. 40 Years of Formal Methods Some Obstacles and Some Possibilities. FM 2014 Formal Methods 19th International Symposium, Singapore, May 1216, 2014. Proceedings PDF . Springer. pp.  4261.  Gheorghe, A. V.,  Ancel, E. 2008, November. Unmanned aerial systems integration to National Airspace System. In Infrastructure Systems and Services Building Networks for a Brighter Future INFRA, 2008 First International Conference on pp. 1-5. IEEE.  Airborne Coordinated Conflict Resolution and Detection, httpshemesh.larc.nasa.govpeoplecamACCoRD  website   httpwww.atelierb.euen  C. T. Chou, P. K. Mannava, S. Park,  A simple method for parameterized verification of cache coherence protocols , Formal Methods in Computer-Aided Design, pp. 382398, 2004.  Formal Verification in Intel Core i7 Processor Execution Engine Validation, httpcps-vo.orgnode1371 , accessed at Sep. 13, 2013.  J. Grundy, Verified optimizations for the Intel IA-64 architecture, In Theorem Proving in Higher Order Logics, Springer Berlin Heidelberg, 2004, pp. 215232.  E. Seligman, I. Yarom,  Best known methods for using Cadence Conformal LEC , at Intel.  C. Eisner, A. Nahir, K. Yorav,  Functional verification of power gated designs by compositional reasoning , Computer Aided Verification Springer Berlin Heidelberg, pp. 433445.  P. C. Attie, H. Chockler,  Automatic verification of fault-tolerant register emulations , Electronic Notes in Theoretical Computer Science, vol. 149, no. 1, pp. 4960.  K. D. Schubert, W. Roesner, J. M. Ludden, J. Jackson, J. Buchert, V. Paruthi, B. Brock,  Functional verification of the IBM POWER7 microprocessor and POWER7 multiprocessor systems , IBM Journal of Research and Development, vol. 55, no 3. This article is based on material taken from the Free On-line Dictionary of Computing prior to 1 November 2008 and incorporated under the relicensing terms of the GFDL , version 1.3 or later. Further reading  edit  .mw-parser-output .refbeginfont-size90margin-bottom0.5em.mw-parser-output .refbegin-hanging-indentsullist-style-typenonemargin-left0.mw-parser-output .refbegin-hanging-indentsulli,.mw-parser-output .refbegin-hanging-indentsdlddmargin-left0padding-left3.2emtext-indent-3.2emlist-stylenone.mw-parser-output .refbegin-100font-size100 Jean Franois Monin and Michael G. Hinchey , Understanding formal methods , Springer , 2003, ISBN   1-85233-247-6 . Jonathan P. Bowen and Michael G. Hinchey, Formal Methods . In Allen B. Tucker, Jr. ed., Computer Science Handbook , 2nd edition, Section XI, Software Engineering , Chapter 106, pages 106-1   106-25, Chapman  Hall  CRC Press , Association for Computing Machinery , 2004. Michael G. Hinchey, Jonathan P. Bowen, and Emil Vassev, Formal Methods . In Philip A. Laplante ed., Encyclopedia of Software Engineering , Taylor  Francis , 2010, pages 308320. Hubert Garavel editor and Susanne Graf. Formal Methods for Safe and Secure Computer Systems . Bundesamt fr Sicherheit in der Informationstechnik , BSI study 875, Bonn, Germany, 362 pages, December 2013. External links  edit  Formal Methods Europe FME Formal method keyword on Microsoft Academic Search Foldocformal methods Evidence on Formal Methods uses and impact on Industry Supported by the DEPLOY project EU FP7 v t e Computer science Note This template roughly follows the 2012 ACM Computing Classification System . Hardware Printed circuit board Peripheral Integrated circuit Very Large Scale Integration Systems on Chip SoCs Energy consumption Green computing Electronic design automation Hardware acceleration Computer systems organization Computer architecture Embedded system Real-time computing Dependability Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domain-specific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Software development process Requirements analysis Software design Software construction Software deployment Software maintenance Programming team Open-source model Theory of computation Model of computation Formal language Automata theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security services Intrusion detection system Hardware security Network security Information security Application security Humancomputer interaction Interaction design Social computing Ubiquitous computing Visualization Accessibility Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multi-task learning Cross-validation Graphics Animation Rendering Image manipulation Graphics processing unit Mixed reality Virtual reality Image compression Solid modeling Applied computing E-commerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Book Category Portal Outline WikiProject Commons v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleFormal_methods oldid911060277  Categories  Formal methods Software development philosophies Theoretical computer science Specification languages Hidden categories CS1 errors deprecated parameters CS1 errors missing periodical Webarchive template wayback links Wikipedia articles needing clarification from September 2015 All articles with unsourced statements Articles with unsourced statements from September 2015 Articles with unsourced statements from June 2016 Articles needing cleanup from August 2009 All pages needing cleanup Articles with sections that need to be turned into prose from August 2009