Agile software development From Wikipedia, the free encyclopedia Jump to navigation Jump to search group of iterative and incremental development methods Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Agile software development is an approach to software development under which requirements and solutions evolve through the collaborative effort of self-organizing and cross-functional teams and their customers  end users . 1  It advocates adaptive planning, evolutionary development, early delivery, and continual improvement , and it encourages rapid and flexible response to change. 2   further explanation needed  The term agile sometimes written Agile  3  was popularized, in this context, by the Manifesto for Agile Software Development . 4  The values and principles espoused in this manifesto were derived from and underpin a broad range of software development frameworks , including Scrum and Kanban . 5  6  While there is much anecdotal evidence that adopting agile practices and values improves the agility of software professionals, teams and organizations, some empirical studies have disputed that evidence. 7  8  .mw-parser-output .toclimit-2 .toclevel-1 ul,.mw-parser-output .toclimit-3 .toclevel-2 ul,.mw-parser-output .toclimit-4 .toclevel-3 ul,.mw-parser-output .toclimit-5 .toclevel-4 ul,.mw-parser-output .toclimit-6 .toclevel-5 ul,.mw-parser-output .toclimit-7 .toclevel-6 uldisplaynone Contents 1 History 2 The Manifesto for Agile Software Development 2.1 Agile software development values 2.2 Agile software development principles 3 Overview 3.1 Iterative, incremental and evolutionary 3.2 Efficient and face-to-face communication 3.3 Very short feedback loop and adaptation cycle 3.4 Quality focus 4 Philosophy 4.1 Adaptive vs. predictive 4.2 Agile vs. waterfall 4.3 Code vs. documentation 5 Agile software development methods 5.1 Agile software development practices 5.2 Method tailoring 5.3 Large-scale, offshore and distributed 5.4 Regulated domains 6 Experience and adoption 6.1 Measuring agility 6.1.1 Internal assessments 6.1.2 Public surveys 6.2 Common agile software development pitfalls 6.2.1 Lack of overall product design 6.2.2 Adding stories to an iteration in progress 6.2.3 Lack of sponsor support 6.2.4 Insufficient training 6.2.5 Product owner role is not properly filled 6.2.6 Teams are not focused 6.2.7 Excessive preparationplanning 6.2.8 Problem-solving in the daily standup 6.2.9 Assigning tasks 6.2.10 Scrum master as a contributor 6.2.11 Lack of test automation 6.2.12 Allowing technical debt to build up 6.2.13 Attempting to take on too much in an iteration 6.2.14 Fixed time, resources, scope, and quality 6.2.15 Developer burnout 7 Agile management 7.1 Applications outside software development 8 Criticism 9 See also 10 References 11 Further reading 12 External links History  edit  Iterative and incremental development methods can be traced back as early as 1957, 9  with evolutionary project management 10  11  and adaptive software development 12  emerging in the early 1970s 13  . During the 1990s, a number of lightweight software development methods evolved in reaction to the prevailing heavyweight methods that critics described as overly regulated, planned, and micro-managed . These included rapid application development RAD, from 1991 14  15  the unified process UP and dynamic systems development method DSDM, both from 1994 Scrum , from 1995 Crystal Clear and extreme programming XP, both from 1996 and feature-driven development , from 1997. Although these all originated before the publication of the Agile Manifesto , they are now collectively referred to as agile software development methods. 6  At the same time, similar changes were underway in manufacturing 16  and aerospace. 17  In 2001, these seventeen software developers met at a resort in Snowbird , Utah to discuss these lightweight development methods Kent Beck , Ward Cunningham , Dave Thomas , Jeff Sutherland , Ken Schwaber , Jim Highsmith , Alistair Cockburn , Robert C. Martin , Mike Beedle , Arie van Bennekum , Martin Fowler , James Grenning, Andrew Hunt , Ron Jeffries , Jon Kern , Brian Marick , and Steve Mellor . Together they published the Manifesto for Agile Software Development . 4  In 2005, a group headed by Cockburn and Highsmith wrote an addendum of project management principles, the PM Declaration of Interdependence , 18  to guide software project management according to agile software development methods. In 2009, a group working with Martin wrote an extension of software development principles, the Software Craftsmanship Manifesto , to guide agile software development according to professional conduct and mastery. In 2011, the Agile Alliance created the Guide to Agile Practices renamed the Agile Glossary in 2016, 19  an evolving open-source compendium of the working definitions of agile practices, terms, and elements, along with interpretations and experience guidelines from the worldwide community of agile practitioners. The Manifesto for Agile Software Development  edit  Agile software development values  edit  Based on their combined experience of developing software and helping others do that, the seventeen signatories to the manifesto proclaimed that they value 4  Individuals and Interactions over processes and tools Working Software over comprehensive documentation Customer Collaboration over contract negotiation Responding to Change over following a plan That is to say, the items on the left are valued more than the items on the right. As Scott Ambler elucidated 20  Tools and processes are important, but it is more important to have competent people working together effectively. Good documentation is useful in helping people to understand how the software is built and how to use it, but the main point of development is to create software, not documentation. A contract is important but is no substitute for working closely with customers to discover what they need. A project plan is important, but it must not be too rigid to accommodate changes in technology or the environment, stakeholders priorities, and peoples understanding of the problem and its solution. Some of the authors formed the Agile Alliance, a non-profit organization that promotes software development according to the manifestos values and principles. Introducing the manifesto on behalf of the Agile Alliance, Jim Highsmith said, .mw-parser-output .templatequoteoverflowhiddenmargin1em 0padding0 40px.mw-parser-output .templatequote .templatequoteciteline-height1.5emtext-alignleftpadding-left1.6emmargin-top0 The Agile movement is not anti-methodology, in fact many of us want to restore credibility to the word methodology. We want to restore a balance. We embrace modeling, but not in order to file some diagram in a dusty corporate repository. We embrace documentation, but not hundreds of pages of never-maintained and rarely-used tomes. We plan, but recognize the limits of planning i n a turbulent environment. Those who would brand proponents of XP or SCRUM or any of the other Agile Methodologies as hackers are ignorant of both the methodologies and the original definition of the term hacker.  Jim Highsmith, History The Agile Manifesto 21  Agile software development principles  edit  The Manifesto for Agile Software Development is based on twelve principles 22  Customer satisfaction by early and continuous delivery of valuable software. Welcome changing requirements, even in late development. Deliver working software frequently weeks rather than months Close, daily cooperation between business people and developers Projects are built around motivated individuals, who should be trusted Face-to-face conversation is the best form of communication co-location Working software is the primary measure of progress Sustainable development, able to maintain a constant pace Continuous attention to technical excellence and good design Simplicity the art of maximizing the amount of work not done is essential Best architectures, requirements, and designs emerge from self-organizing teams Regularly, the team reflects on how to become more effective, and adjusts accordingly Overview  edit  Pair programming , an agile development technique used by XP . Iterative, incremental and evolutionary  edit  Most agile development methods break product development work into small increments that minimize the amount of up-front planning and design. Iterations, or sprints, are short time frames  timeboxes  that typically last from one to four weeks. Each iteration involves a cross-functional team working in all functions planning , analysis , design , coding , unit testing , and acceptance testing . At the end of the iteration a working product is demonstrated to stakeholders. This minimizes overall risk and allows the product to adapt to changes quickly. 23  An iteration might not add enough functionality to warrant a market release, but the goal is to have an available release with minimal bugs  at the end of each iteration. 24  Multiple iterations might be required to release a product or new features. Working software is the primary measure of progress. 22  Efficient and face-to-face communication  edit  The principle of co-location is that co-workers on the same team should be situated together to better establish the identity as a team and to improve communication. 25  This enables face-to-face interaction , ideally in front of a whiteboard, that reduces the cycle time typically taken when questions and answers are mediated through phone, persistent chat, wiki, or email. 26  No matter which development method is followed, every team should include a customer representative Product Owner in Scrum . This person is agreed by stakeholders to act on their behalf and makes a personal commitment to being available for developers to answer questions throughout the iteration. At the end of each iteration, stakeholders and the customer representative review progress and re-evaluate priorities with a view to optimizing the return on investment ROI and ensuring alignment with customer needs and company goals. In agile software development, an information radiator is a normally large physical display located prominently near the development team, where passers-by can see it. It presents an up-to-date summary of the product development status. 27  28  A build light indicator may also be used to inform a team about the current status of their product development. Very short feedback loop and adaptation cycle  edit  A common characteristic in agile software development is the daily stand-up also known as the daily scrum . In a brief session, team members report to each other what they did the previous day toward their teams iteration goal, what they intend to do today toward the goal, and any roadblocks or impediments they can see to the goal. 29  Quality focus  edit  Specific tools and techniques, such as continuous integration , automated unit testing , pair programming , test-driven development , design patterns , behavior-driven development , domain-driven design , code refactoring and other techniques are often used to improve quality and enhance product development agility. 30  This is predicated on designing and building quality in from the beginning and being able to demonstrate software for customers at any point, or at least at the end of every iteration. 31  Philosophy  edit  Compared to traditional software engineering, agile software development mainly targets complex systems and product development with dynamic, non-deterministic and non-linear characteristics. Accurate estimates, stable plans, and predictions are often hard to get in early stages, and confidence in them is likely to be low. Agile practitioners will seek to reduce the leap-of-faith that is needed before any evidence of value can be obtained. 32  Requirements and design are held to be emergent. Big up-front specifications would probably cause a lot of waste in such cases, i.e., are not economically sound. These basic arguments and previous industry experiences, learned from years of successes and failures, have helped shape agile developments favor of adaptive, iterative and evolutionary development. 33  Adaptive vs. predictive  edit  Development methods exist on a continuum from adaptive to predictive . 34  Agile software development methods lie on the adaptive side of this continuum. One key of adaptive development methods is a rolling wave approach to schedule planning, which identifies milestones but leaves flexibility in the path to reach them, and also allows for the milestones themselves to change. 35  Adaptive methods focus on adapting quickly to changing realities. When the needs of a project change, an adaptive team changes as well. An adaptive team has difficulty describing exactly what will happen in the future. The further away a date is, the more vague an adaptive method is about what will happen on that date. An adaptive team cannot report exactly what tasks they will do next week, but only which features they plan for next month. When asked about a release six months from now, an adaptive team might be able to report only the mission statement for the release, or a statement of expected value vs. cost. Predictive methods, in contrast, focus on analysing and planning the future in detail and cater for known risks. In the extremes, a predictive team can report exactly what features and tasks are planned for the entire length of the development process. Predictive methods rely on effective early phase analysis and if this goes very wrong, the project may have difficulty changing direction . Predictive teams often institute a change control board to ensure they consider only the most valuable changes. Risk analysis can be used to choose between adaptive  agile or value-driven  and predictive  plan-driven  methods. 36  Barry Boehm and Richard Turner suggest that each side of the continuum has its own home ground , as follows 37  Home grounds of different development methods Value-driven methods Plan-driven methods Formal methods Low criticality High criticality Extreme criticality Senior developers Junior developers Senior developers Requirements change often Requirements do not change often Limited requirements, limited features see Wirths law  clarification needed  Small number of developers Large number of developers Requirements that can be modeled Culture that responds to change Culture that demands order Extreme quality Agile vs. waterfall  edit  One of the differences between agile software development methods and waterfall is the approach to quality and testing. In the waterfall model , there is always a separate testing phase after a build phase  however, in agile software development testing is completed in the same iteration as programming. Another difference is that traditional waterfall software development moves a project through various Software Development Lifecycle SDLC phases. One phase is completed in its entirety before moving on to the next phase. Because testing is done in every iterationwhich develops a small piece of the softwareusers can frequently use those new pieces of software and validate the value. After the users know the real value of the updated piece of software, they can make better decisions about the softwares future. Having a value retrospective and software re-planning session in each iteration Scrum typically has iterations of just two weekshelps the team continuously adapt its plans so as to maximize the value it delivers. This follows a pattern similar to the PDCA cycle, as the work is planned , done , checked in the review and retrospective, and any changes agreed are acted upon. This iterative approach supports a product rather than a project mindset. This provides greater flexibility throughout the development process whereas on projects the requirements are defined and locked down from the very beginning, making it difficult to change them later. Iterative product development allows the software to evolve in response to changes in business environment or market requirements. 38  Because of the short iteration style of agile software development, it also has strong connections with the lean startup concept. Code vs. documentation  edit  In a letter to IEEE Computer , Steven Rakitin expressed cynicism about agile software development, calling it yet another attempt to undermine the discipline of software engineering and translating working software over comprehensive documentation as we want to spend all our time coding. Remember, real programmers dont write documentation. 39  This is disputed by proponents of agile software development, who state that developers should write documentation if that is the best way to achieve the relevant goals, but that there are often better ways to achieve those goals than writing static documentation. 40  Scott Ambler states that documentation should be just barely good enough JBGE, 41  that too much or comprehensive documentation would usually cause waste, and developers rarely trust detailed documentation because its usually out of sync with code, 40  while too little documentation may also cause problems for maintenance, communication, learning and knowledge sharing. Alistair Cockburn wrote of the Crystal Clear method Crystal considers development a series of co-operative games, and intends that the documentation is enough to help the next win at the next game. The work products for Crystal include use cases, risk list, iteration plan, core domain models, and design notes to inform on choices...however there are no templates for these documents and descriptions are necessarily vague, but the objective is clear, just enough documentation for the next game. I always tend to characterize this to my team as what would you want to know if you joined the team tomorrow.  Alistair Cockburn. 42  Agile software development methods  edit  Software development life-cycle support 43  Agile software development methods support a broad range of the software development life cycle . 43  Some focus on the practices e.g., XP, pragmatic programming, agile modeling, while some focus on managing the flow of work e.g., Scrum, Kanban. Some support activities for requirements specification and development e.g., FDD, while some seek to cover the full development life cycle e.g., DSDM, RUP . Notable agile software development frameworks include Framework Main contributors Adaptive software development ASD Jim Highsmith , Sam Bayer Agile modeling Scott Ambler , Robert Cecil Martin Agile unified process AUP Scott Ambler Disciplined agile delivery Scott Ambler Dynamic systems development method DSDM Extreme programming XP Kent Beck , Robert Cecil Martin Feature-driven development FDD Jeff De Luca Lean software development Mary Poppendieck, Tom Poppendieck Kanban Taiichi Ohno Rapid application development RAD James Martin Scrum Ken Schwaber , Jeff Sutherland Scrumban Agile software development practices  edit  Agile software development is supported by a number of concrete practices, covering areas like requirements, design, modeling, coding, testing, planning, risk management, process, quality, etc. Some notable agile software development practices include 44  Practice Main contributors Acceptance test-driven development ATDD Agile modeling Agile testing Backlogs Product and Sprint Ken Schwaber Behavior-driven development BDD Dan North , Liz Keogh Continuous integration CI Grady Booch Cross-functional team Daily Stand-up  Daily Scrum James O Coplien Domain-driven design DDD Eric Evans Iterative and incremental development IID Low-code development platforms Pair programming Kent Beck Planning poker James Grenning, Mike Cohn Refactoring Martin Fowler Retrospective Scrum events sprint planning, sprint review and retrospective Specification by example Story-driven modeling Albert Zndorf Test-driven development TDD Kent Beck Timeboxing User story Alistair Cockburn Velocity tracking Method tailoring  edit  In the literature, different terms refer to the notion of method adaptation, including method tailoring, method fragment adaptation and situational method engineering. Method tailoring is defined as A process or capability in which human agents determine a system development approach for a specific project situation through responsive changes in, and dynamic interplays between contexts, intentions, and method fragments.  Mehmet Nafiz Aydin et al., An Agile Information Systems Development Method in use 45  Situation-appropriateness should be considered as a distinguishing characteristic between agile methods and more plan-driven software development methods, with agile methods allowing product development teams to adapt working practices according to the needs of individual products. 46  45  Potentially, most agile methods could be suitable for method tailoring, 43  such as DSDM tailored in a CMM context. 47  and XP tailored with the Rule Description Practices RDP technique. 48  49  Not all agile proponents agree, however, with Schwaber noting that is how we got into trouble in the first place, thinking that the problem was not having a perfect methodology. Efforts should center on the changes needed in the enterprise. 50  Bas Vodde reinforced this viewpoint, suggesting that unlike traditional, large methodologies that require you to pick and choose elements, Scrum provides the basics on top of which you add additional elements to localise and contextualise its use. 51  Practitioners seldom use system development methods, or agile methods specifically, by the book, often choosing to omit or tailor some of the practices of a method in order to create an in-house method. 52  In practice, methods can be tailored using various tools. Generic process modeling languages such as Unified Modeling Language can be used to tailor software development methods. However, dedicated tools for method engineering such as the Essence Theory of Software Engineering of SEMAT also exist. 53  Large-scale, offshore and distributed  edit  Agile software development has been widely seen as highly suited to certain types of environments, including small teams of experts working on greenfield projects , 37  54   157 and the challenges and limitations encountered in the adoption of agile software development methods in a large organization with legacy infrastructure are well-documented and understood. 55  In response, a range of strategies and patterns has evolved for overcoming challenges with large-scale development efforts  20 developers 56  57  or distributed non-colocated development teams, 58  59  amongst other challenges and there are now several recognised frameworks that seek to mitigate or avoid these challenges. Scaled agile framework SAFe, 60  Dean Leffingwell et al Disciplined agile delivery DAD, Scott Ambler et al Large-scale scrum LeSS, Craig Larman and Bas Vodde Nexus scaled professional Scrum, 61  Ken Schwaber Scrum at Scale, 62  Jeff Sutherland , Alex Brown Enterprise Scrum, 63  Mike Beedle Setchu Scrum-based lightweight framework, 64  Michael Ebbage Xscale 65  Agile path 66  Holistic Software Development 67  There are many conflicting viewpoints on whether all of these are effective or indeed fit the definition of agile development, and this remains an active and ongoing area of research. 56  68  When agile software development is applied in a distributed setting with teams dispersed across multiple business locations, it is commonly referred to as distributed agile development. The goal is to leverage the unique benefits offered by each approach. Distributed development allow organizations to build software by strategically setting up teams in different parts of the globe, virtually building software round-the-clock more commonly referred to as follow-the-sun model. On the other hand, agile development provides increased transparency, continuous feedback and more flexibility when responding to changes. Regulated domains  edit  Agile software development methods were initially seen as best suitable for non-critical product developments, thereby excluded from use in regulated domains such as medical devices, pharmaceutical, financial, nuclear systems, automotive, and avionics sectors, etc. However, in the last several years, there have been several initiatives for the adaptation of agile methods for th ese domains. 69  70  71  72  73  There are numerous standards that may apply in regulated domains, including ISO 26262 , ISO 9000 , ISO 9001 , and ISOIEC 15504 . A number of key concerns are of particular importance in regulated domains 74  Quality assurance QA Systematic and inherent quality management underpinning a controlled professional process and reliability and correctness of product. Safety and security Formal planning and risk management to mitigate safety risks for users and securely protecting users from unintentional and malicious misuse. Traceability  Documentation providing auditable evidence of regulatory compliance and facilitating traceability and investigation of problems. Verification and Validation V V Embedded throughout the software development process e.g. user requirements specification, functional specification, design specification, code review, unit tests, integration tests, system tests. Experience and adoption  edit  Although agile software development methods can be used with any programming paradigm or language in practice, they were originally closely associated with object-oriented environments such as Smalltalk and Lisp and later Java. The initial adopters of agile methods were usually small to medium-sized teams working on unprecedented systems with requirements that were difficult to finalize and likely to change as the system was being developed. This section describes common problems that organizations encounter when they try to adopt agile software development methods as well as various techniques to measure the quality and performance of agile teams. 75  Measuring agility  edit  The best agile practitioners have always emphasized thorough engineering principles. As a result, there are a number of best practices and tools for measuring the performance of agile software development and teams. Internal assessments  edit  The Agility measurement index , amongst others, rates developments against five dimensions of product development duration, risk, novelty, effort, and interaction. 76  77  Other techniques are based on measurable goals 78  and one study suggests that velocity can be used as a metric of agility. 79  There are also agile self-assessments to determine whether a team is using agile software development practices Nokia test, 80  Karlskrona test, 81  42 points test. 82  Public surveys  edit  One of the early studies reporting gains in quality, productivity, and business satisfaction by using agile software developments methods was a survey conducted by Shine Technologies from November 2002 to January 2003. 83  A similar survey, the State of Agile , is conducted every year starting in 2006 with thousands of participants from around the software development community. This tracks trends on the benefits of agility, lessons learned, and good practices. Each survey has reported increasing numbers saying that agile software development helps them deliver software faster improves their ability to manage changing customer prio rities and increases their productivity. 84  Surveys have also consistently shown better results with agile product development methods compared to classical project management. 85  86  In balance, there are reports that some feel that agile development methods are still too young to enable extensive academic research of their success. 87  Common agile software development pitfalls  edit  Organizations and teams implementing agile software development often face difficulties transitioning from more traditional methods such as waterfall development , such as teams having an agile process forced on them. 88  These are often termed agile anti-patterns or more commonly agile smells . Below are some common examples Lack of overall product design  edit  A goal of agile software development is to focus more on producing working software and less on documentation. This is in contrast to waterfall models where the process is often highly controlled and minor changes to the system require significant revision of supporting documentation. However, this does not justify completely doing without any analysis or design at all. Failure to pay attention to design can cause a team to proceed rapidly at first but then to have significant rework required as they attempt to scale up the system. One of the key features of agile software development is that it is iterative. When done correctly design emerges as the system is developed and commonalities and opportunities for re-use are discovered. 89  Adding stories to an iteration in progress  edit  In agile software development, stories similar to use case descriptions are typically used to define requirements and an iteration is a short period of time during which the team commits to specific goals. 90  Adding stories to an iteration in progress is detrimental to a good flow of work. These should be added to the product backlog and prioritized for a subsequent iteration or in rare cases the iteration could be cancelled. 91  This does not mean that a story cannot expand. Teams must deal with new information, which may produce additional tasks for a story. If the new information prevents the story from being completed during the iteration, then it should be carried over to a subsequent iteration. However, it should be prioritized against all remaining stories, as the new information may have changed the storys original priority. Lack of sponsor support  edit  Agile software development is often implemented as a grassroots effort in organizations by software development teams trying to optimize their development processes and ensure consistency in the software development life cycle. By not having sponsor support, teams may face difficulties and resistance from business partners, other development teams and management. Additionally, they may suffer without appropriate funding and resources. 92  This increases the likelihood of failure. 93  Insufficient training  edit  A survey performed by VersionOne found respondents cited insufficient training as the most significant cause for failed agile implementations 94  Teams have fallen into the trap of assuming the reduced processes of agile software development compared to other methodologies such as waterfall means that there are no actual rules for agile software development.  citation needed  Product owner role is not properly filled  edit  The product owner is responsible for representing the business in the development activity and is often the most demanding role. 95  A common mistake is to have the product owner role filled by someone from the development team. This requires the team to make its own decisions on prioritization without real feedback from the business. They try to solve business issues internally or delay work as they reach outside the team for direction. This often leads to distraction and a breakdown in collaboration. 96  Teams are not focused  edit  Agile software development requires teams to meet product commitments, which means they should focus only on work for that product. However, team members who appear to have spare capacity are often expected to take on other work, which makes it difficult for them to help complete the work to which their team had committed. 97  Excessive preparationplanning  edit  Teams may fall into the trap of spending too much time preparing or planning. This is a common trap for teams less familiar with agile software development where the teams feel obliged to have a complete understanding and specification of all stories. Teams should be prepared to move forward only with those stories in which they have confidence, then during the iteration contin ue to discover and prepare work for subsequent iterations often referred to as backlog refinement or grooming. Problem-solving in the daily standup  edit  A daily standup should be a focused, timely meeting where all team members disseminate information. If problem-solving occurs, it often can only involve certain team members and potentially is not the best use of the entire teams time. If during the daily standup the team starts diving into problem-solving, it should be set aside until a sub-team can discuss, usually immediate ly after the standup completes. 98  Assigning tasks  edit  One of the intended benefits of agile software development is to empower the team to make choices, as they are closest to the problem. Additionally, they should make choices as close to implementation as possible, to use more timely information in the decision. If team members are assigned tasks by others or too early in the process, the benefits of localized and timely decisio n making can be lost. 99  Being assigned work also constrains team members into certain roles for example, team member A must always do the database work, which limits opportunities for cross-training. 99  Team members themselves can choose to take on tasks that stretch their abilities and provide cross-training opportunities. Scrum master as a contributor  edit  Another common pitfall is for a scrum master to act as a contributor. While not prohibited by the Scrum methodology, the scrum master needs to ensure they have the capacity to act in the role of scrum master first and not working on development tasks. A scrum masters role is to facilitate the process rather than create the product. 100  Having the scrum master also multitasking may result in too many context switches to be productive. Additionally, as a scrum master is responsible for ensuring roadblocks are removed so that the team can make forward progress, the benefit gained by individual tasks moving forward may not outweigh roadblocks that are deferred due to lack of capacity. 100  Lack of test automation  edit  Due to the iterative nature of agile development, multiple rounds of testing are often needed. Automated testing helps reduce the impact of repeated unit, integration, and regression tests and frees developers and testers to focus on higher value work. 101  Test automation also supports continued refactoring required by iterative software development. Allowing a developer to quickly run tests to confirm refactoring has not modified the functionality of the application may reduce the workload and increase confidence that cleanup efforts have not introduced new defects. Allowing technical debt to build up  edit  Focusing on delivering new functionality may result in increased technical debt . The team must allow themselves time for defect remediation and refactoring. Technical debt hinders planning abilities by increasing the amount of unscheduled work as production defects distract the team from further progress. 102  As the system evolves it is important to refactor as entropy of the system naturally increases. 103  Over time the lack of constant maintenance causes increasing defects and development costs. 102  Attempting to take on too much in an iteration  edit  A common misconception is that agile software development allows continuous change, however an iteration backlog is an agreement of what work can be completed during an iteration. 104  Having too much work-in-progress WIP results in inefficiencies such as context-switching and queueing. 105  The team must avoid feeling pressured into taking on additional work. 106  Fixed time, resources, scope, and quality  edit  Agile software development fixes time iteration duration, quality, and ideally resources in advance though maintaining fixed resources may be difficult if developers are often pulled away from tasks to handle production incidents, while the scope remains variable. The customer or product owner often push for a fixed scope for an iteration. However, teams should be reluctant to commit to the locked time, resources and scope commonly known as the project management triangle . Efforts to add scope to the fixed time and resources of agile software development may result in decreased quality. 107  Developer burnout  edit  Due to the focused pace and continuous nature of agile practices, there is a heightened risk of burnout among members of the delivery team. 108  Agile management  edit  The term agile management is applied to an iterative, incremental method of managing the design and build activities of engineering, information technology and other business areas that aim to provide new product or service development in a highly flexible and interactive manner, based on the principles expressed in the Manifesto for Agile Software Development . 109  Agile X techniques may also be called extreme project management . It is a variant of iterative life cycle 110  where deliverables are submitted in stages. The main difference between agile and iterative development is that agile methods complete small portions of the deliverables in each delivery cycle iteration, 111  while iterative methods evolve the entire set of deliverables over time, completing them near the end of the project. Both iterative and agile methods were developed as a reaction to various obstacles that developed in more sequential forms of project organization. For example, as technology projects grow in complexity, end users tend to have difficulty defining the long-term requirements without being able to view progressive prototypes. Projects that develop in iterations can constantly gather feedback to help refine those requirements. Agile management also offers a simple framework promoting communication and reflection on past work amongst team members. 112  Teams who were using traditional waterfall planning and adopted the agile way of development typically go through a transformation phase and often take help from agile coaches who help guide the teams through a smooth transformation. There are typically two styles of agile coaching push-based and pull-based agile coaching . Agile management approaches have also been employed and adapted to the business and government sectors. For example, within the federal government of the United States , the United States Agency for International Development USAID is employing a collaborative project management approach that focuses on incorporating collaborating, learning and adapting CLA strategies to iterate and adapt programming. 113  Agile methods are mentioned in the Guide to the Project Management Body of Knowledge  PMBOK Guide  under the Project Lifecycle definition Adaptive project life cycle , a project life cycle, also known as change-driven or agile methods, that is intended to facilitate change and require a high degree of ongoing stakeholder involvement. Adaptive life cycles are also iterative and incremental, but differ in that iterations are very rapid usually 2-4 weeks in length and are fixed in time and resources . 114  Applications outside software development  edit  Agile Brazil 2014 conference According to Jean-Loup Richet Research Fellow at ESSEC Institute for Strategic Innovation  Services this approach can be leveraged effectively for non-software products and for project management in general, especially in areas of innovation and uncertainty. The end result is a product or project that best meets current customer needs and is delivered with minimal costs, waste, and time, enabling companies to achieve bottom line gains earlier than via traditiona l approaches. 115  Agile software development methods have been extensively used for development of software products and some of them use certain characteristics of software, such as object technologies. 116  However, these techniques can be applied to the development of non-software products, such as computers, motor vehicles, 117  medical devices, food, clothing, and music. 118  Agile software development methods have been used in non-development IT infrastructure deployments and migrations . Some of the wider principles of agile software development have also found application in general management 119  e.g., strategy, governance, risk, finance under the terms business agility or agile business management. Under an agile business management model, agile software development techniques, practices, principles and values are expressed across five domains. 120  Integrated customer engagement  to embed customers within any delivery process to share accountability for productservice delivery. Facilitation-based management adopting agile management models, like the role of Scrum Master , to facilitate the day-to-day operation of teams. Agile work practices adopting specific iterative and incremental work practices such as Scrum , Kanban , test-driven development or feature-driven development across all business functions from sales, human resources , finance 121  and marketing . An enabling organisational structure with a focus on staff engagement , personal autonomy and outcomes based governance. Applications of agile process along with DevOps and lean manufacturing , to data analytics , business intelligence , big data , and data science is called DataOps Agile software development paradigms can be used in other areas of life such as raising children. Its success in child development might be founded on some basic management principles communication, adaptation, and awareness. In a TED Talk , Bruce Feiler shared how he applied basic agile paradigms to household management and raising children. 122  Criticism  edit  Agile practices can be inefficient in large organizations and certain types of developments. 123  Many organizations believe that agile software development methodologies are too extreme and adopt a Hybrid approach 124  that mixes elements of agile software development and plan-driven approaches. 125  Some methods, such as dynamic systems development method DSDM attempt this in a disciplined way, without sacrificing fundamental principles. The increasing adoption of agile practices has also been criticized as being a management fad that simply describes existing good practices under new jargon, promotes a one size fits all mindset towards development strategies, and wrongly emphasizes method over results. 126  Alistair Cockburn organized a celebration of the 10th anniversary of the Manifesto for Agile Software Development in Snowbird, Utah on 12 February 2011, gathering some 30 people who had been involved at the original meeting and since. A list of about 20 elephants in the room undiscussable agile topicsissues were collected, including aspects the alliances, failures and limitations of agile software development practices and context possible causes commercial interests, decontextualization, no obvious way to make progress based on failure, limited objective evidence, cognitive biases and reasoning fallacies, politics and culture. 127  As Philippe Kruchten wrote The agile movement is in some ways a bit like a teenager very self-conscious, checking constantly its appearance in a mirror, accepting few criticisms, only interested in being with its peers, rejecting en bloc all wisdom from the past, just because it is from the past, adopting fads and new jargon, at times cocky and arrogant. But I have no doubts that it will mature further, become more open to the outside world, more reflective, and therefore, more effective.  Philippe Kruchten 127  See also  edit  Workers self-management References  edit   Collier, Ken W. 2011. Agile Analytics A Value-Driven Approach to Business Intelligence and Data Warehousing . Pearson Education. pp.  121 ff. ISBN   9780321669544 . What is a self-organizing team .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  What is Agile Software Development . Agile Alliance. 8 June 2013 . Retrieved 4 April 2015 .  Rally 2010. Agile With a Capital A Vs. agile With a Lowercase a   . Archived from the original on 5 January 2016 . Retrieved 9 September 2015 . Cite uses deprecated parameter dead-url  help  CS1 maint unfit url  link   a b c Kent Beck  James Grenning Robert C. Martin  Mike Beedle Jim Highsmith  Steve Mellor  Arie van Bennekum Andrew Hunt  Ken Schwaber  Alistair Cockburn  Ron Jeffries  Jeff Sutherland  Ward Cunningham  Jon Kern Dave Thomas  Martin Fowler  Brian Marick 2001. Manifesto for Agile Software Development . Agile Alliance . Retrieved 14 June 2010 .  Which is better  Kanban or Scrum , 4 March 2016  a b Larman, Craig 2004. Agile and Iterative Development A Managers Guide . Addison-Wesley. p.  27. ISBN   978-0-13-111155-4 .  Dyb, Tore Dingsyr, Torgeir 1 August 2008. Empirical studies of agile software development A systematic review. Information and Software Technology . 50 910 833859. doi  10.1016j.infsof.2008.01.006 . ISSN   0950-5849 .  Lee, Gwanhoo Xia, Weidong 2010. Toward Agile An Integrated Analysis of Quantitative and Qualitative Field Data on Software Development Agility. MIS Quarterly . 34 1 87114. doi  10.230720721416 . JSTOR   20721416 .  Gerald M. Weinberg , as quoted in Larman  Basili 2003 , pp.  4756 We were doing incremental development as early as 1957 in Los Angeles, under the direction of Bernie Dimsdale at IBMs Service Bureau Corporation . He was a colleague of John von Neumann , so perhaps he learned it there, or assumed it as totally natural. I do remember Herb Jacobs primarily, though we all participated developing a large simulation for Motorola, where the technique used was, as far as I can tell  ... All of us, as far as I can remember, thought waterfalling of a huge project was rather stupid, or at least ignorant of the realities. I think what the waterfall description did for us was make us realize that we were doing something else, something unnamed except for software development.  Evolutionary Project Management Original page, external archive . Gilb. Archived from the original on 27 March 2016 . Retrieved 30 April 2017 . Cite uses deprecated parameter deadurl  help   Evolutionary Project Management New page . Gilb . Retrieved 30 April 2017 .  Edmonds, E. A. 1974. A Process for the Development of Software for Nontechnical Users as an Adaptive System. General Systems . 19  21518.  Gilb, Tom 1 April 1981. Evolutionary development. ACM SIGSOFT Software Engineering Notes . 6 2 17. doi  10.11451010865.1010868 .  Martin, James 1991. Rapid Application Development . Macmillan. ISBN   978-0-02-376775-3 .  Kerr, James M. Hunter, Richard 1993. Inside RAD How to Build a Fully Functional System in 90 Days or Less . McGraw-Hill. p.  3. ISBN   978-0-07-034223-1 .  Iacocca Institute 1991. 21st Century Manufacturing Enterprise Strategy An Industry Led View. Iacocca Institute, Lehigh University, Bethlehem, PA.  Presley, A., J. Mills and D. Liles 1995. Agile Aerospace Manufacturing. Nepcon East 1995, Boston.  Anderson, David 2005. Declaration of Interdependence . Archived from the original on 27 January 2018 . Retrieved 4 October 2018 . Cite uses deprecated parameter dead-url  help   McDonald, Kent 1 November 2016. How You Can Help Agile Alliance Help You . Agile Alliance Blog . Retrieved 4 July 2017 .  Examining the Agile Manifesto . Ambysoft Inc . Retrieved 6 April 2011 .  Jim Highsmith 2001. History The Agile Manifesto . agilemanifesto.org.  a b Kent Beck  James Grenning Robert C. Martin  Mike Beedle Jim Highsmith  Steve Mellor  Arie van Bennekum Andrew Hunt  Ken Schwaber  Alistair Cockburn  Ron Jeffries  Jeff Sutherland  Ward Cunningham  Jon Kern Dave Thomas  Martin Fowler  Brian Marick 2001. Principles behind the Agile Manifesto . Agile Alliance. Archived from the original on 14 June 2010 . Retrieved 6 June 2010 . Cite uses deprecated parameter deadurl  help   Moran, A. 2014. Agile Risk Management . Springer Verlag. ISBN   978-3319050072 .  Beck, Kent 1999. Embracing Change with Extreme Programming. Computer . 32 10 7077. doi  10.11092.796139 .  Preuss, Deborah Hartmann 13 October 2006. Study Co-Located Teams vs. the Cubicle Farm . InfoQ . Retrieved 23 October 2018 .  Cockburn, Alistair 2007. Agile Software Development The Cooperative Game . www.pearson.com 2nd ed.. Addison-Wesley Professional . Retrieved 23 October 2018 .  Cockburn, Alistair 19 June 2008. Information radiator .  Ambler, Scott 12 April 2002. Agile Modeling Effective Practices for EXtreme Programming and the Unified Process . John Wiley  Sons. pp.  12, 164, 363. ISBN   978-0-471-20282-0 .  Vasiliauskas, Vidas 2014. Developing agile project task and team management practices . Eylean. Archived from the original on 15 September 2014 . Retrieved 15 September 2014 . Cite uses deprecated parameter dead-url  help   Jeffries, Ron Anderson, Ann Hendrickson, Chet 2001. Extreme Programming installed . Addison-Weslsy. pp.   72147 . ISBN   978-0201-70842-4 .  Lisa Crispin Janet Gregory 2009. Agile Testing A Practical Guide for Testers and Agile Teams . Addison-Wesley.  Mitchell, Ian 2016. Agile Development in Practice . Tamare House. p.  11. ISBN   978-1-908552-49-5 .  Larman, Craig 2004. Agile and Iterative Development A Managers Guide . Addison-Wesley. p.  27. ISBN   978-0-13-111155-4 .  Boehm, B.  R. Turner 2004. Balancing Agility and Discipline A Guide for the Perplexed . Boston, MA Addison-Wesley. ISBN   978-0-321-18612-6 . Appendix A, pages  165194  Larman, Craig 2004. Chapter 11 Practice Tips . Agile and Iterative Development A Managers Guide . p.  253. ISBN   9780131111554 . Retrieved 14 October 2013 .  Sliger, Michele Broderick, Stacia 2008. The Software Project Managers Bridge to Agility . Addison-Wesley. p.  46. ISBN   978-0-321-50275-9 .  a b Boehm, B.  R. Turner 2004. Balancing Agility and Discipline A Guide for the Perplexed . Boston, MA Addison-Wesley. pp.  5557. ISBN   978-0-321-18612-6 .  At the Kickoff Project Development vs Product Development . AltexSoft Inc . 12 February 2016 . Retrieved 31 May 2016 .  Rakitin, Steven R. 2001. Manifesto Elicits Cynicism Readers letter to the editor by Steven R. Rakitin. IEEE Computer . 34  4. The article titled Agile Software Development The Business of Innovation ... is yet another attempt to undermine the discipline of software engineering ... We want to spend all our time coding. Remember, real programmers dont write documentation.  a b Scott Ambler. AgileLean Documentation Strategies for Agile Software Development .  Scott Ambler. Just Barely Good Enough Models and Documents An Agile Best Practice .  Geoffrey Wiseman 18 July 2007. Do Agile Methods Require Documentation . InfoQ. quoting Cooper, Ian 6 July 2007. Staccato SignalsAgile and Documentation . WordPress.com .  a b c Abrahamson P, Salo O, Ronkainen J, Warsta J 2002. Agile software development methods Review and analysis PDF Technical report. VTT . 478.  Guide to Agile Practices . the Agile Alliance. Archived from the original on 9 February 2014. Cite uses deprecated parameter deadurl  help   a b Aydin, M.N. Harmsen, F. Slooten Stagwee, R. A. 2004. An Agile Information Systems Development Method in use. Turk J Elec Engin . 12 2 127138.  Morris, David 2015. The Paradox of Agile Transformation Why trying too hard to be Agile stops organisations from becoming truly agile . NZ University of Auckland. doi  10.13140RG.2.2.32698.08640 .  Abrahamsson, P., Warsta, J., Siponen, M.T.,  Ronkainen, J. 2003. New Directions on Agile Methods A Comparative Analysis. Proceedings of ICSE03 , 244-254  Mirakhorli, M. Rad, A.K. Shams, F. Pazoki, M. Mirakhorli, A. 2008. RDP technique a practice to customize xp. Proceedings of the 2008 international workshop on Scrutinizing agile practices or shoot-out at the agile corral APOS 08 . ACM. pp.  2332. doi  10.11451370143.1370149 . ISBN   978-1-60558-021-0 .  Aydin, M.N. Harmsen, F. van Slooten, K. Stegwee, R.A. 2005. On the Adaptation of An Agile InformationSuren Systems Development Method. Journal of Database Management . 16 4 2024. doi  10.4018jdm.2005100102 .  Schwaber, K 2006 Scrum is hard and disruptive.  Vodde, B 2016 The Story of LeSS. Closing Keynote. Scrum Australia, Melbourne. April, 2016.  Lagstedt, A., and Dahlberg, T. 2018. Understanding the Rarity of ISD Method Selection  Bounded Rationality and Functional Stupidity. PACIS 2018 Proceedings. 154. httpsaisel.aisnet.orgpacis2018154 .  Park, J. S., McMahon, P. E., and Myburgh, B. 2016. Scrum Powered by Essence. ACM SIGSOFT Software Engineering Notes, 411, pp. 1-8.  Beck, K. 1999. Extreme Programming Explained Embrace Change . Boston, MA Addison-Wesley. ISBN   978-0-321-27865-4 .  Evans, Ian. Agile Delivery at British Telecom . Retrieved 21 February 2011 .  a b W. Scott Ambler 2006 Supersize Me in Dr. Dobbs Journal, 15 February 2006.  Schaaf, R.J. 2007. Agility XL Systems and Software Technology Conference 2007 Archived 13 March 2016 at the Wayback Machine , Tampa, FL  Bridging the Distance . Sdmagazine.com . Retrieved 1 February 2011 .  Fowler, Martin. Using an Agile Software Process with Offshore Development . Martinfowler.com . Retrieved 6 June 2010 .  Leffingwell, Dean. Scaled Agile Framework . Scaled Agile Framework .  Schwaber, Ken. Nexus Guide The Definitive Guide to Nexus The exoskeleton of scaled Scrum development PDF . scrum.org . Retrieved 14 September 2015 .  Sutherland, Jeff Brown, Alex 23 July 2014. Scrum At Scale Part 1 . Retrieved 14 September 2015 .  Beedle, Mike. Enterprise Scrum . Retrieved 25 September 2015 .  Ebbage, Michael. Setchu  Agile at Scale . Retrieved 30 September 2015 .  XSCALE Alliance . Agiletng.org . Retrieved 26 March 2019 .  Agilepath  Collaborate.Innovate.Succeed . Agile-path.com. 18 January 2019 . Retrieved 26 March 2019 .  httpwww.holistic-software.com  Agile Processes Workshop II Managing Multiple Concurrent Agile Projects. Washington OOPSLA 2002  Cawley, Oisn Wang, Xiaofeng Richardson, Ita 2010. Abrahamsson, Pekka Oza, Nilay eds.. LeanAgile Software Development Methodologies in Regulated Environments  State of the Art . Lean Enterprise Software and Systems . Lecture Notes in Business Information Processing. 65 . pp.  3136. doi  10.1007978-3-642-16416-3_4 . hdl  10344683 . ISBN   978-3-642-16415-6 .  McHugh, Martin McCaffery, Fergal Coady, Garret 4 November 2014. Mitasiunas, Antanas Rout, Terry OConnor, Rory V. et al. eds.. An Agile Implementation within a Medical Device Software Organisation . Software Process Improvement and Capability Determination . Communications in Computer and Information Science. 477 . pp.  190201. doi  10.1007978-3-319-13036-1_17 . ISBN   978-3-319-13035-4 .  Wang, Yang Ramadani, Jasmin Wagner, Stefan 29 November 2017. An Exploratory Study on Applying a Scrum Development Process for Safety-Critical Systems . Product-Focused Software Process Improvement . Lecture Notes in Computer Science. 10611 . pp.  324340. arXiv  1703.05375 . Bibcode  2017arXiv170305375W . doi  10.1007978-3-319-69926-4_23 . ISBN   9783319699257 .  SafeScrum - SINTEF . Sintef.no . Retrieved 26 March 2019 .  Thor Myklebust, Tor Stlhane, Geir Kjetil Hanssen, Tormod Wien and Brge Haugset Scrum, documentation and the IEC 61508-32010 software standard, httpwww.sintef.noglobalassetsec-61508-documentation-and-safescrum-psam12.pdf  Fitzgerald, B. Stol, K.-J. OSullivan, R. OBrien, D. May 2013. Scaling agile methods to regulated environments An industry case study . 2013 35th International Conference on Software Engineering ICSE . pp.  863872. doi  10.1109ICSE.2013.6606635 . hdl  103443055 . ISBN   978-1-4673-3076-3 .  Beck, Kent 2000. Extreme Programming Explained . Addison-Wesley. pp.   124 . ISBN   978-0201616415 .  Datta, Subhajit 2006. Agility measurement index a metric for the crossroads of software development methodologies. ACM-SE 44 Proceedings of the 44th annual Southeast regional conference . p.  271. doi  10.11451185448.1185509 . ISBN   1595933158 .  David Bocks Weblog   Weblog . Jroller.com. Archived from the original on 11 January 2006 . Retrieved 2 April 2010 . Cite uses deprecated parameter dead-url  help   Peter Lappo Henry C.T. Andrew. Assessing Agility PDF . Retrieved 6 June 2010 .  Kurian, Tisni 2006. Agility Metrics A Quantitative Fuzzy Based Approach for Measuring Agility of a Software Process, ISAM-Proceedings of International Conference on Agile Manufacturing06ICAM-2006 , Norfolk, U.S.  Joe Little 2 December 2007. Nokia test, A scrum-specific test . Agileconsortium.blogspot.com . Retrieved 6 June 2010 .  Mark Seuffert Mayberg, Sweden. Karlskrona test, A generic agile adoption test . Mayberg.se . Retrieved 5 April 2014 .  How Agile Are You Take This 42 Point Test . allaboutagile.com. Archived from the original on 5 May 2014 . Retrieved 3 April 2014 . Cite uses deprecated parameter dead-url  help   Agile Methodologies Survey Results PDF . Shine Technologies. January 2003. Archived from the original PDF on 21 August 2010 . Retrieved 3 June 2010 . 95 stated that there was either no effect or a cost reduction  ... 93 stated that productivity was better or significantly better  ... 88 stated that quality was better or significantly better  ... 83 stated that business satisfaction was better or significantly better Cite uses deprecated parameter deadurl  help   2013 State of Agile report Why Agile . stateofagile.com. 27 January 2014. Archived from the original on 28 August 2014 . Retrieved 13 August 2014 . Cite uses deprecated parameter deadurl  help   Status Quo Agile , Second study on success and forms of usage of agile methods. Retrieved 1 July 2015  Ambler, Scott 3 August 2006. Survey Says Agile Works in Practice . Dr. Dobbs . Retrieved 3 June 2010 . Only 6 indicated that their productivity was lowered  ... No change in productivity was reported by 34 of respondents and 60 reported increased productivity  ... 66 responded that the quality is higher  ... 58 of organizations report improved satisfaction, whereas only 3 report reduced satisfaction.  Answering the Where is the Proof That Agile Methods Work Question . Agilemodeling.com. 19 January 2007 . Retrieved 2 April 2010 .  Shore  Warden 2008 , p.  47  Beck, Kent 2000. Extreme Programming Explained . Addison-Wesley. pp.   4849 . ISBN   978-0201616415 .  Rouse, Margaret. Sprint software development definition . searchsoftwarequality.techtarget.com . Retrieved 2 October 2015 .  Goldstein, Ilan 11 October 2011. Sprint issues  when sprints turn into crawls . www.axisagile.com.au . Retrieved 8 June 2014 .  Project Roles and Responsibility Distribution . agile-only.com . Retrieved 15 June 2014 .  Bourne, Lynda. What Does a Project Sponsor Really Do . blogs.pmi.org . Retrieved 8 June 2014 .  9th State of Agile Report . Stage of Agile Survey . VersionOne. Archived from the original on 12 January 2015 . Retrieved 8 June 2014 . Cite uses deprecated parameter dead-url  help   Sims, Chris Johnson, Hillary Louise 15 February 2011. The Elements of Scrum Kindle ed.. Dymaxicon. p.  73.  Rothman, Johanna Rothman 25 August 2011. When You Have No Product Owner At All . www.jrothman.com . Retrieved 8 June 2014 .  Fox, Alyssa 8 April 2014. Working on Multiple Agile Teams . techwhirl.com . Retrieved 14 June 2014 .  Daily Scrum Meeting . www.mountaingoatsoftware.com . Retrieved 14 June 2014 .  a b May, Robert. Effective Sprint Planning . www.agileexecutives.org . Archived from the original on 28 June 2014 . Retrieved 14 June 2014 . Cite uses deprecated parameter deadurl  help   a b Berczuk, Steve. Mission Possible ScrumMaster and Technical Contributor . www.agileconnection.com . Retrieved 14 June 2014 .  Namta, Rajneesh. Thoughts on Test Automation in Agile . www.infoq.com . Retrieved 14 June 2014 .  a b Band, Zvi 22 March 2014. Technical Debt  Red October . Retrieved 8 June 2014 .  Shore, James. The Art of Agile Development Refactoring . www.jamesshore.com . Retrieved 14 June 2014 .  Step 4 Sprint Planning Tasks . www.allaboutagile.com . Archived from the original on 29 June 2014 . Retrieved 14 June 2014 . Cite uses deprecated parameter dead-url  help   George, Claire. Why Limiting Your Work-in-Progress Matters . leankit.com . Retrieved 14 June 2014 .  Sprint Planning Meeting . www.mountaingoatsoftware.com . Retrieved 14 June 2014 .  McMillan, Keith. Time, Resources, Scope... and Quality . www.adeptechllc.com . Retrieved 15 June 2014 .  Current study on limitations of Agile. Procedia Computer Science . 78  291297. January 2016. doi  10.1016j.procs.2016.02.056 .  Moran, Alan 2015. Managing Agile Strategy, Implementation, Organisation and People . Springer. ISBN   978-3-319-16262-1 .  ExecutiveBrief, Which Life Cycle Is Best For Your Project , PM Hut. Accessed 23 October 2009.  Agile Project Management . VersionOne . Retrieved 1 June 2015 .  What is Agile Management . Project Laneways . Retrieved 1 June 2015 .  USAID. ADS Chapter 201 Program Cycle Operational Policy . Retrieved 19 April 2017  Project Management Institute , A Guide to the Project Management Body of Knowledge PMBOK Guide, Fifth Edition  Richet, Jean-Loup 2013. Agile Innovation . Cases and Applied Research, n31. ESSEC-ISIS. ISBN   978-2-36456-091-8  Smith, Preston G 2007. Flexible Product Development . Jossey-Bass. p.  25. ISBN   978-0-7879-9584-3 .  WIKISPEED  Applying Agile software principles and practices for fast automotive development . Agile Business Management Consortium. 3 December 2013 . Retrieved 11 September 2015 .  Newton Lee 2014. Getting on the Billboard Charts Music Production as Agile Software Development, Digital Da Vinci Computers in Music . Springer ScienceBusiness Media. ISBN   978-1-4939-0535-5 .  Moran, Alan 2015. Managing Agile Strategy, Implementation, Organisation and People . Springer Verlag. ISBN   978-3-319-16262-1 .  Leybourn, Evan 2013. Directing the Agile Organisation A Lean Approach to Business Management . IT Governance Publishing. ISBN   978-1-849-28491-2 .  Pair Trading Collaboration in Finance . The Agile Director. 11 March 2015 . Retrieved 11 September 2015 .  Agile programming  for your family .  Larman, Craig Bas Vodde 13 August 2009. Top Ten Organizational Impediments to Large-Scale Agile Adoption . InformIT.  Introduction to Hybrid project management . 20 July 2016.  Barlow, Jordan B. Justin Scott Giboney Mark Jeffery Keith David W. Wilson Ryan M. Schuetzler Paul Benjamin Lowry Anthony Vance 2011. Overview and Guidance on Agile Development in Large Organizations. Communications of the Association for Information Systems . 29 1 2544. doi  10.177051CAIS.02902 .  Kupersmith, Kupe. Agile is a Fad .  a b Kruchten, Philippe 20 June 2011. Agiles Teenage Crisis . InfoQ. Further reading  edit  Abrahamsson, P. Salo, O. Ronkainen, J. Warsta, J. 2002. Agile Software Development Methods Review and Analysis . VTT Publications. 478. Ashmore, Sondra Runyan, Kristin 2014. Introduction to Agile Methods . Addison-Wesley. ISBN   978-0321929563 . Cohen, D. Lindvall, M. Costa, P. 2004. An introduction to agile methods . In Zelkowitz, Marvin ed.. Advances in Software Engineering . Advances in Computers. 62 . Academic Press. pp.  166. ISBN   978-0-08-047190-7 . Dingsyr, Torgeir Dyb, Tore Moe, Nils Brede 2010. Agile Software Development Current Research and Future Directions . Springer. ISBN   978-3-642-12575-1 . Fowler, Martin 2001. Is Design Dead . In Succi, Giancarlo Marchesi, Michele eds.. Extreme Programming Examined . Addison-Wesley. pp.  318. ISBN   978-0-201-71040-3 . Larman, Craig Basili, Victor R. June 2003. Iterative and Incremental Development A Brief History PDF . IEEE Computer . 36 3 4756. doi  10.1109MC.2003.1204375 . Casagni, Michelle Benito, Robert Mayfield, Dr Kathleen M. Northern, Carlton 8 September 2013. Handbook for Implementing Agile in Department of Defense Information Technology Acquisition . The Mitre Corporation . MITRE. Moran, Alan 2015. Managing Agile Strategy, Implementation, Organisation and People . Springer. ISBN   978-3-319-16262-1 . Riehle, Dirk. A Comparison of the Value Systems of Adaptive Software Development and Extreme Programming How Methodologies May Learn From Each Other . In Succi  Marchesi 2001 Shore, James Warden, Shane 2008. The Art of Agile Development . OReilly Media. ISBN   978-0-596-52767-9 . Stephens, M. Rosenberg, D. 2003. Extreme Programming Refactored The Case Against XP . Apress. ISBN   978-1-59059-096-6 . External links  edit  Agile Manifesto Agile Glossary The New Methodology Martin Fowler s description of the background to agile methods Ten Authors of The Agile Manifesto Celebrate its Tenth Anniversary AgilePatterns.org v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Authority control BNE  XX5107539 BNF  cb16516550f data GND  4806620-5 LCCN  sh2007006411 SUDOC  152847367 Retrieved from  httpsen.wikipedia.orgwindex.phptitleAgile_software_development oldid914516106  Categories  Software project management Software development philosophies Agile software development Hidden categories CS1 errors deprecated parameters CS1 maint unfit url Webarchive template wayback links Articles with short description Wikipedia articles needing clarification from February 2019 Wikipedia articles needing clarification from December 2015 All articles with unsourced statements Articles with unsourced statements from May 2018 Use dmy dates from January 2012 Wikipedia articles with BNE identifiers Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Wikipedia articles with SUDOC identifiers