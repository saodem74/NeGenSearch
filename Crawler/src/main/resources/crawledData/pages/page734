Jensens Device From Wikipedia, the free encyclopedia Jump to navigation Jump to search Jensens Device is a computer programming technique that exploits call by name . It was devised by Danish computer scientist Jrn Jensen , who worked with Peter Naur at Regnecentralen . They worked on the GIER Algol compiler, one of the earliest correct implementations of ALGOL 60 . 1  ALGOL 60 used call by name. Contents 1 Description 1.1 GPS 2 Criticism 3 See also 4 References 5 External links Description  edit  Jensens device exploits call by name and side-effects. Call by name is an argument passing convention that delays the evaluation of an argument until it is actually used in the procedure a consequence of the copy rule for procedures. Algol introduced call by name. A classic example of Jensens device is a procedure that computes the sum of a series,  k  l u a k displaystyle Sigma _klua_k  2  3  4  real procedure Sumk, l, u, ak value l, u integer k, l, u real ak comment k and ak are passed by name begin real s s   0 for k   l step 1 until u do s   s  ak Sum   s end  In the procedure, the index variable k and summation term ak are passed by name. Call by name enables the procedure to change the value of the index variable during execution of the for loop. Call by name also causes the ak argument to be reevaluated during each iteration of the loop. Typically, ak will depend upon the changing side-effected k . For example, code to compute the sum of the first 100 terms of a real array V would be Sumi, 1, 100, Vi. During the execution of Sum , the actual argument i will increment during each step of the for loop, and each of the procedures evaluations of ak will use the current value of i to access the successive array elements Vi . Jensens device is general. A double summation can be done as Sumi, l, m, Sumj, l, n, Ai,j The Sum function can be employed for arbitrary functions merely by employing the appropriate expressions. If a sum of integers were desired the expression would be just Sumi,1,100,i , if a sum of squares of integers, then Sumi,1,100,ii , and so on. 5  A slight variation would be suitable for initiating a numerical integration of an expression by a method very similar to that of Sum . The evaluation of ak is implemented with a thunk , which is essentially a subroutine with an environment. The thunk is a closure with no arguments. Each time a procedure needs the value of its formal argument, it simply calls the thunk. The thunk evaluates the actual argument in the scope of the calling code not the scope of the procedure. In the absence of this pass-by-name facility, it would be necessary to define functions embodying those expressions to be passed according to the protocols of the computer language, or to create a compendium function along with some arrangement to select the desired expression for each usage. GPS  edit  Another example is GPS General Problem Solver, described in D. E. Knuth and J. N. Merners ALGOL 60 confidential . 6  real procedure GPSI, N, Z, V real I, N, Z, V begin for I   1 step 1 until N do Z   V GPS   1 end  Following is a single statement which finds m-th prime using GPS. I   GPSI, if I0 then -1.0 else I, P, if I1 then 1.0 else if GPSA, I, Z, if A1 then 1.0 else if entierAentierIentierAentierI  A I then 0.0 else Z  Z then  if P m then P1 else IGPSA, 1.0, I, -1.0 else P Note In the original paper, the expression near the end is GPSA, 1.0. I, 0.0 , due to a corner case in the specification of the semantics of ALGOL 60s for statement. Criticism  edit  Jensens device relies on call by name, but call by name is subtle and has some problems. Consequently, call by name is not available in most languages. Knuth comments that ALGOL 60 cannot express an incrementn procedure that increases its argument by one the call incrementAi does not do the expected action if i is a functional that changes with each access. 7  Knuth says, The use of macro definition facilities to extend language, instead of relying solely on procedures for this purpose, results in a more satisfactory running program. Others point out that a call by name procedure that swaps its argument can have subtle problems. 8  An obvious swapping procedure is procedure swapa, b integer a, b begin integer temp temp   a a   b b   temp end The procedure does the right thing for many arguments, but the invocation of swapi,Ai is problematic. Using the Copy Rule leads to the assignments temp   i i   Ai Ai   temp The problem is the second assignment changes i , so the Ai in the third assignment probably will not be the same array element as at the start. If on the other hand the procedure were to be coded the other way around with b being saved to temp instead of a  then the desired action would result, unless it were invoked as swapAi,i See also  edit  Call stack  stack frame, static link, and display closure including environment link Funarg problem  closures can be complicated Man or boy test  environment test Duffs Device References  edit   Peter Naurs 2005 Turing Award citation Archived 2008-02-12 at the Wayback Machine mentions his work with Jensen on GIER Algol  MacLennan, Bruce J. 1987, Principles of Programming Languages Design, Evaluation, and Implementation Second ed., Holt, Rinehart  Winston, ISBN   0-03-005163-0 .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em , pp  141 142  Dijkstra, E. W. November 1961, Defense of ALGOL 60 Letter to the Editor, Communications of the ACM , 4 11 502503, doi  10.1145366813.366844  Knuth, D. E. October 1967, The Remaining Troublespots in ALGOL 60, Communications of the ACM , 10 10 611617, doi  10.1145363717.363743  Sum requires a real argument for the term, so type conversion is assumed.  Donald E. Knuth and Jack N. Merner. 1961. ALGOL 60 confidential. Commun. ACM 4, 6 June 1961, 268-272. DOI10.1145366573.366599 httpdoi.acm.org10.1145366573.366599  Knuth 1967 , p.  613. For example, incrementAincrementj will increment j twice.  MacLennan 1987 External links  edit  httpswww.cs.indiana.edulwwwpubtechreportsTR186.pdf Retrieved from  httpsen.wikipedia.orgwindex.phptitleJensen27s_Device oldid836260919  Categories  Programming language design Hidden categories Webarchive template wayback links Articles with example ALGOL 60 code