Software archaeology From Wikipedia, the free encyclopedia Jump to navigation Jump to search Software archaeology or software archeology is the study of poorly documented or undocumented legacy software implementations, as part of software maintenance . 1  2  Software archaeology, named by analogy with archaeology , 3  includes the reverse engineering of software modules, and the application of a variety of tools and processes for extracting and understanding program structure and recovering design information. 1  4  Software archaeology may reveal dysfunctional team processes which have produced poorly designed or even unused software modules. 5  The term has been in use for decades, 6  and reflects a fairly natural metaphor a programmer reading legacy code may feel that he or she is in the same situation as an archaeologist exploring the rubble of an ancient civilization. 7  Contents 1 Techniques 2 See also 3 References 4 External links Techniques  edit  A workshop on Software Archaeology at the 2001 OOPSLA Object-Oriented Programming, Systems, Languages  Applications conference identified the following software archaeology techniques, some of which are specific to object-oriented programming  7  Scripting languages to build static reports and for filtering diagnostic output Ongoing documentation in HTML pages or Wikis Synoptic signature analysis, statistical analysis, and software visualization tools Reverse-engineering tools Operating-system-level tracing via truss or strace Search engines and tools to search for keywords in source files IDE file browsing Unit testing frameworks such as JUnit and CppUnit API documentation generation using tools such as Javadoc and doxygen Debuggers More generally, Andy Hunt and Dave Thomas note the importance of version control , dependency management, text indexing tools such as GLIMPSE and SWISH-E , and drawing a map as you begin exploring. 7  Like true archaeology, software archaeology involves investigative work to understand the thought processes of ones predecessors. 7  At the OOPSLA workshop, Ward Cunningham suggested a synoptic signature analysis technique which gave an overall feel for a program by showing only punctuation, such as semicolons and curly braces . 8  In the same vein, Cunningham has suggested viewing programs in 2 point font in order to understand the overall structure. 9  Another technique identified at the workshop was the use of aspect-oriented programming tools such as AspectJ to systematically introduce tracing code without directly editing the legacy program. 7  Network and temporal analysis techniques can reveal the patterns of collaborative activity by the developers of legacy software, which in turn may shed light on the strengths and weaknesses of the software artifacts produced. 10  Michael Rozlog of Embarcadero Technologies has described software archaeology as a six-step process which enables programmers to answer questions such as What have I just inherited and Where are the scary sections of the code 11  These steps, similar to those identified by the OOPSLA workshop, include using visualization to obtain a visual representation of the programs design, using software metrics to look for design and style violations, using unit testing and profiling to look for bugs and performance bottlenecks, and assembling design information recovered by the process. 11  Software archaeology can also be a service provided to programmers by external consultants. 12  Mitch Rosenberg of InfoVentions.net, Inc. claims  citation needed  that the first law of software archaeology he calls it code or data archaeology is Everything that is there is there for a reason, and there are 3 possible reasons It used to need to be there but no longer does It never needed to be there and the person that wrote the code had no clue It STILL needs to be there and YOU have no clue The corollary to this law is that, until you know which was the reason, you should NOT modify the code or data. Software archaeology has continued to be a topic of discussion at more recent software engineering conferences. 13  The profession of programmerarchaeologist features prominently in Vernor Vinge s A Deepness in the Sky . 14  See also  edit  Software architecture recovery Code refactoring Retrocomputing Software brittleness Software rot Software entropy Abandonware References  edit   a b Gregorio Robles, Jesus M. Gonzalez-Barahona, and Israel Herraiz,  An Empirical Approach to Software Archaeology , Poster Proceedings of the International Conference on Software Maintenance , 2005.   Agile Legacy System Analysis and Integration Modeling  by Scott W. Ambler at agilemodeling.com, accessed 20 August 2010 Without accurate documentation, or access to knowledgeable people, your last resort may be to analyze the source code for the legacy system... This effort is often referred to as software archaeology.  Bryon Moyer,  Software Archeology Modernizing Old Systems , Embedded Technology Journal, March 4, 2009.  Richard Hopkins and Kevin Jenkins, Eating the IT Elephant Moving from greenfield development to brownfield , Addison-Wesley, 2008, .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em ISBN   0-13-713012-0 , p. 93.  Diomidis Spinellis and Georgios Gousios, Beautiful Architecture , OReilly, 2009, ISBN   0-596-51798-X , p. 29.  An early discussion is Judith E. Grass,  Object-Oriented Design Archaeology with CIA , Computing Systems , Vol. 5, No. 1, Winter 1992.  a b c d e Andy Hunt and Dave Thomas ,  Software Archaeology , IEEE Software , vol. 19, no. 2, pp. 20-22, Mar.Apr. 2002, doi  10.110952.991327 .  Ward Cunningham ,  Signature Survey A Method for Browsing Unfamiliar Code , Workshop Position Statement, Software Archeology Understanding Large Systems, OOPSLA 2001.   Software Archeology  on John D. Cooks blog The Endeavour , November 10, 2009.  Cleidson de Souza, Jon Froehlich, and Paul Dourish,  Seeking the Source Software Source Code as a Social and Technical Artifact , Proceedings of the 2005 International ACM SIGGROUP Conference on Supporting Group Work, pp. 197-206.  a b Michael Rozlog,  Software Archeology What Is It and Why Should Java Developers Care , article on java.sys-con.com, January 28, 2008.  Simon Sharwood, Raiders of the Lost Code , ZDNet , November 3, 2004.  For example, the 32nd ACMIEEE International Conference on Software Engineering in Cape Town, South Africa in May 2010.  httpgarethrees.org20130612archaeology External links  edit  Position papers , OOPSLA 2001 Workshop on Software Archeology Understanding Large Systems Writing code, reading code and software archeology , Once More into the Code blog at Computerworld , September 23, 2009 How To Apply Software Archeology To Your Development Process , presentation by Michael Rozlog, March 13, 2008 OOPSLA 2008 Podcast with Grady Booch on software archaeology and related topics v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleSoftware_archaeology oldid909757856  Categories  Computer jargon Software maintenance Hidden categories All articles with unsourced statements Articles with unsourced statements from June 2016