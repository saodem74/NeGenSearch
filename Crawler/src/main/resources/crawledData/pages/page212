Lean software development From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Lean software development     news    newspapers    books    scholar    JSTOR  July 2014   Learn how and when to remove this template message  Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Lean software development is a translation of lean manufacturing principles and practices to the software development domain. Adapted from the Toyota Production System , 1  it is emerging with the support of a pro-lean subculture within the Agile community. Lean offers a solid conceptual framework, values and principles, as well as good practices, derived from experience, that support agile organizations. Contents 1 Origin 2 Lean principles 2.1 Eliminate waste 2.2 Amplify learning 2.3 Decide as late as possible 2.4 Deliver as fast as possible 2.5 Empower the team 2.6 Build integrity in 2.7 Optimize the Whole 3 Lean software practices 4 See also 5 References Origin  edit  The term lean software development originated in a book by the same name, written by Mary Poppendieck and Tom Poppendieck in 2003. 2  The book restates traditional lean principles , as well as a set of 22 tools and compares the tools to corresponding agile practices. The Poppendiecks involvement in the Agile software development community, including talks at several Agile conferences 3  has resulted in such concepts being more widely accepted within the Agile community. Lean principles  edit  Lean development can be summarized by seven principles, very close in concept to lean manufacturing principles 4  Eliminate waste Amplify learning Decide as late as possible Deliver as fast as possible Empower the team Build integrity in Optimize the whole Eliminate waste  edit  Lean philosophy regards everything not adding value to the customer as waste  muda . Such waste may include 5  Partially done work Extra features Relearning Task switching Waiting Handoffs Defects Management activities Industry research revealed these software development wastes 6  Building the wrong feature or product Mismanaging the backlog Rework Unnecessarily complex solutions Extraneous cognitive load Psychological distress Waitingmultitasking Knowledge loss Ineffective communication. In order to eliminate waste, one should be able to recognize it. If some activity could be bypassed or the result could be achieved without it, it is waste. Partially done coding eventually abandoned during the development process is waste. Extra features like paperwork and features not often used by customers are waste. Switching people between tasks is waste. Waiting for other activities, teams, processes is waste. Relearning required to complete work is waste. Defects and lower quality are waste. Managerial overhead not producing real value is waste. A value stream mapping technique is used to identify waste. The second step is to point out sources of waste and to eliminate them. Waste-removal should take place iteratively until even seemingly essential processes and procedures are liquidated. Amplify learning  edit  Software development is a continuous learning process based on iterations when writing code. Software design is a problem-solving process involving the developers writing the code and what they have learned. Software value is measured in fitness for use and not in conformance to requirements. Instead of adding more documentation or detailed planning, different ideas could be tried by writing code and building. The process of user requirements gathering could be simplified by presenting screens to the end-users and getting their input. The accumulation of defects should be prevented by running tests as soon as the code is written. The learning process is sped up by usage of short iteration cycles  each one coupled with refactoring and integration testing . Increasing feedback via short feedback sessions with customers helps when determining the current phase of development and adjusting efforts for future improvements. During those short sessions, both customer representatives and the development team learn more about the domain problem and figure out possible solutions for further development. Thus the customers better understand their needs, based on the existing result of development efforts, and the developers learn how to better satisfy those needs. Another idea in the communication and learning process with a customer is set-based development  this concentrates on communicating the constraints of the future solution and not the possible solutions, thus promoting the birth of the solution via dialogue with the customer.  jargon  Decide as late as possible  edit  As software development is always associated with some uncertainty, better results should be achieved with a set-based or options-based approach, delaying decisions as much as possible until they can be made based on facts and not on uncertain assumptions and predictions. The more complex a system is, the more capacity for change should be built into it, thus enabling the delay of important and crucial commitments. The iterative approach promotes this principle  the ability to adapt to changes and correct mis takes, which might be very costly if discovered after the release of the system. With set-based development If a new brake system is needed for a car, for example, three teams may design solutions to the same problem. Each team learns about the problem space and designs a potential solution. As a solution is deemed unreasonable, it is cut. At the end of a period, the surviving designs are compared and one is chosen, perhaps with some modifications based on learning from the others - a great example of deferring commitment until the last possible moment. Software decisions could also benefit from this practice to minimize the risk brought on by big up-front design. Additionally, there would then be multiple implementations that work correctly, yet are different implementation-wise, internally. These could be used to implement f ault-tolerant systems which check all inputs and outputs for correctness, across the multiple implementations, simultaneously. An agile software development approach can move the building of options earlier for customers, thus delaying certain crucial decisions until customers have realized their needs better. This also allows later adaptation to changes and the prevention of costly earlier technology-bounded decisions. This does not mean that no planning should be involved  on the contrary, planning activities should be concentr ated on the different options and adapting to the current situation, as well as clarifying confusing situations by establishing patterns for rapid action. Evaluating different options is effective as soon as it is realized that they are not free, but provide the needed flexibility for late decision making. Deliver as fast as possible  edit  In the era of rapid technology evolution, it is not the biggest that survives, but the fastest. The sooner the end product is delivered without major defects, the sooner feedback can be received, and incorporated into the next iteration . The shorter the iterations, the better the learning and communication within the team. With speed, decisions can be delayed. Speed assures the fulfilling of the customers present needs and not what they required yesterday. This gives them the opportunity to delay making up their minds about what they really require until they gain better knowledge. Customers value rapid del ivery of a quality product. The just-in-time production ideology could be applied to software development , recognizing its specific requirements and environment. This is achieved by presenting the needed result and letting the team organize itself and divide the tasks for accomplishing the needed result for a specific iteration . At the beginning, the customer provides the needed input. This could be simply presented in small cards or stories  the developers estimate the time needed for the implementation of each card. Thus the work organization changes into self-pulling system  each morning during a stand-up meeting , each member of the team reviews what has been done yesterday, what is to be done today and tomorrow, and prompts for any inputs needed from colleagues or the customer. This requires transparency of the process, which is also beneficial for team communication. The myth underlying with this principle is Haste Makes Waste. However, Lean implementation has provided that it is a good practice to deliver fast in order to see and analyze the output at the earliest. Empower the team  edit  There has been a traditional belief in most businesses about the decision-making in the organization  the managers tell the workers how to do their own job. In a Work-Out technique, the roles are turned  the managers are taught how to listen to the developers , so they can explain better what actions might be taken, as well as provide suggestions for improvements. The lean approach follows the Agile Principle 7  find good people and let them do their own job, 8  encouraging progress, catching errors, and removing impediments, but not micro-managing. Another mistaken belief has been the consideration of people as resources . People might be resources from the point of view of a statistical data sheet, but in software development , as well as any organizational business, people do need something more than just the list of tasks and the assurance that they will not be disturbed during the completion of the tasks. People need motivation and a higher purpose to work for  purpose within the reachable reality, with the assurance that the team might choose its own commitments. The developers should be given access to the customer the team leader should provide support and help in difficult situations, as well as ensure that skepticism does not ruin the teams spirit.Respecting people and acknowledging their work is one way to empower the team. Build integrity in  edit  The customer needs to have an overall experience of the System. This is the so-called perceived integrity how it is being advertised, delivered, deployed, accessed, how intuitive its use is, its price and how well it solves problems. Conceptual integrity means that the systems separate components work well together as a whole with balance between flexibility, maintainability, efficiency, and responsiveness. This could be achieved by understanding the problem domain and solving it at the same time, not sequentially. The needed information is received in small batch pieces  not in one vast chunk - preferab ly by face-to-face communication and not any written documentation. The information flow should be constant in both directions  from customer to developers and back, thus avoiding the large stressful amount of information after long development in isolation. One of the healthy ways towards integral architecture is refactoring . As more features are added to the original code base, the harder it becomes to add further improvements. Refactoring is about keeping simplicity, clarity, minimum number of features in the code. Repetitions in the code are signs of bad code designs and should be avoided. The complete and automated building process should be accompanied by a complete and automated suite of de veloper and customer tests, having the same versioning, synchronization and semantics as the current state of the System. At the end the integrity should be verified with thorough testing, thus ensuring the System does what the customer expects it to. Automated tests are also considered part of the production process, and therefore if they do not add value they should be consid ered waste. Automated testing should not be a goal, but rather a means to an end, specifically the reduction of defects. Optimize the Whole  edit  Software systems nowadays are not simply the sum of their parts, but also the product of their interactions. Defects in software tend to accumulate during the development process  by decomposing the big tasks into smaller tasks, and by standardizing different stages of development, the root causes of defects should be found and eliminated. The larger the system, the more organ izations that are involved in its development and the more parts are developed by different teams, the greater the importance of having well defined relationships between different vendors, in order to produce a system with smoothly interacting components. During a longer period of development, a stronger subcontractor network is far more beneficial than short-term profit optim izing, which does not enable win-win relationships. Lean thinking has to be understood well by all members of a project, before implementing in a concrete, real-life situation. Think big, act small, fail fast learn rapidly 9   these slogans summarize the importance of understanding the field and the suitability of implementing lean principles along the whole software development process. Only when all of the lean principles are implemented together, combined with strong common sense with respect to the working environment, is there a basis for success in software development . Lean software practices  edit  Lean software development practices, or what the Poppendiecks call tools are restated slightly from the original equivalents in Agile software development . Examples of such practices include Seeing waste Value stream mapping Set-based development Pull systems Queuing theory Motivation Measurements Test-driven development Trunk-based development Since Agile Software Development is an umbrella term for a set of methods and practices based on the values and principles expressed in the Agile Manifesto, Lean Software Development is considered an Agile Software Development Method. 10  See also  edit  Kanban Kanban board Lean integration Lean services Scrum development References  edit   Yasuhiro Monden 1998, Toyota Production System, An Integrated Approach to Just-In-Time , Third edition, Norcross, GA Engineering  Management Press, .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em ISBN   0-412-83930-X .  Mary Poppendieck Tom Poppendieck 2003. Lean Software Development An Agile Toolkit . Addison-Wesley Professional. ISBN   978-0-321-15078-3 .  Mary Poppendieck The role of leadership in software development httpswww.youtube.comwatchvypEMdjslEOI  Mary Poppendieck Tom Poppendieck 2003. Lean Software Development An Agile Toolkit . Addison-Wesley Professional. pp.  1315. ISBN   978-0-321-15078-3 .  Mary Poppendieck Tom Poppendieck 2003. Lean Software Development An Agile Toolkit . Addison-Wesley Professional. pp.  1922. ISBN   978-0-321-15078-3 .  Sedano, Todd Ralph, Paul Praire, Ccile. Software Development Waste . IEEE.  12 Principles Behind the Agile Manifesto - Agile Alliance . agilealliance.org . 4 November 2015.  Mark Lines Scott W. Ambler 2012. Disciplined Agile Delivery A Practitioners Guide to Agile Software Delivery in the Enterprise . IBM Press. pp.  54. ISBN   978-0-13-281013-5 .  Mary Poppendieck Tom Poppendieck 2003. Lean Software Development An Agile Toolkit . Addison-Wesley Professional. pp.  182. ISBN   978-0-321-15078-3 .  What is Agile Software Development . agilealliance.org . 29 June 2015. Ladas, Corey January 2008. Scrumban Essays on Kanban Systems for Lean Software Development . Modus Cooperandi Press. ISBN   0-578-00214-0 . Ries, Eric September 2011. The Lean Startup How Todays Entrepreneurs Use Continuous Innovation to Create Radically Successful Businesses . Crown Business. ISBN   978-0307887894 . Retrieved from  httpsen.wikipedia.orgwindex.phptitleLean_software_development oldid903319554  Categories  Software development philosophies Agile software development Lean manufacturing Hidden categories Articles needing additional references from July 2014 All articles needing additional references All articles that are too technical Wikipedia articles that are too technical from June 2018 All articles needing expert attention Articles needing expert attention from June 2018