Scrum software development From Wikipedia, the free encyclopedia Jump to navigation Jump to search Agile software development framework Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Scrum is an agile process framework for managing complex knowledge work, with an initial emphasis on software development , although it has been used in other fields and is slowly starting to be explored for other complex work, research and advanced technologies. 1  It is designed for teams of ten or fewer members, who break their work into goals that can be completed within timeboxed iterations, called sprints , no longer than one month and most commonly two weeks, then track progress and re-plan in 15-minute time-boxed stand-up meetings , called daily scrums . 2  3  .mw-parser-output .toclimit-2 .toclevel-1 ul,.mw-parser-output .toclimit-3 .toclevel-2 ul,.mw-parser-output .toclimit-4 .toclevel-3 ul,.mw-parser-output .toclimit-5 .toclevel-4 ul,.mw-parser-output .toclimit-6 .toclevel-5 ul,.mw-parser-output .toclimit-7 .toclevel-6 uldisplaynone Contents 1 Key ideas 2 Capitalization of Scrum 3 History 4 Roles 4.1 Product owner 4.2 Development team 4.3 Scrum master 5 Workflow 5.1 Sprint 5.2 Sprint planning 5.3 Daily scrum 5.4 Sprint review 5.5 Sprint retrospective 5.6 Backlog refinement 5.7 Cancelling a sprint 6 Artifacts 6.1 Product backlog 6.1.1 Management 6.2 Sprint backlog 6.3 Increment 6.4 Extensions 6.4.1 Sprint burndown chart 6.4.2 Release burn-up chart 6.4.3 Definition of ready DoR 6.4.4 Definition of done DoD 6.4.5 Velocity 6.4.6 Spike 6.4.7 Tracer bullet 7 Limitations 8 Tools for implementation 9 Scrum values 10 Adaptations 10.1 Scrumban 10.2 Scrum of scrums 10.3 Large-scale Scrum 11 See also 12 References 13 Further reading 14 External links Key ideas  edit  Scrum is a lightweight, iterative and incremental framework for managing complex work. 4  5  The framework challenges assumptions of the traditional, sequential approach to product development, and enables teams to self-organize by encouraging physical co-location or close online collaboration of all team members, as well as daily face-to-face communication among all team members and disciplines involved. A key principle of Scrum is the dual recognition that customers will change their minds about what they want or need often called requirements volatility 6   and that there will be unpredictable challengesfor which a predictive or planned approach is not suited. As such, Scrum adopts an evidence-based empirical approach  accepting that the problem cannot be fully understood or defined up front, and instead focusing on how to maximize the teams ability to deliver quickly, to respond to emerging requirements, and to adapt to evolving technologies and changes in market conditions. Capitalization of Scrum  edit  Scrum is occasionally seen written in all-capitals, as SCRUM . 7  The word is not an acronym , so this stylization is not correct it likely arose due to an early paper by Ken Schwaber 8  which capitalized SCRUM in its title. 2  9  While the trademark on the term Scrum itself has been allowed to lapse, it is deemed as owned by the wider community rather than an individual, 10  so the leading capital for Scrum is retained in this article. Many of the terms used in Scrum are typically written with leading capitals e.g., Scrum Master , Daily Scrum . However, to maintain an encyclopedic tone, this article uses normal sentence case for these terms e.g., scrum master , daily scrum   unless they are recognized marks such as Certified Scrum Master . History  edit  Hirotaka Takeuchi and Ikujiro Nonaka introduced the term scrum in the context of product development in their 1986 Harvard Business Review article, The New New Product Development Game. 11  Takeuchi and Nonaka later argued in The Knowledge Creating Company 12  that it is a form of organizational knowledge creation, ... especially good at bringing about innovation continuously, incrementally and spirally. The authors described a new approach to commercial product development that would increase speed and flexibility, based on case studies from manufacturing firms in the automotive, photocopier and printer industries . 11  They called this the holistic or rugby approach, as the whole process is performed by one cross-functional team across multiple overlapping phases, in which the team tries to go the distance as a unit, passing the ball back and forth. 11  In rugby football , a scrum is used to restart play, as the forwards of each team interlock with their heads down and attempt to gain possession of the ball. 13   The Scrum framework was based on research by Schwaber with Tunde Babatunde at DuPont Research Station and University of Delaware. Tunde advised that attempts to develop complex product, such as software, that werent based in empiricism were doomed to higher risks and rates of failure as the initial conditions and assumptions change. Empiricism, using frequent inspection and ad aptation, with flexibility and transparency is the most suitable approach. In the early 1990s, Ken Schwaber used what would become Scrum at his company, Advanced Development Methods while Jeff Sutherland , John Scumniotales and Jeff McKenna developed a similar approach at Easel Corporation, referring to it using the single word scrum. 14  Ken and Jeff worked together to integrate their ideas into a single framework, Scrum. They tested Scrum and continually improved it, leading to the 1995 paper, the Agile Manifesto in 2001, and the worldwide spread and use of Scrum since 2002. In 1995, Sutherland and Schwaber jointly presented a paper describing the Scrum framework at the Business Object Design and Implementation Workshop held as part of Object-Oriented Programming, Systems, Languages  Applications 95 OOPSLA 95 in Austin, Texas. 15  Over the following years, Schwaber and Sutherland collaborated to combine this materialwith their experience and evolving good practiceto develop what became known as Scrum. 16  In 2001, Schwaber worked with Mike Beedle to describe the method in the book, Agile Software Development with Scrum . 17  Scrums approach to planning and managing product development involves bringing decision-making authority to the level of operation properties and certainties. 2  In 2002, Schwaber with others founded the Scrum Alliance 18  and set up the Certified Scrum accreditation series. Schwaber left the Scrum Alliance in late 2009 and founded Scrum.org which oversees the parallel Professional Scrum accreditation series. 19  Since 2009, a public document called The Scrum Guide 16  has been published and updated by Schwaber and Sutherland. It has been revised 5 times, with the current version being November 2017. Roles  edit  This section possibly contains original research . Please improve it by verifying the claims made and adding inline citations . Statements consisting only of original research should be removed.  April 2019   Learn how and when to remove this template message  There are three roles in the Scrum framework. 20  These are ideally co-located to ensure optimal communication among team members. Together these three roles form the scrum team. While many organizations have other roles involved with defining and delivering the product, Scrum defines only these three. 16  Product owner  edit  The product owner, representing the products stakeholders and the voice of the customer or may represent the desires of a committee 21  , is responsible for delivering good business results. 22  Hence, the product owner is accountable for the product backlog and for maximizing the value that the team delivers. 21  The product owner defines the product in customer-centric terms typically user stories , adds them to the product backlog , and prioritizes them based on importance and dependencies. 23  A scrum team should have only one product owner although a product owner could support more than one team 24  This role should not be combined with that of the scrum master. The product owner should focus on the business side of product development and spend the majority of their time liaising with stakeholders and the team. The product owner should not dictate how the team reaches a technical solution, but rather will seek consensus among the team members. 25   better  source  needed  This role is crucial and requires a deep understanding of both sides the business and the engineers developers in the scrum team. Therefore a good product owner should be able to communicate what the business needs, ask why they need it because there may be better ways to achieve that, and convey the message to all stakeholders including the delivery Team using a technica l language, as required. The Product Owner uses Scrums empirical tools to manage highly complex work, while controlling risk and achieving value. Communication is a core responsibility of the product owner. The ability to convey priorities and empathize with team members and stakeholders is vital to steer product development in the right direction. The product owner role bridges the communication gap between the team and its stakeholders, serving as a proxy for stakeholders to the team and as a team representative to the overall stakeholder community. 26  27  As the face of the team to the stakeholders, the following are some of the communication tasks of the product owner to the stakeholders 28  Define and announce releases. Communicate delivery and team status. Share progress during governance meetings. Share significant RIDAs risks, impediments, dependencies, and assumptions with stakeholders. Negotiate priorities, scope, funding, and schedule. Ensure that the product backlog is visible, transparent and clear. Empathy is a key attribute for a product owner to havethe ability to put ones self in anothers shoes. A product owner converses with different stakeholders, who have a variety of backgrounds, job roles, and objectives. A product owner must be able to see from these different points of view. To be effective, it is wise for a product owner to know the level of detail the audie nce needs. The development team needs thorough feedback and specifications so they can build a product up to expectation, while an executive sponsor may just need summaries of progress. Providing more information than necessary may lose stakeholder interest and waste time. A direct means of communication is the most preferred by seasoned agile product owners. 24  A product owners ability to communicate effectively is also enhanced by being skilled in techniques that identify stakeholder needs, negotiate priorities between stakeholder interests, and collaborate with developers to ensure effective implementation of requirements. Development team  edit  The development team has from three to nine members who carry out all tasks required to build increments of valuable output every sprint. 23  While team members are referred to as developers in some literature 16  , the term refers to anyone who plays a role in the development and support of the system or product, and can include researchers, architects, designers, data specialists, statisticians, analysts, engineers, programmers, and testers, among others. 20  However, due to the confusion that can arise when some people do not feel the term developer applies to them, they are often referred to just as team members . The team is self-organizing. While no work should come to the team except through the product owner, and the scrum master is expected to protect the team from too much distraction, the team should still be encouraged to interact directly with customers andor stakeholders to gain maximum understanding and immediacy of feedback. 23  Scrum master  edit  Scrum is facilitated by a scrum master, who is accountable for removing impediments to the ability of the team to deliver the product goals and deliverables. 29  The scrum master is not a traditional team lead or project manager but acts as a buffer between the team and any distracting influences. The scrum master ensures that the scrum framework is followed. The scrum master helps to ensure the team follows the agreed processes in the Scrum framework, often facilitates key sessions, and encourages the team to improve. The role has also been referred to as a team facilitator 30  or servant-leader to reinforce these dual perspectives. The core responsibilities of a scrum master include but are not limited to 31  Helping the product owner maintain the product backlog in a way that ensures the needed work is well understood so the team can continually make forward progress Helping the team to determine the definition of done for the product, with input from key stakeholders Coaching the team, within the Scrum principles, in order to deliver high-quality features for its product 32  Promoting self-organization within the team Helping the scrum team to avoid or remove impediments to its progress, whether internal or external to the team Facilitating team events to ensure regular progress Educating key stakeholders on Agile and Scrum principles Coaching the development team in self-organization and cross-functionality The scrum master helps people and organizations adopt empirical and lean thinking, leaving behind hopes for certainty and predictability. One of the ways the scrum master role differs from a project manager is that the latter may have people management responsibilities and the scrum master does not. A scrum master provides a limited amount of direction since the team is expected to be empowered and self-organizing. 33  Scrum does not formally recognise the role of project manager, as traditional command and control tendencies would cause difficulties. 34  Workflow  edit  Sprint  edit  Scrum framework Not to be confused with Hackathon   Code sprints . The Scrum process A sprint also known as iteration or timebox  is the basic unit of development in Scrum. The sprint is a timeboxed effort that is, the length is agreed and fixed in advance for each sprint and is normally between one week and one month, with two weeks being the most common. 2  Each sprint starts with a sprint planning event that establishes a sprint goal and the required product backlog items. The team accepts what they agree is ready and translate this into a sprint backlog, with a breakdown of the work required and an estimated forecast for the sprint goal. Each sprint ends with a sprint review and sprint retrospective , that reviews progress to show to stakeholders and identify lessons and improvements for the next sprints. 14  Scrum emphasizes valuable, useful output at the end of the sprint that is really done. In the case of software, this likely includes that the software has been fully integrated, tested and documented, and is potentially releasable. 34  Sprint planning  edit  At the beginning of a sprint, the scrum team holds a sprint planning event 35  to Mutually discuss and agree on the scope of work that is intended to be done during that sprint Select product backlog items that can be completed in one sprint Prepare a sprint backlog that includes the work needed to complete the selected product backlog items Agree the sprint goal, a short description of what they are forecasting to deliver at the end of the sprint. The recommended duration is four hours for a two-week sprint pro-rata for other sprint durations 16  During the first half, the whole scrum team development team, scrum master, and product owner selects the product backlog items they believe could be completed in that sprint During the second half, the development team identifies the detailed work tasks required to complete those product backlog items resulting in a confirmed sprint backlog As the detailed work is elaborated, some product backlog items may be split or put back into the product backlog if the team no longer believes they can complete the required work in a single sprint Once the development team has prepared their sprint backlog, they forecast usually by voting which tasks will be delivered within the sprint. Daily scrum  edit  A daily scrum in the computing room. This centralized location helps the team start on time. Each day during a sprint, the team holds a daily scrum or stand-up  with specific guidelines All members of the development team come prepared. The daily scrum starts precisely on time even if some development team members are missing should happen at the same time and place every day is limited  timeboxed  to fifteen minutes Anyone is welcome, though only development team members should contribute. During the daily scrum, each team member typically answers three questions What did I complete yesterday that contributed to the team meeting our sprint goal What do I plan to complete today to contribute to the team meeting our sprint goal Do I see any impediment that could prevent me or the team from meeting our sprint goal Any impediment e.g., stumbling block, risk, issue, delayed dependency, assumption proved unfounded 36  identified in the daily scrum should be captured by the scrum master and displayed on the teams scrum board or on a shared risk board, with an agreed person designated to working toward a resolution outside of the daily scrum. While the currency of work status is the whole teams responsibility, the scrum master often updates the sprint burndown chart. 37  Where the team does not see the value in these events, it is the responsibility of the scrum master to find out why. 38  This is part of the responsibility of educating the team and stakeholders about the Scrum principles. 32  No detailed discussions should happen during the daily scrum. Once the meeting ends, members can usually two or more get together to discuss issues in detail and some call this as breakout sessions or after party. 37  Sprint review  edit  At the end of a sprint, the team holds two events the sprint review and the sprint retrospective. At the sprint review, the team reviews the work that was completed and the planned work that was not completed presents the completed work to the stakeholders a.k.a. the demo  collaborates with the stakeholders on what to work on next Guidelines for sprint reviews Incomplete work cannot be demonstrated. The recommended duration is two hours for a two-week sprint proportional for other sprint-durations. 16  Sprint retrospective  edit  At the sprint retrospective, the team Reflects on the past sprint Identifies and agrees on continuous process improvement actions Guidelines for sprint retrospectives Three main questions are asked in the sprint retrospective What went well during the sprint What did not go well What could be improved for better productivity in the next sprint The recommended duration is one-and-a-half hours for a two-week sprint proportional for other sprint durations This event is facilitated by the scrum master Backlog refinement  edit  Backlog refinement formerly called grooming is the ongoing process of reviewing product backlog items and checking that they are appropriately prepared and ordered in a way that makes them clear and executable for teams once they enter sprints via the sprint planning activity. Product backlog items may be broken into multiple smaller ones. Acceptance criteria may be clarified. Dependencies may be identified and investigated. Although not originally a core Scrum practice, backlog refinement has been added to the Scrum Guide and adopted as a way of managing the quality of product backlog items entering a sprint, with a recommended investment of up to 10 of a teams sprint capacity. 16  39  The backlog can also include technical debt also known as design debt or code debt. This is a concept in software development that reflects the implied cost of additional rework caused by choosing an easy solution now instead of using a better approach that would take longer. Cancelling a sprint  edit  The product owner can cancel a sprint if necessary. 16  The product owner may do so with input from the team, scrum master or management. For instance, management may wish the product owner to cancel a sprint if external circumstances negate the value of the sprint goal. If a sprint is abnormally terminated, the next step is to conduct a new sprint planning, where the reason for the termination is reviewed. Artifacts  edit  This section needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Scrum  software development     news    newspapers    books    scholar    JSTOR  March 2013   Learn how and when to remove this template message  Product backlog  edit  The product backlog is a breakdown of work to be done 40  and contains an ordered list of product requirements that a scrum team maintains for a product . Common formats include user stories and use cases . 34  The requirements define features , bug fixes , non-functional requirements , etc.whatever must be done to deliver a viable product. The product owner prioritizes product backlog items PBIs based on considerations such as risk, business value, dependencies, size, and date needed. The product backlog is what will be delivered, ordered into the sequence in which it should be delivered. It is visible to everyone but may only be changed with the consent of the product owner, who is ultimately responsible for ordering product backlog items for the development team to choose. The product backlog contains the product owners assessment of business value and the development teams assessment of development effort, which are often, but not always, stated in story points using the rounded Fibonacci scale . These estimates help the product owner to gauge the timeline and may influence the ordering of product backlog items for example, if two features have the same business value, the product owner may schedule earlier delivery of the one with the lower development effort because the return on investment is higher or the one with higher development effort because it is more complex or riskier, and they want to retire that risk earlier. 41  The product backlog and the business value of each product backlog item is the responsibility of the product owner. The effort to deliver each item is estimated by the development team in story points, or time. By estimating in story points, the team reduces the dependency in individual developers this is useful especially in dynamic teams where developers are often assigned t o other projects after sprint delivery. For instance, if a user story is estimated as a 5 in effort using Fibonacci sequence, it remains 5 regardless of how many developers are working on it Story points define the effort in a time-box, so they do not change with time. For instance, in one hour an individual can walk, run, or climb, but the effort expended is clearly different. The gap progression between the terms in the Fibonacci sequence encourages the team to deliver carefully considered estimates. Estimates of 1, 2 or 3 imply similar efforts 1 being trivial, but if the team estimates an 8 or 13 or higher, the impact on both delivery and budget can be significant. The value of using story points is that the team can reuse them by comparing similar work from previous sprints, but it should be recognized that estimates are relative to the team. For example, an estimate of 5 for one team could be a 2 for another having senior develo pers and higher skills. Every team should have a product owner, although in many instances a product owner could work with more than one team. 24  The product owner is responsible for maximizing the value of the product. The product owner gathers input and takes feedback from, and is lobbied by, many people, but ultimately makes the call on what gets built. The product backlog Captures requests to modify a productincluding new features, replacing old features, removing features, and fixing issues Ensures the development team has work that maximizes business benefit to the product owner Typically, the product owner and the scrum team work together to develop the breakdown of work this becomes the product backlog, which evolves as new information surfaces about the product and about its customers, and so later sprints may address new work. Management  edit  A product backlog, in its simplest form, is merely a list of items to work on. Having well-established rules about how work is added, removed and ordered helps the whole team make better decisions about how to change the product. 42  The product owner prioritizes product backlog items based on which are needed soonest. The team then chooses which items they can complete in the coming sprint. On the scrum board, the team moves items from the product backlog to the sprint backlog, which is the list of items they will build. Conceptually, it is ideal for the team to only select what they think they can accompl ish from the top of the list, but it is not unusual to see in practice that teams are able to take lower-priority items from the list along with the top ones selected. This normally happens because there is time left within the sprint to accommodate more work. Items at the top of the backlog, the items to work on first, should be broken down into stories that are suitable for t he development team to work on. The further down the backlog goes, the less refined the items should be. As Schwaber and Beedle put it The lower the priority, the less detail until you can barely make out the backlog item. 2  As the team works through the backlog, it must be assumed that change happens outside their environmentthe team can learn about new market opportunities to take advantage of, competitor threats that arise, and feedback from customers that can change the way the product was meant to work. All of these new ideas tend to trigger the team to adapt the backlog to incorporate new kn owledge. This is part of the fundamental mindset of an agile team. The world changes, the backlog is never finished. 26  Sprint backlog  edit  A scrum task board The sprint backlog is the list of work the development team must address during the next sprint. 43  The list is derived by the scrum team progressively selecting product backlog items in priority order from the top of the product backlog until they feel they have enough work to fill the sprint. The development team should keep in mind its past performance assessing its capacity for the new-sprint, and use this as a guideline of how much effort they can complete. The product backlog items may be broken down into tasks by the development team. 43  Tasks on the sprint backlog are never assigned or pushed to team members by someone else rather team members sign up for or pull tasks as needed according to the backlog priority and their own skills and capacity. This promotes self-organization of the development team and developer buy-in. The sprint backlog is the property of the development team, and all included estimates are provided by the development team. Often an accompanying task board is used to see and change the state of the tasks of the current sprint, like to do, in progress and done. Once a sprint backlog is committed, no additional work can be added to the sprint backlog except by the team. Once a sprint has been delivered, the product backlog is analyzed and reprioritized if necessary, and the next set of functionality is selected for the next sprint. Increment  edit  The increment is the potentially releasable output of the sprint that meets the sprint goal. It is formed from all the completed sprint backlog items, integrated with the work of all previous sprints. The increment must be complete, according to the scrum teams definition of done DoD, fully functioning, and in a usable condition regardless of whether the product owner decides to actually deploy and use it. Extensions  edit  The following artifacts and techniques can be used to help people use Scrum. 16  Sprint burndown chart  edit  A sample burndown chart for a completed sprint, showing remaining effort at the end of each day. Main article Burn down chart The sprint burndown chart is a publicly displayed chart showing remaining work in the sprint backlog. 44  Updated every day, it gives a simple view of the sprint progress. It also provides quick visualizations for reference. The horizontal axis of the sprint burndown chart shows the days in a sprint, while the vertical axis shows the amount of work remaining each day typically representing the estimate of hours of work remaining. During sprint planning, the ideal burndown chart is plotted. Then, during the sprint, each member picks up tasks from the sprint backlog and works on them. At the end of the day, they update the remaining hours for tasks to be completed. In such a way, the actual burndown chart is updated day by day. It should not be confused with an earned value chart . Release burn-up chart  edit  A sample burn-up chart for a release, showing scope completed each sprint The release burn-up chart is a way for the team to provide visibility and track progress toward a release. Updated at the end of each sprint, it shows progress toward delivering a forecast scope. The horizontal axis of the release burn-up chart shows the sprints in a release, while the vertical axis shows the amount of work completed at the end of each sprint typically represe nting cumulative story points of work completed. Progress is plotted as a line that grows up to meet a horizontal line that represents the forecast scope often shown with a forecast, based on progress to date, that indicates how much scope might be completed by a given release date or how many sprints it will take to complete the given scope. The release burn-up chart makes it easy to see how much work has been completed, how much work has been added or removed if the horizontal scope line moves, and how much work is left to be done. Definition of ready DoR  edit  The start criteria to determine whether the specifications and inputs are set enough to start the work item, i.e. a user story . Definition of done DoD  edit  The exit-criteria to determine whether a product backlog item is complete. In many cases, the DoD requires that all regression tests be successful. The definition of done may vary from one scrum team to another but must be consistent within one team. 45  Velocity  edit  The total effort a team is capable of in a sprint. The number is derived by evaluating the work typically in user story points completed in the last sprint. The collection of historical velocity data is a guideline for assisting the team in understanding how much work they can likely achieve in a future sprint. Spike  edit  A time-boxed period used to research a concept or create a simple prototype. Spikes can either be planned to take place in between sprints or, for larger teams, a spike might be accepted as one of many sprint delivery objectives. Spikes are often introduced before the delivery of large or complex product backlog items in order to secure budget, expand knowledge, or produce a pr oof of concept. The duration and objectives of a spike is agreed between product owner and development team before the start. Unlike sprint commitments, spikes may or may not deliver tangible, shippable, valuable functionality. For example, the objective of a spike might be to successfully reach a decision on a course of action. The spike is over when the time is up, not nece ssarily when the objective has been delivered. 46  Tracer bullet  edit  Also called a drone spike, a tracer bullet is a spike with the current architecture, current technology set, current set of best practices that result in production quality code. It might just be a very narrow implementation of the functionality but is not throwaway code. It is of production quality, and the rest of the iterations can build on this code. The name has military o rigins as ammunition that makes the path of the bullet visible, allowing for corrections. Often these implementations are a quick shot through all layers of an application, such as connecting a single forms input field to the back-end, to prove the layers connect as expected. 47  Limitations  edit  The benefits of Scrum may be more difficult to achieve when 48  49  Teams whose members are geographically dispersed or part-time  In Scrum, developers should have close and ongoing interaction, ideally working together in the same space most of the time. While recent improvements in technology have reduced the impact of these barriers e.g., being able to collaborate on a digital whiteboard, the Agile manifesto asserts that the best communication is face to face. 50  Teams whose members have very specialized skills  In Scrum, developers should have T-shaped skills , allowing them to work on tasks outside of their specialization. This can be encouraged by good Scrum leadership. While team members with very specific skills can and do contribute well, they should be encouraged to learn more about and collaborate with other disciplines. Products with many external dependencies  In Scrum, dividing product development into short sprints requires careful planning external dependencies, such as user acceptance testing or coordination with other teams, can lead to delays and the failure of individual sprints. Products that are mature or legacy or with regulated quality control  In Scrum, product increments should be fully developed and tested in a single sprint products that need large amounts of regression testing or safety testing e.g., medical devices or vehicle control for each release are less suited to short sprints than to longer waterfall releases. From a business perspective, Scrum has many virtues, one of which is that it is designed to yield the best business solutions. However, the efficiency by which it does so in any given organization can vary widely and is largely dependent on the ability of the organization to adhere to the implementation guidelines. Every company has its own distinct organizational structure, cu lture, and set of business practices, and some are more naturally amenable to this methodology than others. Tools for implementation  edit  Main article Comparison of Scrum software Like other agile methods, effective adoption of Scrum can be supported through a wide range of tools. Many companies use universal tools, such as spreadsheets to build and maintain artifacts such as the sprint backlog. There are also open-source and proprietary software packages for Scrumwhich are either dedicated to product development using the Scrum framework or support multiple product development approaches including Scrum. Other organizations implement Scrum without software tools and maintain their artifacts in hard-copy forms such as paper, whiteboards, and sticky notes. 51  Scrum values  edit  Scrum is a feedback-driven empirical approach which is, like all empirical process control, underpinned by the three pillars of transparency, inspection, and adaptation. All work within the Scrum framework should be visible to those responsible for the outcome the process, the workflow, progress, etc. In order to make these things visible, scrum teams need to frequently inspec t the product being developed and how well the team is working. With frequent inspection, the team can spot when their work deviates outside of acceptable limits and adapt their process or the product under development. 23  These three pillars require trust and openness in the team, which the following five values of Scrum enable 16  Commitment Team members individually commit to achieving their team goals, each and every sprint . Courage Team members know they have the courage to work through conflict and challenges together so that they can do the right thing. Focus Team members focus exclusively on their team goals and the sprint backlog there should be no work done other than through their backlog. Openness Team members and their stakeholders agree to be transparent about their work and any challenges they face. Respect Team members respect each other to be technically capable and to work with good intent. Adaptations  edit  The hybridization of Scrum with other software development methodologies is common as Scrum does not cover the whole product development lifecycle  therefore, organizations find the need to add in additional processes to create a more comprehensive implementation. For example, at the start of product development, organizations commonly add process guidance on the business case, requirements gathering and prioritization, initial high-level design, and budget and schedule forecasting. 52  Various authors and communities of people who use Scrum have also suggested more detailed techniques for how to apply or adapt Scrum to particular problems or organizations. Many refer to these methodological techniques as patterns - by analogy with design patterns in architecture and software. 53  54  Such patterns have extended Scrum outside of the software development domain into Manufacturing, 55  Finance and Human Resources . Scrumban  edit  Main article Scrumban Scrumban is a software production model based on Scrum and Kanban . Scrumban is especially suited for product maintenance with frequent and unexpected work items, such as production defects or programming errors. In such cases the time-limited sprints of the Scrum framework may be perceived to be of less benefit, although Scrums daily events and other practices can still be applied, depending on the team and the situation at hand. Visualization of the work stages and limitations for simultaneous unfinished work and defects are familiar from the Kanban model. Usi ng these methods, the teams workflow is directed in a way that allows for minimum completion time for each work item or programming error, and on the other hand ensures each team member is constantly employed. 56  To illustrate each stage of work, teams working in the same space often use post-it notes or a large whiteboard. 57  In the case of decentralized teams, stage-illustration software such as Assembla , JIRA or Agilo . The major differences between Scrum and Kanban is that in Scrum work is divided into sprints that last a fixed amount of time, whereas in Kanban the flow of work is continuous. This is visible in work stage tables, which in Scrum are emptied after each sprint, whereas in Kanban all tasks are marked on the same table. Scrum focuses on teams with multifaceted know-how, whereas Ka nban makes specialized, functional teams possible. 56  Scrum of scrums  edit  The scrum of scrums is a technique to operate Scrum at scale, for multiple teams working on the same product, allowing them to discuss progress on their interdependencies, focusing on how to coordinate delivering software, 58  especially on areas of overlap and integration. Depending on the cadence timing of the scrum of scrums, the relevant daily scrum for each scrum team ends by designating one member as an ambassador to participate in the scrum of scrums with ambassadors from other teams. Depending on the context, the ambassadors may be technical contributors or each teams scrum master. 58  Rather than simply a progress update, the scrum of scrums should focus on how teams are collectively working to resolve, mitigate, or accept any risks, impediments, dependencies, and assumptions RIDAs that have been identified. The scrum of scrums tracks these RIDAs via a backlog of its own, such as a risk board sometimes known as a ROAM board after the initials of resolved, owned, accepted, and mitigated, 59  which typically leads to greater coordination and collaboration between teams. 58  This should run similar to a daily scrum, with each ambassador answering the following four questions 60  What risks, impediments, dependencies, or assumptions has your team resolved since we last met What risks, impediments, dependencies, or assumptions will your team resolve before we meet again Are there any new risks, impediments, dependencies, or assumptions slowing your team down or getting in their way Are you about to introduce a new risk, impediment, dependency, or assumption that will get in another teams way As Jeff Sutherland commented, 58  Since I originally defined the Scrum of Scrums Ken Schwaber was at IDX working with me, I can definitively say the Scrum of Scrums is not a meta Scrum. The Scrum of Scrums as I have used it is responsible for delivering the working software of all teams to the Definition of Done at the end of the sprint, or for releases during the sprint. PatientKeeper delivered to producti on four times per Sprint. Ancestry.com delivers to production 220 times per two-week Sprint. Hubspot delivers live software 100-300 times a day. The Scrum of Scrums Master is held accountable for making this work. So the Scrum of Scrums is an operational delivery mechanism. Large-scale Scrum  edit  Large-scale Scrum LeSS is a product development framework that extends Scrum with scaling rules and guidelines without losing the original purposes of Scrum. There are two levels to the framework the first LeSS level is designed for up to eight teams the second level, known as LeSS Huge, introduces additional scaling elements for development with up to hundreds of developers. Scaling Scrum starts with understanding and being able to adopt standard real one-team Scrum. Large-scale Scrum requires examining the purpose of single-t eam Scrum elements and figuring out how to reach the same purpose while staying within the constraints of the standard Scrum rules. 61  Bas Vodde and Craig Larman evolved the LeSS framework from their experiences working with large-scale product development, especially in the telecoms and finance industries. It evolved by taking Scrum and trying many different experiments to discover what works. In 2013, the experiments were solidified into the LeSS framework rules. 62  The intention of LeSS is to descale organization complexity, dissolving unnecessary complex organizational solutions, and solving them in simpler ways. Less roles, less management, less organizational structures. ref cite weblast1Grgic year2015 titleDescaling organisation with LeSS Blogurl httpsleanarch.eu20150509descaling-organisation-with- See also  edit  Disciplined agile delivery Lean software development Project management Unified Process High-performance teams Agile testing References  edit   Lessons learned Using Scrum in non-technical teams . Agile Alliance . Retrieved April 8, 2019 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  a b c d e Schwaber, Ken February 1, 2004. Agile Project Management with Scrum . Microsoft Press . ISBN   978-0-7356-1993-7 .  Daily Scrum Meeting , Mountain Goat Software , retrieved July 26, 2017  What is Scrum . What is Scrum An Agile Framework for Completing Complex Projects - Scrum Alliance . Scrum Alliance . Retrieved February 24, 2016 .  Verheyen, Gunther March 21, 2013. Scrum Framework, not methodology . Gunther Verheyen . Gunther Verheyen . Retrieved February 24, 2016 .  J. Henry and S. Henry. Quantitative assessment of the software maintenance process and requirements volatility. In Proc. of the ACM Conference on Computer Science, pages 346351, 1993.  Should SCRUM be written in all caps . stackoverflow.com . Retrieved January 10, 2017 .  Schwaber, Ken. Scrum.org Ken Schwaber . Cite journal requires journal  help   Schwaber, Ken 2004. SCRUM Development Process PDF . Advanced Development Methods .  Johnson, Hillary Louise January 13, 2011. ScrumMaster vs scrum master What do you think . agilelearninglabs.com . Retrieved May 10, 2017 .  a b c Takeuchi, Hirotaka Nonaka, Ikujiro January 1, 1986. The New New Product Development Game . Harvard Business Review . Retrieved June 9, 2010 . Moving the Scrum Downfield  The Knowledge Creating Company . Oxford University Press. 1995. p.  3. ISBN   9780199762330 . Retrieved March 12, 2013 .  Scrum . Oxford  Dictionaries . Oxford University Press .  a b Sutherland, Jeff October 2004. Agile Development Lessons learned from the first Scrum . Archived from the original PDF on November 22, 2017 . Retrieved September 26, 2008 .  Sutherland, Jeffrey Victor  Schwaber, Ken 1995. Business object design and implementation OOPSLA 95 workshop proceedings . The University of Michigan . p.  118. ISBN   978-3-540-76096-2 .  a b c d e f g h i j Ken Schwaber  Jeff Sutherland . The Scrum Guide PDF . Scrum.org . Retrieved October 27, 2017 .  Schwaber, Ken  Beedle, Mike 2002. Agile software development with Scrum . Prentice Hall. ISBN   978-0-13-067634-4 .  Maximini, Dominik January 8, 2015. The Scrum Culture Introducing Agile Methods in Organizations . Management for Professionals. Cham Springer published 2015. p.  26. ISBN   9783319118277 . Retrieved August 25, 2016 . Ken Schwaber and Jeff Sutherland presented Scrum for the first time at the OOPSLA conference in Austin, Texas, in 1995. ... In 2001, the first book about Scrum was published. ... One year later 2002, Ken founded the Scrum Alliance, aiming at providing worldwide Scrum training and certification.  Partogi, Joshua July 7, 2013. Certified Scrum Master vs Professional Scrum Master . Lean Agile Institute . Retrieved May 10, 2017 .  a b Rad, Nader K. Turley, Frank 2018. Agile Scrum Foundation Courseware, Second Edition . s-Hertogenbosch, Netherlands Van Haren. p.  26. ISBN   9789401802796 .  a b McGreal, Don Jocham, Ralph June 4, 2018. The Professional Product Owner Leveraging Scrum as a Competitive Advantage . Addison-Wesley Professional. ISBN   9780134686653 .  Rubin, Kenneth 2013, Essential Scrum. A Practical Guide to the Most Popular Agile Process , Addison-Wesley, p.  173, ISBN   978-0-13-704329-3  a b c d Morris, David 2017. Scrum an ideal framework for agile projects . In Easy Steps. pp.  178179. ISBN   9781840787313 . OCLC   951453155 .  a b c Cohn, Mike. Succeeding with Agile Software Development Using Scrum. Upper Saddle River, NJ Addison-Wesley, 2010.  The Role of the Product Owner . Scrum Alliance . Retrieved May 26, 2018 .  a b Pichler, Roman. Agile Product Management with Scrum Creating Products that Customers Love . Upper Saddle River, NJ Addison-Wesley, 2010.  need quotation to verify   Ambler, Scott. The Product Owner Role A Stakeholder Proxy for Agile Teams . agilemodeling.com . Retrieved July 22, 2016 . ... in practice there proves to be two critical aspects to this role first as a stakeholder proxy within the development team and second as a project team representative to the overall stakeholder community as a whole.  The Product Owner Role . Scrum Master Test Prep . Retrieved February 3, 2017 .  Carroll, N, OConnor, M. and Edison, H. 2018. The Identification and Classification of Impediments to Software Flow, The Americas Conference on Information Systems AMCIS 2018, 16-18 August, New Orleans, Louisiana, USA.  Leybourn, E. 2013. Directing the Agile Organisation A Lean Approach to Business Management . London IT Governance Publishing 117120.  Core Scrum . Scrum Alliance . Retrieved January 25, 2015 .  a b Drongelen, Mike van Dennis, Adam Garabedian, Richard Gonzalez, Alberto Krishnaswamy, Aravind 2017. Lean Mobile App Development Apply Lean startup methodologies to develop successful iOS and Android apps . Birmingham, UK Packt Publishing Ltd. p.  43. ISBN   9781786467041 .  Cobb, Charles G. 2015. The Project Managers Guide to Mastering Agile Principles and Practices for an Adaptive Approach . Hoboken, NJ John Wiley  Sons. p.  37. ISBN   9781118991046 .  a b c Pete Deemer Gabrielle Benefield Craig Larman Bas Vodde December 17, 2012. The Scrum Primer A Lightweight Guide to the Theory and Practice of Scrum Version 2.0 . InfoQ.  Gangji, Arif Hartman, Bob 2015. Agile SCRUM For Denver Web Development . Neon Rain Interactive . Retrieved September 25, 2015 .  Little, Joe January 17, 2011. Impediment Management . Agile Consortium. Cite journal requires journal  help   a b Flewelling, Paul 2018. The Agile Developers Handbook Get more value from your software development get the best out of the Agile methodology . Birmingham, UK Packt Publishing Ltd. p.  91. ISBN   9781787280205 .  McKenna, Dave 2016. The Art of Scrum How Scrum Masters Bind Dev Teams and Unleash Agility . Aliquippa, PA CA Press. p.  126. ISBN   9781484222768 .  Cho, L 2009. Adopting an Agile Culture A User Experience Teams Journey . Agile Conference . pp.  416421. doi  10.1109AGILE.2009.76 . ISBN   978-0-7695-3768-9 .  Sedano, Todd Ralph, Paul Praire, Ccile. The Product Backlog . IEEE.  Higgins, Tony March 31, 2009. Authoring Requirements in an Agile World . BA Times.  The product backlog your ultimate to-do list . Atlassian . Retrieved July 20, 2016 .  a b Russ J. Martinelli Dragan Z. Milosevic January 5, 2016. Project Management ToolBox Tools and Techniques for the Practicing Project Manager . Wiley. p.  304. ISBN   978-1-118-97320-2 .  Charles G. Cobb January 27, 2015. The Project Managers Guide to Mastering Agile Principles and Practices for an Adaptive Approach . John Wiley  Sons. p.  378. ISBN   978-1-118-99104-6 .  Ken Schwaber, Agile Project Management with Scrum , p.55  Create a Spike Solution . Extreme Programming.  Sterling, Chris October 22, 2007. Research, Spikes, Tracer Bullets, Oh My . Getting Agile . Retrieved October 23, 2016 .  Turk, Dan France, Robert Rumpe, Bernhard 2014 2002. Limitations of Agile Software Processes. Proceedings of the Third International Conference on Extreme Programming and Flexible Processes in Software Engineering  4346. arXiv  1409.6600v1 .  Issues and Challenges in Scrum Implementation PDF . International Journal of Scientific  Engineering Research . 3 8. August 2012 . Retrieved December 10, 2015 .  Kent Beck  James Grenning Robert C. Martin  Mike Beedle Jim Highsmith  Steve Mellor  Arie van Bennekum Andrew Hunt  Ken Schwaber  Alistair Cockburn  Ron Jeffries  Jeff Sutherland  Ward Cunningham  Jon Kern Dave Thomas  Martin Fowler  Brian Marick 2001. Principles behind the Agile Manifesto . Agile Alliance . Retrieved August 7, 2017 .  Dubakov, Michael 2008. Agile Tools. The Good, the Bad and the Ugly PDF . Retrieved August 30, 2010 .  Hron, M. Obwegeser, N. January 2018. Scrum in practice an overview of Scrum adaptations PDF . Proceedings of the 2018 51st Hawaii International Conference on System Sciences HICSS, January 3-6, 2018 .  Bjrnvig, Gertrud Coplien, Jim June 21, 2008. Scrum as Organizational Patterns . Gertrude  Cope.  Scrum Pattern Community . ScrumPLoP.org . Retrieved July 22, 2016 .  WIKISPEED  Applying Agile software principles and practices for fast automotive development . Agile Business Management Consortium. December 3, 2013 . Retrieved September 11, 2015 .  a b Kniberg, Henrik Skarin, Mattias December 21, 2009. Kanban and Scrum - Making the most of both PDF . InfoQ . Retrieved July 22, 2016 .  Ladas, Corey October 27, 2007. scrum-ban . Lean Software Engineering . Retrieved September 13, 2012 .  a b c d Scrum of Scrums . Agile Alliance. December 17, 2015.  Risk Management  How to Stop Risks from Screwing Up Your Projects . Kelly Waters.  Scrum of Scrums . Scrum Master Test Prep . Retrieved May 29, 2015 .  Larman scrumyear2013. Scaling Agile Development Crosstalk journal, November  December 2013 PDF .  Large-Scale Scrum LeSS . 2014. Further reading  edit  Vacaniti, Daniel February 2018. The Kanban Guide for Scrum Teams PDF . scrum.org . Retrieved March 12, 2018 . Sutherland, Jeff Schwaber, Ken 2013. Scrum Guides . ScrumGuides.org . Retrieved July 26, 2017 . Verheyen, Gunther 2013. Scrum - A Pocket Guide A Smart Travel Companion ISBN   978-9087537203 . Mnch, Jrgen Armbrust, Ove Soto, Martn Kowalczyk, Martin 2012. Software Process Definition and Management . ISBN   978-3-642-24291-5 . Deemer, Pete Benefield, Gabrielle Larman, Craig Vodde, Bas 2009. The Scrum Primer . Retrieved June 1, 2009 . Janoff, N.S. Rising, L. 2000. The Scrum Software Development Process for Small Teams PDF . Retrieved February 26, 2015 . External links  edit  Wikimedia Commons has media related to Scrum development . Scaled Scrum by Scrum.org Agile Alliances Scrum library A Scrum Process Description by the Eclipse Process Framework EPF Project v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleScrum_software_development oldid912625577  Categories  Agile software development Hidden categories CS1 errors missing periodical Wikipedia articles needing factual verification from March 2017 Articles with short description Use American English from February 2019 All Wikipedia articles written in American English Use mdy dates from December 2018 Articles that may contain original research from April 2019 All articles that may contain original research All articles lacking reliable references Articles lacking reliable references from February 2016 Articles needing additional references from March 2013 All articles needing additional references Commons category link is on Wikidata Articles prone to spam from May 2015