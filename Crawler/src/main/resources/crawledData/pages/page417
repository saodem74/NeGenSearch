Waterfall model From Wikipedia, the free encyclopedia Jump to navigation Jump to search Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e The unmodified waterfall model. Progress flows from the top to the bottom, like a cascading waterfall. The waterfall model is a breakdown of project activities into linear sequential phases, where each phase depends on the deliverables of the previous one and corresponds to a specialisation of tasks. The approach is typical for certain areas of engineering design . In software development , it tends to be among the less iterative and flexible approaches, as progress flows in largely one direction downwards like a waterfall  through the phases of conception, initiation, analysis , design , construction , testing , deployment and maintenance . The waterfall development model originated in the manufacturing and construction industries where the highly structured physical environments meant that design changes became prohibitively expensive much sooner in the development process. When first adopted for software development, there were no recognised alternatives for knowledge-based creative work. 1  Contents 1 History 2 Model 3 Supporting arguments 4 Criticism 5 Modified waterfall models 6 Royces final model 7 See also 8 References 9 External links History  edit  The first known presentation describing use of such phases in software engineering was held by Herbert D. Benington at the Symposium on Advanced Programming Methods for Digital Computers on 29 June 1956. 2  This presentation was about the development of software for SAGE . In 1983 the paper was republished with a foreword by Benington explaining that the phases were on purpose organised according to the specialisation of tasks, and pointing out that the process was not in fact performed in a strict top-down fashion, but depended on a prototype. 1  The first formal description of the waterfall model is often cited as a 1970 article by Winston W. Royce , 3  4  although Royce did not use the term waterfall in that article. Royce presented this model as an example of a flawed, non-working model which is how the term is generally used in writing about software developmentto describe a critical view of a commonly used software development practice. 5  The earliest use of the term waterfall may have been in a 1976 paper by Bell and Thayer. 6  In 1985, the United States Department of Defense captured this approach in DOD-STD-2167A , their standards for working with software development contractors, which stated that the contractor shall implement a software development cycle that includes the following six phases Preliminary Design, Detailed Design, Coding and Unit Testing, Integration, and Testing. 7  Model  edit  In Royces original waterfall model, the following phases are followed in order System and software requirements  captured in a product requirements document Analysis  resulting in models , schema , and business rules Design  resulting in the software architecture Coding  the development , proving , and integration of software Testing  the systematic discovery and debugging of defects Operations  the installation , migration , support , and maintenance of complete systems Thus the waterfall model maintains that one should move to a phase only when its preceding phase is reviewed and verified. Various modified waterfall models including Royces final model, however, can include slight or major variations on this process. 3  These variations included returning to the previous cycle after flaws were found downstream, or returning all the way to the design phase if downstream phases deemed insufficient. Supporting arguments  edit  Time spent early in the software production cycle can reduce costs at later stages. For example, a problem found in the early stages such as requirements specification is cheaper to fix than the same bug found later on in the process by a factor of 50 to 200. 8  In common practice, waterfall methodologies result in a project schedule with 2040 of the time invested for the first two phases, 3040 of the time to coding, and the rest dedicated to testing and implementation. The actual project organisation needs to be highly structured. Most medium and large projects will include a detailed set of procedures and controls, which regulate every process on the project. 9  A further argument for the waterfall model is that it places emphasis on documentation such as requirements documents and design documents as well as source code . In less thoroughly designed and documented methodologies, knowledge is lost if team members leave before the project is completed, and it may be difficult for a project to recover from the loss. If a fully working design document is present as is the intent of Big Design Up Front and the waterfall model, new team members or even entirely new teams should be able to familiarise themselves by reading the documents. 10  The waterfall model provides a structured approach the model itself progresses linearly through discrete, easily understandable and explainable phases and thus is easy to understand it also provides easily identifiable milestones in the development process. It is perhaps for this reason that the waterfall model is used as a beginning example of a development model in many sof tware engineering texts and courses. 11  It is argued that the waterfall model can be suited to projects where requirements and scope are fixed, the product itself is firm and stable, and the technology is clearly understood. 12  Criticism  edit  Clients may not know exactly what their requirements are before they see working software and so change their requirements, leading to redesign, redevelopment, and retesting, and increased costs. 13  Designers may not be aware of future difficulties when designing a new software product or feature, in which case it is better to revise the design than persist in a design that does not account for any newly discovered constraints, requirements, or problems. 14  Organisations may attempt to deal with a lack of concrete requirements from clients by employing systems analysts to examine existing manual systems and analyse what they do and how they might be replaced. However, in practice, it is difficult to sustain a strict separation between systems analysis and programming. 15  This is because implementing any non-trivial system will almost inevitably expose issues and edge cases that the systems analyst did not consider. In response to the perceived problems with the pure waterfall model, modified waterfall models were introduced, such as Sashimi Waterfall with Overlapping Phases, Waterfall with Subprojects, and Waterfall with Risk Reduction. 8  Some organisations, such as the United States Department of Defense, now have a stated preference against waterfall-type methodologies, starting with MIL-STD-498 , which encourages evolutionary acquisition and Iterative and Incremental Development . 16  While advocates of agile software development argue the waterfall model is an ineffective process for developing software, some sceptics suggest that the waterfall model is a false argument used purely to market alternative development methodologies. 17  Rational Unified Process RUP phases acknowledge the programmatic need for milestones, for keeping a project on track, but encourage iterations especially within Disciplines within the Phases. RUP Phases are often referred to as waterfall-like.  citation needed  Modified waterfall models  edit  In response to the perceived problems with the pure waterfall model, many modified waterfall models have been introduced. These models may address some or all of the criticisms of the pure waterfall model. These include the Rapid Development models that Steve McConnell calls modified waterfalls 8  Peter DeGraces sashimi model waterfall with overlapping phases, waterfall with subprojects, and waterfall with risk reduction. Other software development model combinations such as incremental waterfall model also exist. 18  Royces final model  edit  Winston W. Royce s final model, his intended improvement upon his initial waterfall model, illustrated that feedback could should, and often would lead from code testing to design as testing of code uncovered flaws in the design and from design back to requirements specification as design problems may necessitate the removal of conflicting or otherwise unsatisfiable  undesignable requi rements. In the same paper Royce also advocated large quantities of documentation, doing the job twice if possible a sentiment similar to that of Fred Brooks , famous for writing the Mythical Man Month, an influential book in software project management , who advocated planning to throw one away, and involving the customer as much as possible a sentiment similar to that of Extreme Programming . See also  edit  List of software development philosophies Agile software development Big Design Up Front Chaos model DevOps Iterative and incremental development Object-oriented analysis and design Rapid application development Software development process Spiral model Structured Systems Analysis and Design Method SSADM System development methodology Traditional engineering V-model References  edit   a b Benington, Herbert D. 1 October 1983. Production of Large Computer Programs PDF . IEEE Annals of the History of Computing . IEEE Educational Activities Department. 5 4 350361. doi  10.1109MAHC.1983.10102 . Retrieved 2011-03-21 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  United States, Navy Mathematical Computing Advisory Panel 29 June 1956, Symposium on advanced programming methods for digital computers , Washington, D.C. Office of Naval Research, Dept. of the Navy, OCLC   10794738  a b Royce, Winston 1970, Managing the Development of Large Software Systems PDF , Proceedings of IEEE WESCON , 26 August 19  Wasserfallmodell  Entstehungskontext, Markus Rerych, Institut fr Gestaltungs- und Wirkungsforschung, TU-Wien. Retrieved on 2007-11-28 from httpcartoon.iguw.tuwien.ac.atfitfit01wasserfallentstehung.html  Conrad Weisert, Waterfall methodology theres no such thing  Bell, Thomas E., and T. A. Thayer. Software requirements Are they really a problem Proceedings of the 2nd international conference on Software engineering. IEEE Computer Society Press, 1976.  Military Standard Defense System Software Development  a b c McConnell, Steve 1996. Rapid Development Taming Wild Software Schedules . Microsoft Press. ISBN   1-55615-900-5 .  Waterfall Software Development Model . 5 February 2014 . Retrieved 11 August 2014 .  Arcisphere technologies 2012. Tutorial The Software Development Life Cycle SDLC PDF . Retrieved 2012-11-13 .  Hughey, Douglas 2009. Comparing Traditional Systems Analysis and Design with Agile Methodologies . University of Missouri  St. Louis . Retrieved 11 August 2014 .  When should you use Waterfall Model . Retrieved 2016-09-28 .  Parnas, David L. Clements, Paul C. 1986. A rational design process How and why to fake it PDF . IEEE Transactions on Software Engineering  251257 . Retrieved 2011-03-21 .  McConnell, Steve 2004. Code Complete, 2nd edition . Microsoft Press. ISBN   1-55615-484-4 .  Ensmenger, Nathan 2010. The Computer Boys Take Over . p.  42. ISBN   978-0-262-05093-7 .  Larman, Craig Basili, Victir 2003. Iterative and Incremental Development A Brief History . IEEE Computer June ed.. 36  4756. doi  10.1109MC.2003.1204375 .  A Waterfall Systems Development Methodology  Seriously by David Dischave. 2012. Archived July 2, 2014, at the Wayback Machine  Methodologydesign methods . External links  edit  Wikimedia Commons has media related to Waterfall models . Understanding the pros and cons of the Waterfall Model of software development Project lifecycle models how they differ and when to use them Going Over the Waterfall with the RUP by Philippe Kruchten CSC and IBM Rational join to deliver C-RUP and support rapid business change c2WaterFall v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleWaterfall_model oldid913171517  Categories  Software development philosophies Project management Design Hidden categories Webarchive template wayback links EngvarB from July 2019 All articles with unsourced statements Articles with unsourced statements from March 2017 Commons category link is on Wikidata