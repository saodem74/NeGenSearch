Software framework From Wikipedia, the free encyclopedia Jump to navigation Jump to search Type of library that helps structure other software Framework computer science redirects here. For other uses, see Framework disambiguation . In computer programming , a software framework is an abstraction in which software providing generic functionality can be selectively changed by additional user-written code, thus providing application-specific software. A software framework provides a standard way to build and deploy applications. A software framework is a universal, reusable software environment that provides particular functionality as part of a larger software platform to facilitate development of software applications , products and solutions. Software frameworks may include support programs, compilers, code libraries, tool sets, and application programming interfaces APIs that bring together all the different components to enable development of a project or system . Frameworks have key distinguishing features that separate them from normal libraries  inversion of control  In a framework, unlike in libraries or in standard user applications, the overall programs flow of control is not dictated by the caller, but by the framework. 1  extensibility  A user can extend the framework  usually by selective overriding  or programmers can add specialized user code to provide specific functionality. non-modifiable framework code  The framework code, in general, is not supposed to be modified, while accepting user-implemented extensions. In other words, users can extend the framework, but cannot modify its code. Contents 1 Rationale 2 Examples 3 Architecture 4 See also 5 References 6 External links Rationale  edit  This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Software framework     news    newspapers    books    scholar    JSTOR  April 2011   Learn how and when to remove this template message  The designers of software frameworks aim to facilitate software developments by allowing designers and programmers to devote their time to meeting software requirements rather than dealing with the more standard low-level details of providing a working system, thereby reducing overall development time. 2  For example, a team using a web framework to develop a banking website can focus on writing code particular to banking rather than the mechanics of request handling and state management . Frameworks often add to the size of programs, a phenomenon termed  code bloat . Due to customer-demand driven applications needs, both competing and complementary frameworks sometimes end up in a product. Further, due to the complexity of their APIs, the intended reduction in overall development time may not be achieved due to the need to spend additional time learning to use the framework this criticism is clearly valid when a special or new framewor k is first encountered by development staff.  citation needed  If such a framework is not used in subsequent job taskings, the time invested in learning the framework can cost more than purpose-written code familiar to the projects staff many programmers keep copies of useful boilerplate for common needs. However, once a framework is learned, future projects can be faster and easier to complete the concept of a framework is to make a one-size-fits-all solution set, and with familiarity, code production should logically rise. There are no such claims made about the size of the code eventually bundled with the output product, nor its relative efficiency and conciseness. Using any library solution necessarily pulls in extras and unused extraneous assets unless the software is a compiler-object linker making a tight small, wholly controlled, and specified executable module. The issue continues, but a decade-plus of industry experience  citation needed  has shown that the most effective frameworks turn out to be those that evolve from re-factoring the common code of the enterprise, instead of using a generic one-size-fits-all framework developed by third parties for general purposes. An example of that would be how the user interface in such an application package as an office suite grows to have common look, feel, and data -sharing attributes and methods, as the once disparate bundled applications grow unified into a suite which is tighter and smaller the newerevolved suite can be a product that shares integral utility libraries and user interfaces. This trend in the controversy brings up an important issue about frameworks. Creating a framework that is elegant, versus one that merely solves a problem, is still rather a craft than a science. Software elegance  implies clarity, conciseness, and little waste extra or extraneous functionality, much of which is user defined. For those frameworks that generate code, for example, elegance would imply the creation of code that is clean and comprehensible to a reasonably knowledgeable programmer and which is therefore readily modifiable, versus one that merely generates correct code. The elegance issue is why relatively few software frameworks have stood the test of time the best frameworks have been able to evolve gracefully as the underlying technology on which they were built advanced. Even there, having evolved, many such packages will retain legacy capabilities bloating the final software as otherwise replaced methods have been retained in parallel w ith the newer methods. Examples  edit  Software frameworks typically contain considerable housekeeping and utility code in order to help bootstrap user applications, but generally focus on specific problem domains, such as Artistic drawing, music composition, and mechanical CAD 3  4  Financial modeling applications 5  Earth system modeling applications 6  Decision support systems 7  Media playback and authoring Ajax framework  JavaScript framework Web framework Middleware Cactus Framework - High performance scientific computing Application framework - General GUI applications Enterprise Architecture framework Oracle Application Development Framework Architecture  edit  According to Pree, 8  software frameworks consist of frozen spots and hot spots . Frozen spots define the overall architecture of a software system, that is to say its basic components and the relationships between them. These remain unchanged frozen in any instantiation of the application framework. Hot spots represent those parts where the programmers using the framework add their own code to add the functionality specific to their own project. In an object-oriented environment, a framework consists of abstract and concrete classes . Instantiation of such a framework consists of composing and subclassing the existing classes. 9  When developing a concrete software system with a software framework, developers utilize the hot spots according to the specific needs and requirements of the system. Software frameworks rely on the Hollywood Principle  Dont call us, well call you. 10  This means that the user-defined classes for example, new subclasses receive messages from the predefined framework classes. Developers usually handle this by implementing superclass abstract methods . See also  edit  Class computer science Design pattern computer science Dont repeat yourself Implicit invocation References  edit   Riehle, Dirk 2000, Framework Design A Role Modeling Approach PDF , Swiss Federal Institute of Technology .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Framework . DocForge . Retrieved 15 December 2008 .  Vlissides, J M Linton, M A 1990, Unidraw a framework for building domain-specific graphical editors, ACM Transactions on Information Systems , 8 3 237268, doi  10.114598188.98197  Johnson, R E 1992, Documenting frameworks using patterns, Proceedings of the Conference on Object Oriented Programming Systems Languages and Applications , ACM Press 6376  Birrer, A Eggenschwiler, T 1993, Proceedings of the European conference on object-oriented programming, Frameworks in the financial engineering domain an experience report , Springer-Verlag , pp.  2135  Hill, C DeLuca, C Balaji, V Suarez, M da Silva, A 2004, Architecture of the Earth System Modeling Framework ESMF , Computing in Science and Engineering , 6  1828, doi  10.1109MCISE.2004.1255817  Gachet, A 2003, Software Frameworks for Developing Decision Support Systems  A New Component in the Classification of DSS Development Tools, Journal of Decision Systems , 12 3 271281, doi  10.3166jds.12.271-280  Pree, W 1994, Meta Patterns A Means for Capturing the Essentials of Reusable Object-Oriented Design, Proceedings of the 8th European Conference on Object-Oriented Programming , Lecture Notes in Computer Science, Springer-Verlag , 821  150162, CiteSeerX   10.1.1.74.7935 , doi  10.1007BFb0052181 , ISBN   978-3-540-58202-1  Buschmann, F 1996, Pattern-Oriented Software Architecture Volume 1 A System of Patterns. Chichester , Wiley , ISBN   978-0-471-95869-7  Larman, C 2001, Applying UML and Patterns An Introduction to Object-Oriented Analysis and Design and the Unified Process 2nd ed., Prentice Hall , ISBN   978-0-13-092569-5 External links  edit  Wikimedia Commons has media related to Software frameworks . Software Frameworks Resistance isnt Futile Approach to Software Framework Design Applying Patterns and Frameworks to Develop Object-Oriented Communication Software Authority control BNF  cb11991188g data GND  4464685-9 LCCN  sh2013002773 Retrieved from  httpsen.wikipedia.orgwindex.phptitleSoftware_framework oldid914613024  Categories  Object-oriented programming Software architecture Software design patterns Software frameworks Hidden categories Articles with short description Articles needing additional references from April 2011 All articles needing additional references All articles with unsourced statements Articles with unsourced statements from April 2011 Commons category link is on Wikidata Use dmy dates from April 2011 Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers