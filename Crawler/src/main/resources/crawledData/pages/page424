Real-time computing From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article includes a list of references , but its sources remain unclear because it has insufficient inline citations . Please help to improve this article by introducing more precise citations.  April 2014   Learn how and when to remove this template message  In computer science , real-time computing  RTC , or reactive computing describes hardware and software systems subject to a real-time constraint, for example from event to system response . 1  Real-time programs must guarantee response within specified time constraints, often referred to as deadlines. 2  The correctness of these types of systems depends on their temporal aspects as well as their functional aspects. Real-time responses are often understood to be in the order of milliseconds, and sometimes microseconds. A system not specified as operating in real time cannot usually guarantee a response within any timeframe, although typical or expected response times may be given. A real-time system has been described as one which controls an environment by receiving data, processing them, and returning the results sufficiently quickly to affect the environment at that time. 3  The term real-time is also used in simulation to mean that the simulations clock runs at the same speed as a real clock, and in process control and enterprise systems to mean without significant delay. Real-time software may use one or more of the following synchronous programming languages , real-time operating systems , and real-time networks, each of which provide essential frameworks on which to build a real-time software application. Systems used for many mission critical applications must be real-time, such as for control of fly-by-wire aircraft, or anti-lock brakes on a vehicle, which must produce maximum deceleration but intermittently stop braking to prevent skidding. 4  Real-time processing fails if not completed within a specified deadline relative to an event deadlines must always be met, regardless of system load . Contents 1 History 2 Criteria for real-time computing 2.1 Real-time in digital signal processing 2.1.1 Live vs. real-time 3 Real-time and high-performance 4 Near real-time 5 Design methods 6 See also 7 References 8 Further reading 9 External links History  edit  The term real-time derives from its use in early simulation , in which a real-world process is simulated at a rate that matched that of the real process now called real-time simulation to avoid ambiguity. Analog computers , most often, were capable of simulating at a much faster pace than real-time, a situation that could be just as dangerous as a slow simulation if it were not also recognized and accounted for. Minicomputers, particularly in the 1970s onwards, when built into dedicated embedded systems such as DOG scanners, increased the need for low-latency priority-driven responses to important interactions with incoming data and so operating systems such as Data General s RDOS Real-Time Disk Operatings System and RTOS with background and foreground scheduling as well as Digital Equipment Corporation s RT-11 date from this era. Background-foreground scheduling allowed low priority tasks CPU time when no foreground task needed to execute, and gave absolute priority within the foreground to threadstasks with the highest priority. Real-time operating systems would also be used for time-sharing multiuser duties. For example, Data General Business Basic could run in the foreground or background of RDOG and would introduce additional elements to the scheduling algorithm to make it more appropriate for people interacting via dumb terminals . Once when the MOS Technology 6502 used in the Commodore 64 and Apple II , and later when the Motorola 68000 used in the Macintosh , Atari ST , and Commodore Amiga  were popular, anybody could use their home computer as a real-time system. The possibility to deactivate other interrupts allowed for hard-coded loops with defined timing, and the low interrupt latency allowed the implementation of a real-time operating system, giving the user interface and the disk drives lower priority than the real-time thread. Compared to these the programmable interrupt controller of the Intel CPUs 8086..80586 generates a very large latency and the Windows operating system is neither a real-time operating system nor does it allow a program to take over the CPU completely and use its own scheduler , without using native machine language and thus surpassing all interrupting Windows code. However, several coding libraries exist which offer real time capabilities in a high level language on a variety of operating systems, for example Java Real Time . The Motorola 68000 and subsequent family members 68010, 68020 etc. also became popular with manufacturers of industrial control systems. This application area is one in which real-time control offers genuine advantages in terms of process performance and safety.  citation needed  Criteria for real-time computing  edit  A system is said to be real-time if the total correctness of an operation depends not only upon its logical correctness, but also upon the time in which it is performed. 5  Real-time systems, as well as their deadlines, are classified by the consequence of missing a deadline Hard    missing a deadline is a total system failure. Firm    infrequent deadline misses are tolerable, but may degrade the systems quality of service. The usefulness of a result is zero after its deadline. Soft    the usefulness of a result degrades after its deadline, thereby degrading the systems quality of service. Thus, the goal of a hard real-time system is to ensure that all deadlines are met, but for soft real-time systems the goal becomes meeting a certain subset of deadlines in order to optimize some application-specific criteria. The particular criteria optimized depend on the application, but some typical examples include maximizing the number of deadlines met, minimizing the lateness of tasks and maximizing the number of high priority tasks meeting their deadlines. Hard real-time systems are used when it is imperative that an event be reacted to within a strict deadline. Such strong guarantees are required of systems for which not reacting in a certain interval of time would cause great loss in some manner, especially damaging the surroundings physically or threatening human lives although the strict definition is simply that missing the deadline constitutes failure of the system. For example, a car engine control system is a hard real-time system because a delayed signal may cause engine failure or damage. Other examples of hard real-time embedded systems include medical systems such as heart pacemakers and industrial process controllers. Hard real-time systems are typically found interacting at a low level with physical hardware, in embedded systems . Early video game systems such as the Atari 2600 and Cinematronics vector graphics had hard real-time requirements because of the nature of the graphics and timing hardware. In the context of multitasking systems the scheduling policy is normally priority driven  pre-emptive schedulers. Other scheduling algorithms include earliest deadline first , which, ignoring the overhead of context switching , is sufficient for system loads of less than 100. 6  New overlay scheduling systems, such as an adaptive partition scheduler assist in managing large systems with a mixture of hard real-time and non real-time applications. Soft real-time systems are typically used to solve issues of concurrent access and the need to keep a number of connected systems up-to-date through changing situations. An example can be software that maintains and updates the flight plans for commercial airliners  the flight plans must be kept reasonably current, but they can operate with the latency of a few seconds. Live audio-video systems are also usually soft real-time violation of constraints results in degraded quality, but the system can continue to operate and also recover in the future using workload prediction and reconfiguration methodologies. 7  Real-time in digital signal processing  edit  In a real-time digital signal processing DSP process, the analyzed input and generated output samples can be processed or generated continuously in the time it takes to input and output the same set of samples independent of the processing delay. 8  It means that the processing delay must be bounded even if the processing continues for an unlimited time. That means that the mean processing time per sample, including overhead , is no greater than the sampling period, which is the reciprocal of the sampling rate . This is the criterion whether the samples are grouped together in large segments and processed as blocks or are processed individually and whether there are long, short, or non-existent input and output buffers . Consider an audio DSP example if a process requires 2.01 seconds to analyze , synthesize , or process 2.00 seconds of sound, it is not real-time. However, if it takes 1.99 seconds, it is or can be made into a real-time DSP process. A common life analog is standing in a line or queue waiting for the checkout in a grocery store. If the line asymptotically grows longer and longer without bound, the checkout process is not real-time. If the length of the line is bounded, customers are being processed and output as rapidly, on average, as they are being inputted and that process is real-time. The grocer might go out of business or must at least lose business if they cannot make their checkout process real-time thus, it is fundamentally important that this process is real-time. A signal processing algorithm that cannot keep up with the flow of input data with output falling farther and farther behind the input is not real-time. But if the delay of the output relative to the input is bounded regarding a process that operates over an unlimited time, then that signal processing algorithm is real-time, even if the throughput delay may be very long. Live vs. real-time  edit  Real-time signal processing is necessary, but not sufficient in and of itself, for live signal processing such as what is required in live event support . Live audio digital signal processing requires both real-time operation and a sufficient limit to throughput delay so as to be tolerable to performers using stage monitors or in-ear monitors and not noticeable as lip sync error by the audience also directly watching the performers. Tolerable limits to latency for live, real-time processing is a subject of investigation and debate but is estimated to be between 6 and 20 milliseconds. 9  Real-time bidirectional telecommunications delays of less than 300 ms round trip or twice the unidirectional delay are considered acceptable to avoid undesired talk-over in conversation. Real-time and high-performance  edit  Real-time computing is sometimes misunderstood to be high-performance computing , but this is not an accurate classification. 10  For example, a massive supercomputer executing a scientific simulation may offer impressive performance, yet it is not executing a real-time computation. Conversely, once the hardware and software for an anti-lock braking system have been designed to meet its required deadlines, no further performance gains are obligatory or even useful. Furthermore, if a network server is highly loaded with network traffic, its response time may be slower but will in most cases still succeed before it times out hits its deadline. Hence, such a network server would not be considered a real-time system temporal failures delays, time-outs, etc. are typically small and compartmentalized limited in effect but are not catastrophic failures. In a real-time system, such as the FTSE 100 Index , a slow-down beyond limits would often be considered catastrophic in its application context. The most important requirement of a real-time system is consistent output, not high throughput. Some kinds of software, such as many chess-playing programs , can fall into either category. For instance, a chess program designed to play in a tournament with a clock will need to decide on a move before a certain deadline or lose the game, and is therefore a real-time computation, but a chess program that is allowed to run indefinitely before moving is not. In both of these cases, however, high performance is desirable the more wo rk a tournament chess program can do in the allotted time, the better its moves will be, and the faster an unconstrained chess program runs, the sooner it will be able to move. This example also illustrates the essential difference between real-time computations and other computations if the tournament chess program does not make a decision about its next move in its allotted time it loses the gamei.e., it fails as a real-time computationwhile in the other scenario, meeting the deadline is assumed not to be necessary. High-performance is indicative of the amount of processing that is performed in a given amount of time, whereas real-time is the ability to get done with the processing to yield a useful output in the available time. Near real-time  edit  The term near real-time or nearly real-time NRT, in telecommunications and computing , refers to the time delay introduced, by automated data processing or network transmission, between the occurrence of an event and the use of the processed data, such as for display or feedback and control purposes. For example, a near-real-time display depicts an event or situation as it existed at the current time minus the processing time, as nearly the time of the live event. 11  The distinction between the terms near real time and real time is somewhat nebulous and must be defined for the situation at hand. The term implies that there are no significant delays. 11  In many cases, processing described as real-time would be more accurately described as near real-time. Near real-time also refers to delayed real-time transmission of voice and video. It allows playing video images, in approximately real-time, without having to wait for an entire large video file to download. Incompatible databases can exportimport to common flat files that the other database can importexport on a scheduled basis so that they can syncshare common data in nea r real-time with each other. The distinction between near real-time and real-time varies, and the delay is dependent on the type and speed of the transmission. The delay in near real-time is typically of the order of several seconds to several minutes.  citation needed  Design methods  edit  Several methods exist to aid the design of real-time systems, an example of which is MASCOT , an old but very successful method which represents the concurrent structure of the system. Other examples are HOOD , Real-Time UML, AADL , the Ravenscar profile , and Real-Time Java . See also  edit  Autonomous peripheral operation DSOS Processing modes Ptolemy Project Real-time computer graphics Real-time testing Scheduling analysis real-time systems Synchronous programming language Time-utility function Worst-case execution time References  edit   stdctime  Ben-Ari, M., Principles of Concurrent and Distributed Programming, Prentice Hall, 1990. .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em ISBN   0-13-711821-X . Ch16, Page 164  Martin, James 1965. Programming Real-time Computer Systems . Englewood Cliffs, NJ Prentice-Hall Inc. p.  4. ISBN   978-0-13-730507-0 .  Krishna Kant May 2010. Computer-Based Industrial Control . PHI Learning. p.  356. ISBN   9788120339880 . Retrieved 2015-01-17 .  Shin, K.G. Ramanathan, P. Jan 1994. Real-time computing a new discipline of computer science and engineering PDF . Proceedings of the IEEE . 82 1 624. CiteSeerX   10.1.1.252.3947 . doi  10.11095.259423 . ISSN   0018-9219 .  C. Liu and J. Layland. Scheduling Algorithms for Multiprogramming in a Hard Real-time Environment. Journal of the ACM, 20146--61, Jan. 1973. httpciteseer.ist.psu.eduliu73scheduling.html  Menychtas, Andreas Kyriazis, Dimosthenis Tserpes, Konstantinos July 2009. Real-time reconfiguration for guaranteeing QoS provisioning levels in Grid environments. Future Generation Computer Systems . 25 7 779784. doi  10.1016j.future.2008.11.001 .  S.M. Kuo, B.H. Lee, and W. Tian, Real-Time Digital Signal Processing Implementations and Applications, Wiley, 2006. ISBN   0-470-01495-4 . Section 1.3.4 Real-Time Constraints .  Kudrle, Sara Proulx, Michel Carrieres, Pascal Lopez, Marco et al. July 2011. Fingerprinting for Solving AV Synchronization Issues within Broadcast Environments. SMPTE Motion Imaging Journal . 120 5 3646. doi  10.5594j18059XY . Appropriate AV sync limits have been established and the range that is considered acceptable for film is - 22 ms. The range for video, according to the ATSC, is up to 15 ms lead time and about 45 ms lag time  John Stankovic 1988, Misconceptions about real-time computing a serious problem for next-generation systems, Computer , IEEE Computer Society, 21 10, p.  11, doi  10.11092.7053  a b Federal Standard 1037C Glossary of Telecommunications Terms . Its.bldrdoc.gov . Retrieved 2014-04-26 . Further reading  edit  Alan Burns and Andy Wellings 2009, Real-Time Systems and Programming Languages 4th ed., Addison-Wesley, ISBN   978-0-321-41745-9 Buttazzo, Giorgio 2011, Hard Real-Time Computing Systems Predictable Scheduling Algorithms and Applications , New York, NY Springer . Liu, Jane W.S. 2000, Real-time systems , Upper Saddle River, NJ Prentice Hall . External links  edit  IEEE Technical Committee on Real-Time Systems Euromicro Technical Committee on Real-time Systems The What, Where and Why of Real-Time Simulation DESIGN OF A REAL-TIME PROGRAMMING SYSTEM . Computers and Automation . XII 9 2634. Sep 1963. ... set of notes which will hopefully point up problem areas which should be considered in real time design. v t e Computer science Note This template roughly follows the 2012 ACM Computing Classification System . Hardware Printed circuit board Peripheral Integrated circuit Very Large Scale Integration Systems on Chip SoCs Energy consumption Green computing Electronic design automation Hardware acceleration Computer systems organization Computer architecture Embedded system Real-time computing Dependability Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domain-specific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Software development process Requirements analysis Software design Software construction Software deployment Software maintenance Programming team Open-source model Theory of computation Model of computation Formal language Automata theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security services Intrusion detection system Hardware security Network security Information security Application security Humancomputer interaction Interaction design Social computing Ubiquitous computing Visualization Accessibility Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multi-task learning Cross-validation Graphics Animation Rendering Image manipulation Graphics processing unit Mixed reality Virtual reality Image compression Solid modeling Applied computing E-commerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Book Category Portal Outline WikiProject Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleReal-time_computing oldid894705181  Categories  Real-time computing Real-time technology Hidden categories Articles lacking in-text citations from April 2014 All articles lacking in-text citations All articles with unsourced statements Articles with unsourced statements from September 2013 Articles with unsourced statements from April 2014