Very Large Scale Integration From Wikipedia, the free encyclopedia Jump to navigation Jump to search VLSI redirects here. For the former company, see VLSI Technology . Not to be confused with Very High Speed Integrated Circuit . This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Very Large Scale Integration     news    newspapers    books    scholar    JSTOR  September 2010   Learn how and when to remove this template message  Very-large-scale integration  VLSI  is the process of creating an integrated circuit IC by combining millions of MOS transistors onto a single chip. VLSI began in the 1970s when complex semiconductor and communication technologies were being developed. The microprocessor is a VLSI device. Before the introduction of VLSI technology, most ICs had a limited set of functions they could perform. An electronic circuit might consist of a CPU , ROM , RAM and other glue logic . VLSI lets IC designers add all of these into one chip . A VLSI integrated-circuit die Contents 1 History 2 Structured design 3 Difficulties 4 See also 5 References 6 Further reading 7 External links History  edit  The history of the transistor dates to the 1920s when several inventors attempted devices that were intended to control current in solid-state diodes and convert them into triodes. Success came after World War II, when the use of silicon and germanium crystals as radar detectors led to improvements in fabrication and theory. Scientists who had worked on radar returned to solid-state device development. With the invention of the first transistor at Bell Labs in 1947, the field of electronics shifted from vacuum tubes to solid-state devices . With the small transistor at their hands, electrical engineers of the 1950s saw the possibilities of constructing far more advanced circuits. However, as the complexity of circuits grew, problems arose. 1  One problem was the size of the circuit. A complex circuit like a computer was dependent on speed. If the components were large, the wires interconnecting them must be long. The electric signals took time to go through the circuit, thus slowing the computer. 1  The invention of the integrated circuit by Jack Kilby and Robert Noyce solved this problem by making all the components and the chip out of the same block monolith of semiconductor material. The circuits could be made smaller, and the manufacturing process could be automated. This led to the idea of integrating all components on a single-crystal silicon wafer, which led to small-scale integration SSI in the early 1960s, and then medium-scal e integration MSI in the late 1960s. Further integration was made possible with the wide adoption of the MOS transistor , originally invented by Mohamed Atalla and Dawon Kahng at Bell Labs in 1959. 2  General Microelectronics introduced the first commercial MOS integrated circuit in 1964. 3  In the early 1970s, MOS integrated circuit technology allowed the integration of more than 10,000 transistors in a single chip. 4  This paved the way for large-scale integration LSI and then VLSI in the 1970s and 1980s, with tens of thousands of MOS transistors on a single chip later hundreds of thousands, then millions, and now billions. The first semiconductor chips held two transistors each. Subsequent advances added more transistors, and as a consequence, more individual functions or systems were integrated over time. The first integrated circuits held only a few devices, perhaps as many as ten diodes , transistors , resistors and capacitors , making it possible to fabricate one or more logic gates on a single device. Now known retrospectively as small-scale integration SSI, improvements in technique led to devices with hundreds of logic gates, known as medium-scale integration MSI. Further improvements led to large-scale integration LSI, i.e. systems with at least a thousand logic gates. Current technology has moved far past this mark and todays microprocessors have many millions of gates and billions of individual transistors. At one time, there was an effort to name and calibrate various levels of large-scale integration above VLSI. Terms like ultra-large-scale integration ULSI were used. But the huge number of gates and transistors available on common devices has rendered such fine distinctions moot. Terms suggesting greater than VLSI levels of integration are no longer in widespread use. In 2008, billion-transistor processors became commercially available. This became more commonplace as semiconductor fabrication advanced from the then-current generation of 65  nm processes. Current designs, unlike the earliest devices, use extensive design automation and automated logic synthesis to lay out the transistors, enabling higher levels of complexity in the resulting logic functionality. Certain high-performance logic blocks like the SRAM  static random-access memory  cell, are still designed by hand to ensure the highest efficiency. Structured design  edit  Structured VLSI design is a modular methodology originated by Carver Mead and Lynn Conway for saving microchip area by minimizing the interconnect fabrics area. This is obtained by repetitive arrangement of rectangular macro blocks which can be interconnected using wiring by abutment . An example is partitioning the layout of an adder into a row of equal bit slices cells. In complex designs this structuring may be achieved by hierarchical nesting. 5  Structured VLSI design had been popular in the early 1980s, but lost its popularity later because of the advent of placement and routing tools wasting a lot of area by routing , which is tolerated because of the progress of Moores Law . When introducing the hardware description language KARL in the mid 1970s, Reiner Hartenstein coined the term structured VLSI design originally as structured LSI design, echoing Edsger Dijkstra s structured programming approach by procedure nesting to avoid chaotic spaghetti-structured program Difficulties  edit  As microprocessors become more complex due to technology scaling , microprocessor designers have encountered several challenges which force them to think beyond the design plane, and look ahead to post-silicon Process variation  As photolithography techniques get closer to the fundamental laws of optics, achieving high accuracy in doping concentrations and etched wires is becoming more difficult and prone to errors due to variation. Designers now must simulate across multiple fabrication process corners before a chip is certified ready for production, or use system-level techniques for dealing with effects of variation. 6  Stricter design rules  Due to lithography and etch issues with scaling, design rules for layout have become increasingly stringent. Designers must keep in mind an ever increasing list of rules when laying out custom circuits. The overhead for custom design is now reaching a tipping point, with many design houses opting to switch to electronic design automation EDA tools to automate their design process. Timingdesign closure  As clock frequencies tend to scale up, designers are finding it more difficult to distribute and maintain low clock skew between these high frequency clocks across the entire chip. This has led to a rising interest in multicore and multiprocessor architectures, since an overall speedup can be obtained even with lower clock frequency by using the computational power of all the cores. First-pass success  As die sizes shrink due to scaling, and wafer sizes go up due to lower manufacturing costs, the number of dies per wafer increases, and the complexity of making suitable photomasks goes up rapidly. A mask set for a modern technology can cost several million dollars. This non-recurring expense deters the old iterative philosophy involving several spin-cycles to find errors in silicon, and encourages first-pass silicon success. Several design philosophies have been developed to aid this new design flow, including design for manufacturing  DFM , design for test  DFT , and Design for X . See also  edit  System on a chip SoC Neuromorphic engineering Application-specific integrated circuit Caltech Cosmic Cube Design rules checking Electronic design automation Mead  Conway revolution Polysilicon References  edit   a b The History of the Integrated Circuit . Nobelprize.org . Retrieved 21 Apr 2012 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  1960 Metal Oxide Semiconductor MOS Transistor Demonstrated . Computer History Museum .  1964 First Commercial MOS IC Introduced . Computer History Museum .  Hittinger, William C. 1973. METAL-OXIDE-SEMICONDUCTOR TECHNOLOGY. Scientific American . 229 2 4859. Bibcode  1973SciAm.229b..48H . doi  10.1038scientificamerican0873-48 . ISSN   0036-8733 . JSTOR   24923169 .  Jain, B. K. August 2009. Digital Electronics - A Modern Approach by B K Jain . ISBN   9788182202153 . Retrieved 2 May 2017 .   A Survey Of Architectural Techniques for Managing Process Variation , ACM Computing Surveys , 2015 Further reading  edit  Baker, R. Jacob 2010. CMOS Circuit Design, Layout, and Simulation, Third Edition . Wiley-IEEE. p.  1174. ISBN   978-0-470-88132-3 . httpCMOSedu.com Weste, Neil H. E.  Harris, David M. 2010. CMOS VLSI Design A Circuits and Systems Perspective, Fourth Edition . Boston PearsonAddison-Wesley. p.  840. ISBN   978-0-321-54774-3 . httpCMOSVLSI.com Chen, Wai-Kai ed 2006. The VLSI Handbook, Second Edition Electrical Engineering Handbook . Boca Raton CRC. ISBN   0-8493-4199-X . CS1 maint extra text authors list  link  Mead, Carver A. and Conway, Lynn 1980. Introduction to VLSI systems . Boston Addison-Wesley. ISBN   0-201-04358-0 . CS1 maint multiple names authors list  link  External links  edit  Lectures on Design and Implementation of VLSI Systems at Brown University List of VLSI companies around the world Design of VLSI Systems Complete VLSI Design Flow v t e Computer science Note This template roughly follows the 2012 ACM Computing Classification System . Hardware Printed circuit board Peripheral Integrated circuit Very Large Scale Integration Systems on Chip SoCs Energy consumption Green computing Electronic design automation Hardware acceleration Computer systems organization Computer architecture Embedded system Real-time computing Dependability Networks Network architecture Network protocol Network components Network scheduler Network performance evaluation Network service Software organization Interpreter Middleware Virtual machine Operating system Software quality Software notations and tools Programming paradigm Programming language Compiler Domain-specific language Modeling language Software framework Integrated development environment Software configuration management Software library Software repository Software development Software development process Requirements analysis Software design Software construction Software deployment Software maintenance Programming team Open-source model Theory of computation Model of computation Formal language Automata theory Computational complexity theory Logic Semantics Algorithms Algorithm design Analysis of algorithms Algorithmic efficiency Randomized algorithm Computational geometry Mathematics of computing Discrete mathematics Probability Statistics Mathematical software Information theory Mathematical analysis Numerical analysis Information systems Database management system Information storage systems Enterprise information system Social information systems Geographic information system Decision support system Process control system Multimedia information system Data mining Digital library Computing platform Digital marketing World Wide Web Information retrieval Security Cryptography Formal methods Security services Intrusion detection system Hardware security Network security Information security Application security Humancomputer interaction Interaction design Social computing Ubiquitous computing Visualization Accessibility Concurrency Concurrent computing Parallel computing Distributed computing Multithreading Multiprocessing Artificial intelligence Natural language processing Knowledge representation and reasoning Computer vision Automated planning and scheduling Search methodology Control method Philosophy of artificial intelligence Distributed artificial intelligence Machine learning Supervised learning Unsupervised learning Reinforcement learning Multi-task learning Cross-validation Graphics Animation Rendering Image manipulation Graphics processing unit Mixed reality Virtual reality Image compression Solid modeling Applied computing E-commerce Enterprise software Computational mathematics Computational physics Computational chemistry Computational biology Computational social science Computational engineering Computational healthcare Digital art Electronic publishing Cyberwarfare Electronic voting Video games Word processing Operations research Educational technology Document management Book Category Portal Outline WikiProject Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleVery_Large_Scale_Integration oldid914579143  Categories  Telecommunications engineering Integrated circuits Hidden categories Articles needing additional references from September 2010 All articles needing additional references CS1 maint extra text authors list CS1 maint multiple names authors list