English Electric KDF9 From Wikipedia, the free encyclopedia Jump to navigation Jump to search KDF9 was an early British computer designed and built by English Electric . The first came into service in 1964 and the last of 29 machines was decommissioned in 1980 at the National Physical Laboratory . The KDF9 was designed for, and used almost entirely in, the mathematical and scientific processing fields - in 1967, nine were in use in UK universities and technical colleges. 1  . The KDF8 , developed in parallel, was aimed at commercial processing workloads. The KDF9 was an early example of a machine that directly supported multiprogramming , using offsets into its core memory to separate the programs into distinct virtual address spaces. Several operating systems were developed for the platform, including some that provided fully interactive use through PDP-8 machines acting as smart terminal servers . A number of compilers were available, notably a number of Algol 60 compilers. Contents 1 Architecture 1.1 Registers 1.2 Instruction set 1.3 Multiprogramming timesharing 2 Reminiscence 3 Physical 4 Notes 5 External links Architecture  edit  The logic circuits of the KDF9 were entirely solid-state. The KDF9 used transformer-coupled diodetransistor logic , built from germanium diodes, about 20,000 transistors, and about 2,000 toroid pulse transformers  magnetic amplifiers . 2  They ran on a 1  MHz clock that delivered two pulses of 250ns separated by 500ns, in each clock cycle. The maximum configuration incorporated 32K words of 48-bit core storage 192K bytes with a cycle time of 6 microseconds. Each word could hold a 48-bit integer or floating-point number, two 24-bit integer or floating-point numbers, six 8-bit instruction syllables , or eight 6-bit characters. There was also provision for efficient handling of double-word 96-bit numbers in both integer and floating point formats. However, there was no facility for byte or character addressing, so that non-numerical work suffered by comparison. Its standard character set was a version of the Friden Flexowriter paper tape code that was oriented to Algol 60, and included unusual characters such as the Algol subscript 10. However, each other IO device type implemented its own subset of that. Not every character that could be read from paper tape could be successfully printed, for example. Registers  edit  The CPU architecture featured three register sets. The Nest was a 16-deep pushdown stack of arithmetic registers, The SJNS Subroutine Jump Nesting Store was a similar stack of return addresses. The Q Store was a set of 16 index registers, each of 48 bits divided into Counter C, Increment I and Modifier M parts of 16 bits each. Flags on a memory-reference instruction specified whether the address should be modified by the M part of a Q Store, and, if so, whether the C part should be decremented by 1 and the M part incremented by the contents of the I part. This made the coding of counting loops very efficient. Three additional Nest levels and one additional SJNS level were reserved to Director, the Operating System, allowing short-path interrupts to be handled without explicit register saving and restoring. As a result, the interrupt overhead was only 3 clock cycles. Instruction set  edit  Instructions were of 1, 2 or 3 syllables. Most arithmetic took place at the top of the Nest and used zero-address , 1-syllable instructions, although address arithmetic and index updating were handled separately in the Q store. Q Store handling, and some memory reference instructions used 2 syllables. Memory reference instructions with a 16-bit address offset, most jump instructions, and 16-bit literal load instructions, all used 3 syllables. Dense instruction coding , and extensive use of the register sets, meant that relatively few store accesses were needed for common scientific codes, such as scalar product and polynomial inner loops. This did much to offset the relatively slow core cycle time, giving the KDF9 about a third of the speed of its much more famous, but 8 times more expensive and much less commercially successful contemporary, the Manchester Ferranti Atlas Computer . Multiprogramming timesharing  edit  The KDF9 was one of the earliest fully hardware-secured multiprogramming systems. Up to four programs could be run at once under the control of its elegantly simple operating system, the Timesharing Director , each being confined to its own core area by BA Base Address and NOL Number of Locations registers. Each program had its own sets of stack and Q store registers, which were activated when that program was dispatched, so that context switching was very efficient. Each program could drive hardware IO devices directly, but was limited by hardware checks to those that the Director had allocated to it. Any attempt to use an unallocated device caused an error interrupt. A similar interrupt resulted from overfilling or over-emptying the Nest or SJNS, or attempting to access storage at an address above that given in the NOL register. Somewh at different was the Lock-Out interrupt, which resulted from trying to access an area of store that was currently being used by an IO device, so that there was hardware mutual exclusion of access to DMA buffers. When a program blocked on a Lock-Out, or by voluntarily waiting for an IO transfer to terminate, it was interrupted and Director switched to the program of highest pr iority that was not itself blocked. When a Lock-Out cleared, or an awaited transfer terminated, and the responsible program was of higher priority than the program currently running, the IO Control IOC unit interrupted to allow an immediate context switch. IOC also made provision to avoid priority inversion, in which a program of high priority waits for a device made busy by a program of lower priority, requesting a distinct interrupt in that case. Later operating systems, including Eldon 2 3  at the University of Leeds, and COTAN, developed by UKAEA Culham Laboratories with the collaboration of Glasgow University, were fully interactive multi-access systems, with PDP-8 front ends to handle the terminals. The Kidsgrove and Whetstone Algol 60 compilers were among the first of their class. The Kidsgrove compiler stressed optimization the Whetstone compiler produced an interpretive object code aimed at debugging. It was by instrumenting the latter that Brian Wichmann obtained the statistics on program behaviour that led to the Whetstone benchmark for scientific computation, 4  which inspired in turn the Dhrystone benchmark for non-numerical workloads. 5  Reminiscence  edit  Machine code programming used an unusual form of octal , known locally as bastardized octal. It represented 8 bits with three octal digits but the first represented only two bits, whilst the others, the usual three. A more polite colloquial name was silly octal, derived from the official name which was syllabic octal . Although the word  byte  had been coined by the designers of the IBM 7030 Stretch for a group of eight bits , it was not yet well known, and English Electric used the word  syllable  for what is now called a byte . Within English Electric, its predecessor, DEUCE , had a well-used matrix scheme based on GIP General Interpretive Programme. The unreliability of valve machines led to the inclusion of a sum-check mechanism to detect errors in matrix operations. 6  The scheme used block floating-point using fixed-point arithmetic hardware, in which the sum-checks were precise. However, when the corresponding scheme was implemented on KDF9, it used floating point, a new concept that had only limited mathematical analysis. It quickly became clear that sum checks were no longer precise and a project was established in an attempt to provide a usable check. In floating point A  B  C is not necessarily the same as A  B  C i.e. the  operation is not associative. Before long, however, it was recognized that error rates with transistor machines was not an issue they either worked correctly or didnt work at all. Consequently, the idea of sum checks was abandoned. The initial matrix package proved a very useful system testing tool as it was able to generate lengthy performance checks well before more formal test packages which were subsequently developed. KDF9 was developed as project KD9 Kidsgrove Development 9 and that the F in its designation was contributed by the then Chairman after a long and tedious discussion on what to name the machine at launchI dont care if you call it the F . See also KDF8 for the parallel development and use of a commercially oriented computer. The Egdon operating system was so named because one was going to UKAEA Winfrith  in Thomas Hardys book The Return of the Native Winfrith Heath is called Egdon Heath. Their Fortran was called Egtran. Eldon was so named because Leeds University s computer was located in a converted Eldon chapel. Physical  edit  The machine weighed more than 10,300 pounds 5.2 short tons 4.7  t. Control desk with interruption typewriter 300 lb 136 kg, main store and inputoutput control unit 3,500 1,587 kg, arithmetic and main control unit 3,500 1,587 kg, power supply unit 3,000 1,360 kg. 7  Notes  edit   Roberts, Goronwy 6 March 1967. Computers . Hansard . UK Parliament. HC . Retrieved 8 July 2017 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  The KDF9 Computer - 30 Years On  David Holdsworth Winter 200910. KDF9 Time Sharing Eldon 2 is not EGDON . Computer RESURRECTION - Issue 49 . Computer Conservation Society . Retrieved 3 October 2010 .  Curnow, H.J. and Wichman, B.A.  A Synthetic Benchmark  Computer Journal , Volume 19, Issue 1, February 1976., p. 43-49.  Weiss, Alan. Dhrystone Benchmark History, Analysis, Scores and Recommendations PDF .  The sum check equally well guarded against programming errors, in the event that some or all of a matrix was inadvertently overwritten.  English Electric  Selling the Computer Revolution  Computer History Museum . www.computerhistory.org . p.  27. External links  edit  The English Electric KDF9 The Hardware of the KDF9 The Software of the KDF9 Benchmarking and the KDF9 A KDF9 Bibliography ee9, a KDF9 emulator written in GNU Ada Delivery List and applications for the English Electric KDF9 History of KDF9 Algol compiler The Whetstone KDF9 Algol Translator Some KDF9 Algol compiler anecdotes Presentation on KDF9 Algol on visit from Dijkstra KDF9 8-level papertape format KDF9 Nest images Source Code for KDF9 port of Atlas Autocode compiler v t e International Computers Limited ICL 1968-2002 Predecessor mainframes LEO I ICT 1301 ICT 1501 Elliott 803 KDF8 KDF9 English Electric System 4 series System 410 System 430 System 450 System 470 System 472 System 475 ICT 1900 series 1901 1901A 1901S 1901T 1902 1902A 1902S 1902T 1903 1903A 1903S 1903T 1904 1904A 1904E 1904F 1904S 1905 1905E 1905F 1906 1906A 1906E 1906F 1906S 1907 1907E 1907F 1908 1909 ICL 2900 Series 2950 2955 2956 2960 2966 2970 2972 2976 2980 2982 2988 CAFS DAP OCP ICL Series 39 Level 30 Level 50 Level 60 Level 80 ICL minicomputers 2903 2904 2905 ME29 System Ten System 25 ICL workstations 7502 7503 7561 DRS 20 DRS 100 DRS 200 DRS 300 DRS 400 DRS 500 DRS 3000 DRS 6000 PERQ One Per Desk ICL operating systems OpenVME VME VMEB VMEK superNova CME DME TME Executive GEORGE MAXIMOP MINIMOP J MultiJob ICL programming languages PLAN Fortran ALGOL 60 SOBS COBOL JEAN C Pascal S3 SCL SFL ApplicationMaster ReportMaster RPG DAP FORTRAN Retrieved from  httpsen.wikipedia.orgwindex.phptitleEnglish_Electric_KDF9 oldid910667358  Categories  Early British computers ICL mainframe computers Magnetic logic computers Transistorized computers English Electric Computer-related introductions in 1964 Hidden categories Use dmy dates from July 2017 Use British English from July 2017