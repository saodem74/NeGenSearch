Build automation From Wikipedia, the free encyclopedia Jump to navigation Jump to search Software development Core activities Processes Requirements Design Engineering Construction Testing Debugging Deployment Maintenance Paradigms and models Agile Cleanroom Incremental Prototyping Spiral V model Waterfall Methodologies and frameworks ASD DevOps DAD DSDM FDD IID Kanban Lean SD LeSS MDD MSF PSP RAD RUP SAFe Scrum SEMAT TSP UP XP Supporting disciplines Configuration management Documentation Software quality assurance SQA Project management User experience Practices ATDD BDD CCO CI CD DDD PP SBE Stand-up TDD Tools Compiler Debugger Profiler GUI designer Modeling IDE Build automation Release automation Infrastructure as code Testing Standards and Bodies of Knowledge BABOK CMMI IEEE standards ISO 9001 ISOIEC standards PMBOK SWEBOK ITIL Glossaries Artificial intelligence Computer science Electrical and electronics engineering v t e Build automation is the process of automating the creation of a software build and the associated processes including compiling computer source code into binary code , packaging binary code , and running automated tests . Contents 1 Overview 2 Build-automation utilities 3 Build-automation servers 4 Distributed build automation 5 Relationship to Continuous Delivery and Continuous Integration 6 Advantages 7 See also 8 References Overview  edit  Historically, build automation was accomplished through makefiles . Today, there are two general categories of tools 1  Build-automation utility This includes utilities like Make , Rake, Cake, MSBuild , Ant , Maven or Gradle Java etc. Their primary purpose is to generate build artifacts through activities like compiling and linking source code. Build-automation servers These are general web based tools that execute build-automation utilities on a scheduled or triggered basis a continuous integration server is a type of build-automation server. Depending on the level of automation the following classification is possible Makefile - level Make-based tools Non-Make-based tools Build script or Makefile generation tools Continuous-integration tools Configuration-management tools Meta-build tools or package managers Other A software list for each can be found in list of build automation software . Build-automation utilities  edit  Build-automation utilities allow the automation of simple, repeatable tasks. When using the tool, it will calculate how to reach the goal by executing tasks in the correct, specific order and running each task. The two ways build tools differ are task-oriented vs. product-oriented. Task-oriented tools describe the dependency of networks in terms of a specific set task and produ ct-oriented tools describe things in terms of the products they generate. 2  Build-automation servers  edit  Although build servers existed long before continuous-integration servers, they are generally synonymous with continuous-integration servers, however a build server may also be incorporated into an ARA tool or ALM tool. Server types On-demand automation such as a user running a script at the command line Scheduled automation such as a continuous integration server running a nightly build Triggered automation such as a continuous integration server running a build on every commit to a version-control system. Distributed build automation  edit  Automation is achieved through the use of a compile farm for either distributed compilation or the execution of the utility step. 3  The distributed build process must have machine intelligence to understand the source-code dependencies to execute the distributed build. Relationship to Continuous Delivery and Continuous Integration  edit  Build automation is considered the first step in moving toward implementing a culture of Continuous Delivery and DevOps . Build automation combined with Continuous Integration , deployment , application-release automation , and many other processes help move an organization forward in establishing software-delivery best practices. 4   how  Advantages  edit  The advantages of build automation to software development projects include A necessary pre-condition for continuous integration and continuous testing Improve product quality Accelerate the compile and link processing Eliminate redundant tasks Minimize bad builds Eliminate dependencies on key personnel Have history of builds and releases in order to investigate issues Save time and money - because of the reasons listed above. 5  See also  edit  Application-release automation ARA Continuous configuration automation CCA Continuous integration CI Continuous delivery CD Continuous testing DevOps List of build automation software Product family engineering Release engineering RE Software configuration management SCM Unit testing References  edit   Ceruzzi, Paul E. 2003. A history of Modern computing . The MIT Press. ISBN   978-0262532037 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Clark, Mike 2004. Pragmatic Project Automation How to Build, Deploy, and Monitor Java Apps . The Pragmatic Programmers. ISBN   978-0974514031 .  Enos, Joe 2013. Automated Builds The Key to Consistency . InfoQ . C4Media Inc . Retrieved September 16, 2015 .  Bashan, Shmuel Bellagio, David E. 2011. Work Item Management with IBM Rational ClearQuest and Jazz A customization Guide . IBM Press. ISBN   978-0137001798 .  Archived copy PDF . Archived from the original PDF on 2008-11-23 . Retrieved 2008-09-19 . Cite uses deprecated parameter deadurl  help  CS1 maint archived copy as title  link  Retrieved from  httpsen.wikipedia.orgwindex.phptitleBuild_automation oldid903302470  Categories  Build automation Types of tools used in software development Hidden categories CS1 errors deprecated parameters CS1 maint archived copy as title Wikipedia articles needing clarification from January 2018