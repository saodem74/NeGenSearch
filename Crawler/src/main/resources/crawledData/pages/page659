Non-functional requirement From Wikipedia, the free encyclopedia    Redirected from Ilities  Jump to navigation Jump to search type of requirement in systems engineering In systems engineering and requirements engineering , a non-functional requirement NFR is a requirement that specifies criteria that can be used to judge the operation of a system, rather than specific behaviors. They are contrasted with functional requirements that define specific behavior or functions. The plan for implementing functional requirements is detailed in the system design . The plan for implementing non-functional requirements is detailed in the system architecture , because they are usually architecturally significant requirements . 1  Broadly, functional requirements define what a system is supposed to do and non-functional requirements define how a system is supposed to be . Functional requirements are usually in the form of system shall do requirement , an individual action or part of the system, perhaps explicitly in the sense of a mathematical function , a black box description input, output, process and control functional model or IPO Model . In contrast, non-functional requirements are in the form of system shall be requirement , an overall property of the system as a whole or of a particular aspect and not a specific function. The systems overall properties commonly mark the difference between whether the development project has succeeded or failed. Non-functional requirements are often called  quality attributes  of a system. Other terms for non-functional requirements are qualities, quality goals, quality of service requirements, constraints, non-behavioral requirements, 2  or technical requirements. 3  Informally these are sometimes called the  ilities , from attributes like stability and portability. Qualitiesthat is non-functional requirementscan be divided into two main categories Execution qualities, such as safety, security and usability, which are observable during operation at run time. Evolution qualities, such as testability , maintainability, extensibility and scalability, which are embodied in the static structure of the system. 4  5  Contents 1 Examples 2 See also 3 References 4 External links Examples  edit  A system may be required to present the user with a display of the number of records in a database. This is a functional requirement. How current this number needs to be, is a non-functional requirement. If the number needs to be updated in real time , the system architects must ensure that the system is capable of displaying the record count within an acceptably short interval of the number of records changing. Sufficient network bandwidth may be a non-functional requirement of a system. Other examples include Accessibility Adaptability Auditability and control Availability see service level agreement  Backup Capacity , current and forecast Certification Compliance Configuration management Cost , initial and Life-cycle cost Data integrity Data retention Dependency on other parties Deployment Development environment Disaster recovery Documentation Durability Efficiency resource consumption for given load Effectiveness resulting performance in relation to effort Emotional factors like fun or absorbing or has Wow Factor Environmental protection Escrow Exploitability Extensibility adding features, and carry-forward of customizations at next major version upgrade Failure management Fault tolerance e.g. Operational System Monitoring, Measuring, and Management Integrability ability to integrate components Internationalization and localization Interoperability Legal and licensing issues or patent-infringement-avoidability Maintainability e.g. Mean Time To Repair - MTTR Management Modifiability Network topology Open source Operability Performance  response time  performance engineering  Platform compatibility Privacy compliance to privacy laws  Portability Quality e.g. faults discovered, faults delivered, fault removal efficacy  Readability Reliability e.g. Mean Time BetweenTo Failures - MTBFMTTF  Reporting Resilience Resource constraints processor speed, memory, disk space, network bandwidth, etc. Response time Reusability Robustness Safety or Factor of safety Scalability horizontal, vertical Security cyber and physical Software, tools, standards etc. Compatibility Stability Supportability Testability Throughput Transparency Usability Human Factors by target user community Volume See also  edit  ISOIEC 25010 2011 Consortium for IT Software Quality ISOIEC 9126 FURPS Requirements analysis Usability requirements Non-Functional Requirements framework Architecturally Significant Requirements References  edit   Chen, Lianping Ali Babar, Muhammad Nuseibeh, Bashar 2013. Characterizing Architecturally Significant Requirements. IEEE Software . 30 2 3845. doi  10.1109MS.2012.174 . hdl  103443061 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Stellman, Andrew Greene, Jennifer 2005. Applied Software Project Management . OReilly Media . p.  113. ISBN   978-0-596-00948-9 . Archived from the original on 2015-02-09. Cite uses deprecated parameter deadurl  help   Ambler, Scott. Technical Non-Functional Requirements An Agile Introduction . Agile Modelling . Ambysoft Inc . Retrieved 5 October 2018 .  Wiegers, Karl Beatty, Joy 2013. Software Requirements, Third Edition . Microsoft Press. ISBN   978-0-7356-7966-5 .  Young, Ralph R. 2001. Effective Requirements Practices . Addison-Wesley. ISBN   978-0-201-70912-4 . External links  edit  Petter L. H. Eide 2005. Quantification and Traceability of Requirements PDF . Idi.ntnu.bo . Retrieved 3 October 2017 . Dalbey, John. Nonfunctional Requirements . Csc.calpoly.edu . Retrieved 3 October 2017 . Modeling Non-Functional Aspects in Service Oriented Architecture PDF . Cs.umb.edu . Retrieved 3 October 2017 . Non-Functional Requirements Do User Stories Really Help . Methodsandtools.com . Retrieved 3 October 2017 . Non-Functional Requirements Be Here - CISQ - Consortium for IT Software Quality . it-cisq.org . Retrieved 3 October 2017 . Retrieved from  httpsen.wikipedia.orgwindex.phptitleNon-functional_requirement oldid914449553  Categories  Software requirements Systems engineering Hidden categories CS1 errors deprecated parameters Use American English from March 2019 All Wikipedia articles written in American English Articles with short description