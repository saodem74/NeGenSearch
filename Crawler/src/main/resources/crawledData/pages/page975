Turing completeness From Wikipedia, the free encyclopedia    Redirected from Turing complete  Jump to navigation Jump to search The ability of a theoretical computing system to simulate a Turing machine For the usage of this term in the theory of relative computability by oracle machines , see Turing reduction . This article includes a list of references , but its sources remain unclear because it has insufficient inline citations . Please help to improve this article by introducing more precise citations.  July 2014   Learn how and when to remove this template message  In computability theory , a system of data-manipulation rules such as a computers instruction set , a programming language , or a cellular automaton  is said to be Turing complete or computationally universal if it can be used to simulate any Turing machine . This means that this system is able to recognize or decide other data-manipulation rule sets. Turing completeness is used as a way to express the power of such a data-manipulation rule set. Virtually all programming languages today are Turing complete. The concept is named after English mathematician and computer scientist Alan Turing . A related concept is that of Turing equivalence    two computers P and Q are called equivalent if P can simulate Q and Q can simulate P. The ChurchTuring thesis conjectures that any function whose values can be computed by an algorithm can be computed by a Turing machine, and therefore that if any real-world computer can simulate a Turing machine, it is Turing equivalent to a Turing machine. A universal Turing machine can be used to simulate any Turing machine and by extension the computational aspects of any possible real-world computer. NB 1  To show that something is Turing complete, it is enough to show that it can be used to simulate some Turing complete system. For example, an imperative language is Turing complete if it has conditional branching  e.g. , if and goto statements, or a branch if zero instruction see one instruction set computer  and the ability to change an arbitrary amount of memory  e.g. , the ability to maintain an arbitrary number of data items. Of course, no physical system can have infinite memory but if the limitation of finite memory is ignored, most programming languages are otherwise Turing complete. Contents 1 Non-mathematical usage 2 Formal definitions 3 History 4 Computability theory 5 Turing oracles 6 Digital physics 7 Examples 7.1 Unintentional Turing completeness 8 Non-Turing-complete languages 8.1 Data languages 9 See also 10 Notes 11 References 12 Further reading 13 External links Non-mathematical usage  edit  In colloquial usage, the terms Turing complete or Turing equivalent are used to mean that any real-world general-purpose computer or computer language can approximately simulate the computational aspects of any other real-world general-purpose computer or computer language. Real computers constructed so far can be functionally analyzed like a single-tape Turing machine the tape corresponding to their memory thus the associated mathematics can apply by abstracting their operation far enough. However, real computers have limited physical resources, so they are only linear bounded automaton complete. In contrast, a universal computer is defined as a device with a Turing complete instruction set, infinite memory, and infinite available time. Formal definitions  edit  In computability theory , several closely related terms are used to describe the computational power of a computational system such as an abstract machine or programming language  Turing completeness A computational system that can compute every Turing- computable function is called Turing-complete or Turing-powerful. Alternatively, such a system is one that can simulate a universal Turing machine . Turing equivalence A Turing-complete system is called Turing equivalent if every function it can compute is also Turing computable i.e., it computes precisely the same class of functions as do Turing machines . Alternatively, a Turing-equivalent system is one that can simulate, and be simulated by, a universal Turing machine. All known Turing-complete systems are Turing equivalent, which adds support to the ChurchTuring thesis . Computational universality A system is called universal with respect to a class of systems if it can compute every function computable by systems in that class or can simulate each of those systems. Typically, the term universality is tacitly used with respect to a Turing-complete class of systems. The term weakly universal is sometimes used to distinguish a system e.g. a cellular automaton  whose universality is achieved only by modifying the standard definition of Turing machine so as to include input streams with infinitely many 1s. History  edit  Turing completeness is significant in that every real-world design for a computing device can be simulated by a universal Turing machine . The ChurchTuring thesis states that this is a law of mathematics    that a universal Turing machine can, in principle, perform any calculation that any other programmable computer can. This says nothing about the effort needed to write the program , or the time it may take for the machine to perform the calculation, or any abilities the machine may possess that have nothing to do with computation. Charles Babbage s analytical engine 1830s would have been the first Turing-complete machine if it had been built at the time it was designed. Babbage appreciated that the machine was capable of great feats of calculation, including primitive logical reasoning, but he did not appreciate that no other machine could do better. From the 1830s until the 1940s, mechanical calculating machines such as adders and mult ipliers were built and improved, but they could not perform a conditional branch and therefore were not Turing complete. In the late 19th century, Leopold Kronecker formulated notions of computability, defining primitive recursive functions . These functions can be calculated by rote computation, but they are not enough to make a universal computer, because the instructions which compute them do not allow for an infinite loop. In the early 20th century, David Hilbert led a program to axiomatize all of mathematics with precise axioms and precise logical rules of deduction which could be performed by a machine. Soon, it became clear that a small set of deduction rules are enough to produce the consequences of any set of axioms. These rules were proved by Kurt Gdel in 1930 to be enough to produce every theorem. The actual notion of computation was isolated soon after, starting with Gdels incompleteness theorem . This theorem showed that axiom systems were limited when reasoning about the computation which deduces their theorems. Church and Turing independently demonstrated that Hilberts Entscheidungsproblem decision problem was unsolvable, 1  thus identifying the computational core of the incompleteness theorem. This work, along with Gdels work on general recursive functions , established that there are sets of simple instructions, which, when put together, are able to produce any computation. The work of Gdel showed that the notion of computation is essentially unique. In 1941 Konrad Zuse completed the Z3 computer , the first working Turing-complete machine this was the first digital computer in the modern sense. 2  Computability theory  edit  Computability theory characterizes problems as having, or not having, computational solutions. The first result of computability theory is that there exist problems for which it is impossible to predict what a Turing-complete system will do over an arbitrarily long time. The classic example is the halting problem  create an algorithm which takes as input a a program in some Turing-complete language, and b some data to be fed to that program and which determines whether the program, operating on the input, will eventually stop or will continue forever. It is trivial to create an algorithm that can do this for some inputs, but impossible to do this in general. For any characteristic of the programs eventual output, it is impossible to determine whether this characteristic will hold. This impossibility poses problems when analyzing real-world computer programs. For example, one cannot write a tool that entirely protects programmers from writing infinite loops, or protects users from supplying input that would cause infinite loops. One can instead limit a program to executing only for a fixed period of time  timeout , or limit the power of flow control instructions for example, providing only loops that iterate over the items of an existing array. However, another theorem shows that there are problems solvable by Turing-complete languages that cannot be solved by any language with only finite looping abilities i.e., any language that guarantees every program will eventually finish to a halt. So any such language is not Turing complete. For example, a language in which programs are guaranteed to complete and halt cannot compute the computable function which is produced by Cantors diagonal argument on all computable functions in that language. Turing oracles  edit  Main article Oracle machine A computer with access to an infinite tape of data may be more powerful than a Turing machine for instance, the tape might contain the solution to the halting problem , or some other Turing-undecidable problem. Such an infinite tape of data is called a Turing oracle . Even a Turing oracle with random data is not computable  with probability 1 , since there are only countably many computations but uncountably many oracles. So a computer with a random Turing oracle can compute things that a Turing machine cannot. Digital physics  edit  See also ChurchTuring thesis   Philosophical implications This section does not cite any sources . Please help improve this section by adding citations to reliable sources . Unsourced material may be challenged and removed .  November 2017   Learn how and when to remove this template message  All known laws of physics have consequences that are computable by a series of approximations on a digital computer. A hypothesis called digital physics states that this is no accident because the universe itself is computable on a universal Turing machine. This would imply that no computer more powerful than a universal Turing machine can be built physically. Examples  edit  The computational systems algebras, calculi that are discussed as Turing complete systems are those intended for studying theoretical computer science . They are intended to be as simple as possible, so that it would be easier to understand the limits of computation. Here are a few Automata theory Formal grammar language generators Formal language language recognizers Lambda calculus PostTuring machines Process calculus Most programming languages , conventional and unconventional, are Turing-complete. This includes All general-purpose languages in wide use. Procedural programming languages such as C , Pascal . Object-oriented languages such as Java , Smalltalk or C . Multi-paradigm languages such as Ada , C , Common Lisp , Object Pascal , Python , R . Most languages using less common paradigms Functional languages such as Lisp and Haskell . Logic programming languages such as Prolog . general-purpose macro processor such as m4 Declarative languages such as XSLT . 3  Esoteric programming languages , a form of mathematical recreation in which programmers work out how to achieve basic programming constructs in an extremely difficult but mathematically Turing-equivalent language. Some rewrite systems are Turing-complete. Turing completeness is an abstract statement of ability, rather than a prescription of specific language features used to implement that ability. The features used to achieve Turing completeness can be quite different Fortran systems would use loop constructs or possibly even goto statements to achieve repetition Haskell and Prolog, lacking looping almost entirely, would use recursion . Most programming languages are describing computations on von Neumann architectures, which have memory RAM and register and a control unit. These two elements make this architecture Turing-complete. Even pure functional languages are Turing-complete. 4  NB 2  Turing completeness in declarative SQL is implemented through recursive common table expressions . 5  Unsurprisingly, procedural extensions to SQL  PLSQL , etc. are also Turing complete. This illustrates one reason why relatively powerful non-Turing-complete languages are rare the more powerful the language is initially, the more complex are the tasks to which it is applied and the sooner its lack of completeness becomes perceived as a drawback, encouraging its extension until it is Turing complete. The untyped lambda calculus is Turing-complete, but many typed lambda calculi, including System F , are not. The value of typed systems is based in their ability to represent most typical computer programs while detecting more errors. Rule 110 and Conways Game of Life , both cellular automata , are Turing complete. Unintentional Turing completeness  edit  Some games and other software are Turing-complete by accident. Video games Dwarf Fortress 6  Minecraft 7   self-published source  Minesweeper 8   self-published source  LittleBigPlanet 7  Baba is You  citation needed  Factorio 9  Cities Skylines 10  Card games Magic The Gathering 7  11  Zero-person games simulations Conways Game of Life 12   self-published source  13  Computational languages HTML5  CSS3 14  15  Computer hardware x86 MOV instruction 16  Non-Turing-complete languages  edit  Many computational languages exist that are not Turing complete. One such example is the set of regular languages , which are generated by regular expressions and which are recognized by finite automata . A more powerful but still not Turing-complete extension of finite automata is the category of pushdown automata and context-free grammars , which are commonly used to generate parse trees in an initial stage of program compiling . Further examples include some of the early versions of the pixel shader languages embedded in Direct3D and OpenGL extensions.  citation needed  In total functional programming languages, such as Charity and Epigram , all functions are total and must terminate. Charity uses a type system and control constructs based on category theory , whereas Epigram uses dependent types . The LOOP language is designed so that it computes only the functions that are primitive recursive . All of these compute proper subsets of the total computable functions, since the full set of total computable functions is not computably enumerable . Also, since all functions in these languages are total, algorithms for recursively enumerable sets cannot be written in these languages, in contrast with Turing machines. Although untyped lambda calculus is Turing-complete, simply typed lambda calculus is not. Data languages  edit  The notion of Turing-completeness does not apply to languages such as XML , HTML , JSON , YAML and S-expressions , because they are typically used to represent structured data, not describe computation. These are sometimes referred to as markup languages , or more properly as container languages or data description languages.  citation needed  See also  edit  Algorithmic information theory Chomsky hierarchy ChurchTuring thesis Computability theory Inner loop Loop computing Machine that always halts Rices Theorem s mn theorem Stephen Wolfram s A New Kind of Science Principle of Computational Equivalence Structured program theorem Turing tarpit Notes  edit   A UTM cannot simulate non-computational aspects such as IO .  The following book provides an introduction for computation models Rauber, Thomas Rnger, Gudula 2013. Parallel programming for multicore and cluster systems 2nd ed.. Springer. ISBN   9783642378010 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em References  edit   Hodges, Andrew 1992 1983, Alan Turing The Enigma , London Burnett Books, p.  111, ISBN   0-04-510060-8  Rojas, Raul 1998. How to make Zuses Z3 a universal computer . Annals of the History of Computing . 20 3 5154. doi  10.110985.707574 .  Lyons, Bob 30 March 2001. Universal Turing Machine in XSLT . B2B Integration Solutions from Unidex . Archived from the original on 17 July 2011 . Retrieved 5 July 2010 . Cite uses deprecated parameter dead-url  help   Boyer, Robert S. Moore, J. Strother May 1983. A Mechanical Proof of the Turing Completeness of Pure Lisp PDF Technical report. Institute for Computing Science, University of Texas at Austin. 37. Archived PDF from the original on 22 September 2017. Cite uses deprecated parameter dead-url  help   Dfetter Breinbaas 8 August 2011. Cyclic Tag System . PostgreSQL wiki . Retrieved 10 September 2014 .  Cedotal, Andrew 16 April 2010. Man Uses Worlds Most Difficult Computer Game to Create  A Working Turing Machine . The Mary Sue . Archived from the original on 27 June 2015 . Retrieved 2 June 2015 . Cite uses deprecated parameter dead-url  help   a b c Zwinkau, Andreas 20 October 2013. Accidentally Turing-Complete . Andreas Zwinkau . Archived from the original on 5 June 2015 . Retrieved 2 June 2015 . Cite uses deprecated parameter dead-url  help   Kaye, Richard 31 May 2007. Infinite versions of minesweeper are Turing complete PDF . Richard Kayes Minesweeper Pages . Archived PDF from the original on 2 February 2017 . Retrieved 14 March 2017 . Cite uses deprecated parameter dead-url  help   Talbot, Carrie 16 July 2019. A Cities Skylines player has built in-game logic gates to create a computer powered by poop   . PCGamesN . Retrieved 16 July 2019 .  Plunkett, Luke 16 July 2019. Cities Skylines Map Becomes A Poop-Powered Computer . Kotaku . Retrieved 16 July 2019 .  Alex Churchill Stella Biderman Austin Herrick 2019. Magic The Gathering is Turing Complete. arXiv  1904.09828  cs.AI .  Rendell, Paul 12 January 2005. A Turing Machine in Conways Game of Life . Rendell-Attic . Archived from the original on 8 July 2009 . Retrieved 22 June 2009 . Cite uses deprecated parameter dead-url  help   Calcyman Johnston, Nathaniel 16 June 2009. Spartan universal computer-constructor . LifeWiki . Retrieved 22 June 2009 .  Fox-Epstein, Eli 26 August 2019, Experimentations with Abstract Machines. , retrieved 26 August 2019  CSS3 proven to be turing complete . Accodeing to you . 2015 . Retrieved 26 August 2019 .  Dolan, Stephen. mov is Turing-complete PDF . stedolan.net . Retrieved 9 May 2019 . Further reading  edit  .mw-parser-output .refbeginfont-size90margin-bottom0.5em.mw-parser-output .refbegin-hanging-indentsullist-style-typenonemargin-left0.mw-parser-output .refbegin-hanging-indentsulli,.mw-parser-output .refbegin-hanging-indentsdlddmargin-left0padding-left3.2emtext-indent-3.2emlist-stylenone.mw-parser-output .refbegin-100font-size100 Brainerd, W.S. Landweber, L.H. 1974. Theory of Computation . Wiley. ISBN   0-471-09585-0 . Giles, Jim 24 October 2007. Simplest universal computer wins student 25,000 . New Scientist . Herken, Rolf, ed. 1995. The Universal Turing Machine A Half-Century Survey . Springer Verlag. ISBN   3-211-82637-8 . Turing, A. M. 1936. On Computable Numbers, with an Application to the Entscheidungsproblem PDF . Proceedings of the London Mathematical Society . 2. 42  23065. doi  10.1112plmss2-42.1.230 . Turing, A.M. 1938. On Computable Numbers, with an Application to the Entscheidungsproblem A correction. Proceedings of the London Mathematical Society . 2. 43  5446. doi  10.1112plmss2-43.6.544 . External links  edit  Turing Complete . wiki.c2.com . Retrieved from  httpsen.wikipedia.orgwindex.phptitleTuring_completeness oldid914582128  Categories  Theory of computation Turing machine Programming language theory Hidden categories CS1 errors deprecated parameters Articles with short description Use dmy dates from November 2017 Articles lacking in-text citations from July 2014 All articles lacking in-text citations Articles needing additional references from November 2017 All articles needing additional references All articles with self-published sources Articles with self-published sources from November 2017 All articles with unsourced statements Articles with unsourced statements from May 2019 Articles with unsourced statements from December 2010 Articles with unsourced statements from November 2017