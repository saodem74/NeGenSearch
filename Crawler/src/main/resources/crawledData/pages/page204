Service-oriented architecture From Wikipedia, the free encyclopedia Jump to navigation Jump to search Service-oriented architecture  SOA  is a style of software design where services are provided to the other components by application components , through a communication protocol over a network. The basic principles of service-oriented architecture are independent of vendors, products and technologies. 1  A service is a discrete unit of functionality that can be accessed remotely and acted upon and updated independently, such as retrieving a credit card statement online. A service has four properties according to one of many definitions of SOA 2  It logically represents a business activity with a specified outcome. It is self-contained. It is a black box for its consumers. It may consist of other underlying services. 3  Different services can be used in conjunction to provide the functionality of a large software application , 4  a principle SOA shares with modular programming . Service-oriented architecture integrates distributed, separately-maintained and -deployed software components. It is enabled by technologies and standards that facilitate components communication and cooperation over a network, especially over an IP network. Contents 1 Overview 2 Defining concepts 3 Principles 4 Patterns 5 Implementation approaches 6 Organizational benefits 7 Criticism 8 Extensions and variants 8.1 Event-driven architectures 8.2 Web 2.0 8.3 Microservices 9 See also 10 References Overview  edit  In SOA, services use protocols that describe how they pass and parse messages using description metadata . This metadata describes both the functional characteristics of the service and quality-of-service characteristics. Service-oriented architecture aims to allow users to combine large chunks of functionality to form applications which are built purely from existing services and combining them in an ad hoc manner. A service presents a simple interface to the requester that abstr acts away the underlying complexity acting as a black box. Further users can also access these independent services without any knowledge of their internal implementation. 5  Defining concepts  edit  The related buzzword service-orientation promotes loose coupling between services. SOA separates functions into distinct units, or services, 6  which developers make accessible over a network in order to allow users to combine and reuse them in the production of applications. These services and their corresponding consumers communicate with each other by passing data in a well-defined, shared format, or by coordinating an activity between two or more services. 7  A manifesto was published for service-oriented architecture in October, 2009. This came up with six core values which are listed as follows 8  Business value is given more importance than technical strategy. Strategic goals are given more importance than project-specific benefits. Intrinsic inter-operability is given more importance than custom integration. Shared services are given more importance than specific-purpose implementations. Flexibility is given more importance than optimization. Evolutionary refinement is given more importance than pursuit of initial perfection. SOA can be seen as part of the continuum which ranges from the older concept of distributed computing 6  9  and modular programming , through SOA, and on to current practices of mashups , SaaS , and cloud computing which some see as the offspring of SOA. 10  Principles  edit  There are no industry standards relating to the exact composition of a service-oriented architecture, although many industry sources have published their own principles. Some of these 11  12  13  14  include the following Standardized service contract Services adhere to a standard communications agreements, as defined collectively by one or more service-description documents within a given set of services. Service reference autonomy an aspect of loose coupling The relationship between services is minimized to the level that they are only aware of their existence. Service location transparency an aspect of loose coupling Services can be called from anywhere within the network that it is located no matter where it is present. Service longevity Services should be designed to be long lived. Where possible services should avoid forcing consumers to change if they do not require new features, if you call a service today you should be able to call the same service tomorrow. Service abstraction The services act as black boxes, that is their inner logic is hidden from the consumers. Service autonomy Services are independent and control the functionality they encapsulate, from a Design-time and a run-time perspective. Service statelessness Services are stateless, that is either return the requested value or give an exception hence minimizing resource use. Service granularity A principle to ensure services have an adequate size and scope. The functionality provided by the service to the user must be relevant. Service normalization Services are decomposed or consolidated normalized to minimize redundancy. In some, this may not be done, These are the cases where performance optimization, access, and aggregation are required. 15  Service composability Services can be used to compose other services. Service discovery Services are supplemented with communicative meta data by which they can be effectively discovered and interpreted. Service reusability Logic is divided into various services, to promote reuse of code. Service encapsulation Many services which were not initially planned under SOA, may get encapsulated or become a part of SOA. Patterns  edit  Each SOA building block can play any of the three roles Service provider It creates a web service and provides its information to the service registry. Each provider debates upon a lot of hows and whys like which service to expose, which to give more importance security or easy availability, what price to offer the service for and many more . The provider also has to decide what category the service should be listed in for a given broker service 16  and what sort of trading partner agreements are required to use the service. Service broker, service registry or service repository Its main functionality is to make the information regarding the web service available to any potential requester. Whoever implements the broker decides the scope of the broker. Public brokers are available anywhere and everywhere but private brokers are only available to a limited amount of public. UDDI was an early, no longer actively supported attempt to provide Web services discovery . Service requesterconsumer It locates entries in the broker registry using various find operations and then binds to the service provider in order to invoke one of its web services. Whichever service the service-consumers need, they have to take it into the brokers, bind it with respective service and then use it. They can access multiple services if the service provides multiple services. The service consumerprovider relationship is governed by a standardized service contract , 17  which has a business part, a functional part and a technical part. Service composition patterns have two broad, high-level architectural styles choreography and orchestration . Lower level enterprise integration patterns that are not bound to a particular architectural style continue to be relevant and eligible in SOA design. 18  19  20  Implementation approaches  edit  Service-oriented architecture can be implemented with web services . 21  This is done to make the functional building-blocks accessible over standard Internet protocols that are independent of platforms and programming languages. These services can represent either new applications or just wrappers around existing legacy systems to make them network-enabled. 22  Implementers commonly build SOAs using web services standards. One example is SOAP , which has gained broad industry acceptance after recommendation of Version 1.2 from the W3C 23  World Wide Web Consortium in 2003. These standards also referred to as web service specifications  also provide greater interoperability and some protection from lock-in to proprietary vendor software. One can, however, also implement SOA using any other service-based technology, such as Jini , CORBA or REST . Architectures can operate independently of specific technologies and can therefore be implemented using a wide range of technologies, including Web services based on WSDL and SOAP Messaging, e.g., with ActiveMQ, JMS, RabbitMQ RESTful HTTP, with Representational state transfer REST constituting its own constraints-based architectural style OPC-UA WCF Microsofts implementation of Web services, forming a part of WCF Apache Thrift gRPC SORCER Implementations can use one or more of these protocols and, for example, might use a file-system mechanism to communicate data following a defined interface specification between processes conforming to the SOA concept. The key is independent services with defined interfaces that can be called to perform their tasks in a standard way, without a service having foreknowledge of t he calling application, and without the application having or needing knowledge of how the service actually performs its tasks. SOA enables the development of applications that are built by combining loosely coupled and interoperable services. These services inter-operate based on a formal definition or contract, e.g., WSDL that is independent of the underlying platform and programming language. The interface definition hides the implementation of the language-specific service. SOA-based systems can therefore function independently of development technologies and platforms such as Java, .NET, etc.. Services written in C running on .NET platforms and services written in Java running on Java EE platforms, for example, can both be consumed by a common composite application or client. Applications running on either platform can also consume services running on the other as web services that facilitate reuse. Managed environments can also wrap COBOL legacy systems and present them as software services. . 24  High-level programming languages such as BPEL and specifications such as WS-CDL and WS-Coordination extend the service concept by providing a method of defining and supporting orchestration of fine-grained services into more coarse-grained business services, which architects can in turn incorporate into workflows and business processes implemented in composite applications or portals . Service-oriented modeling is an SOA framework that identifies the various disciplines that guide SOA practitioners to conceptualize, analyze, design, and architect their service-oriented assets. The Service-oriented modeling framework SOMF offers a modeling language and a work structure or map depicting the various components that contribute to a successful service-oriented modeling approach. It illustrates the major elements that identify the what to do aspects of a service development scheme. The model enables practitioners to craft a project plan and to identify the milestones of a service-oriented initiative. SOMF also provides a common modeling notation to address alignment between business and IT organizations. Elements of SOA, by Dirk Krafzig, Karl Banke, and Dirk Slama 25  SOA meta-model, The Linthicum Group, 2007 Organizational benefits  edit  Some enterprise architects believe that SOA can help businesses respond more quickly and more cost-effectively to changing market conditions. 26  This style of architecture promotes reuse at the macro service level rather than micro classes level. It can also simplify interconnection toand usage ofexisting IT legacy assets. With SOA, the idea is that an organization can look at a problem holistically. A business has more overall control. Theoretically there would not be a mass of developers using whatever tool sets might please them. But rather they would be coding to a standard that is set within the business. They can also develop enterprise-wide SOA that encapsulates a business-oriented infrast ructure. SOA has also been illustrated as a highway system providing efficiency for car drivers. The point being that if everyone had a car, but there was no highway anywhere, things would be limited and disorganized, in any attempt to get anywhere quickly or efficiently. IBM Vice President of Web Services Michael Liebow says that SOA builds highways. 27  In some respects, SOA could be regarded as an architectural evolution rather than as a revolution. It captures many of the best practices of previous software architectures. In communications systems, for example, little development of solutions that use truly static bindings to talk to other equipment in the network has taken place. By embracing a SOA approach, such systems can position themselves to stress the importance of well-defined, highly inter-operable interfaces. Other predecessors of SOA include Component-based software engineering and Object-Oriented Analysis and Design OOAD of remote objects, for instance, in CORBA . A service comprises a stand-alone unit of functionality available only via a formally defined interface. Services can be some kind of nano-enterprises that are easy to produce and improve. Also services can be mega-corporations constructed as the coordinated work of subordinate services. A mature rollout of SOA effectively defines the API of an organization. Reasons for treating the implementation of services as separate projects from larger projects include Separation promotes the concept to the business that services can be delivered quickly and independently from the larger and slower-moving projects common in the organization. The business starts understanding systems and simplified user interfaces calling on services. This advocates agility . That is to say, it fosters business innovations and speeds up time-to-market. 28  Separation promotes the decoupling of services from consuming projects. This encourages good design insofar as the service is designed without knowing who its consumers are. Documentation and test artifacts of the service are not embedded within the detail of the larger project. This is important when the service needs to be reused later. SOA promises to simplify testing indirectly. Services are autonomous, stateless, with fully documented interfaces, and separate from the cross-cutting concerns of the implementation. If an organization possesses appropriately defined test data, then a corresponding stub is built that reacts to the test data when a service is being built. A full set of regression tests, scripts, data, and responses is also captured for the service. The service can be tested as a black box using existing stubs corresponding to the services it calls. Test environments can be constructed where the primitive and out-of-scope services are stubs, while the remainder of the mesh is test deployments of full services. As each interface is fully documented with its own full s et of regression test documentation, it becomes simple to identify problems in test services. Testing evolves to merely validate that the test service operates according to its documentation, and finds gaps in documentation and test cases of all services within the environment. Managing the data state of idempotent services is the only complexity. Examples may prove useful to aid in documenting a service to the level where it becomes useful. The documentation of some APIs within the Java Community Process provide good examples. As these are exhaustive, staff would typically use only important subsets. The ossjsa.pdf file within JSR-89 exemplifies such a file. 29  Criticism  edit  SOA has been conflated with Web services  30  however, Web services are only one option to implement the patterns that comprise the SOA style. In the absence of native or binary forms of remote procedure call RPC, applications could run more slowly and require more processing power, increasing costs. Most implementations do incur these overheads, but SOA can be implemented using technologies for example, Java Business Integration JBI, Windows Communication Foundation WCF and data distribution service DDS that do not depend on remote procedure calls or translation through XML. At the same time, emerging open-source XML parsing technologies such as VTD-XML  and various XML-compatible binary formats promise to significantly improve SOA performance. Services implemented using JSON instead of XML do not suffer from this performance concern. 31  32  33  Stateful services require both the consumer and the provider to share the same consumer-specific context, which is either included in or referenced by messages exchanged between the provider and the consumer. This constraint has the drawback that it could reduce the overall scalability of the service provider if the service-provider needs to retain the shared context for each consumer. It also increases the coupling between a service provider and a consumer and makes switching service providers more difficult. 34  Ultimately, some critics feel that SOA services are still too constrained by applications they represent. 35  A primary challenge faced by service-oriented architecture is managing of metadata. Environments based on SOA include many services which communicate among each other to perform tasks. Due to the fact that the design may involve multiple services working in conjunction, an Application may generate millions of messages. Further services may belong to different organizations or e ven competing firms creating a huge trust issue. Thus SOA governance comes into the scheme of things. 36  Another major problem faced by SOA is the lack of a uniform testing framework. There are no tools that provide the required features for testing these services in a service-oriented architecture. The major causes of difficulty are 37  Heterogeneity and complexity of solution. Huge set of testing combinations due to integration of autonomous services. Inclusion of services from different and competing vendors. Platform is continuously changing due to availability of new features and services. See drops.dagstuhl.de 38  for additional challenges, partial solutions and research roadmap input regarding software service engineering Extensions and variants  edit  Event-driven architectures  edit  Main article Event-driven architecture Web 2.0  edit  Tim OReilly coined the term  Web 2.0  to describe a perceived, quickly growing set of web-based applications. 39  A topic that has experienced extensive coverage involves the relationship between Web 2.0 and service-oriented architectures.  which  SOA is the philosophy of encapsulating application logic in services with a uniformly defined interface and making these publicly available via discovery mechanisms. The notion of complexity-hiding and reuse, but also the concept of loosely coupling services has inspired researchers to elaborate on similarities between the two philosophies, SOA and Web 2.0, and their respective applications. Some argue Web 2.0 and SOA have significantly different elements and thus can not be regarded parallel philosophies, whereas others consider the two concepts as complementary and regard Web 2.0 as the global SOA. 40  The philosophies of Web 2.0 and SOA serve different user needs and thus expose differences with respect to the design and also the technologies used in real-world applications. However, as of 2008 update  , use-cases demonstrated the potential of combining technologies and principles of both Web 2.0 and SOA. 40  Microservices  edit  Main article Microservices Microservices are a modern interpretation of service-oriented architectures used to build distributed software systems . Services in a microservice architecture 41  are processes that communicate with each other over the network in order to fulfill a goal. These services use technology agnostic protocols , 42  which aid in encapsulating choice of language and frameworks, making their choice a concern internal to the service. Microservices are a new realisation and implementation approach to SOA, which have become popular since 2014 and after the introduction of DevOps , and which also emphasize continuous deployment and other agile practices. 43  There is no single commonly agreed definition of microservices. The following characteristics and principles can be found in the literature fine-grained interfaces to independently deployable services, business-driven development e.g. domain-driven design, IDEAL cloud application architectures, polyglot programming and persistence, lightweight container deployment, decentralized continuous delivery, and DevOps with holistic service monitoring. See also  edit  Loose coupling OASIS SOA Reference Model Service granularity principle SOA governance Software architecture Service-oriented communications SOC Service-oriented development of applications Service-oriented distributed applications References  edit   Chapter 1 Service Oriented Architecture SOA . msdn.microsoft.com . Archived from the original on February 6, 2016 . Retrieved September 21, 2016 . Cite uses deprecated parameter deadurl  help  .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Service-Oriented Architecture Standards - The Open Group . www.opengroup.org .  What Is SOA . www.opengroup.org . Archived from the original on August 19, 2016 . Retrieved September 21, 2016 . Cite uses deprecated parameter deadurl  help   Velte, Anthony T. 2010. Cloud Computing A Practical Approach . McGraw Hill. ISBN   978-0-07-162694-1 .  Migrating to a service-oriented architecture, Part 1 . December 9, 2008. Archived from the original on December 9, 2008 . Retrieved September 21, 2016 . Cite uses deprecated parameter deadurl  help  CS1 maint BOT original-url status unknown  link   a b Michael Bell 2008. Introduction to Service-Oriented Modeling. Service-Oriented Modeling Service Analysis, Design, and Architecture . Wiley  Sons. p.  3. ISBN   978-0-470-14111-3 .  Michael Bell 2010. SOA Modeling Patterns for Service-Oriented Discovery and Analysis . Wiley  Sons. p.  390. ISBN   978-0-470-48197-4 .  SOA Manifesto . www.soa-manifesto.org . Retrieved September 21, 2016 .  Thomas Erl June 2005. About the Principles . Serviceorientation.org  Application Platform Strategies Blog SOA is Dead Long Live Services . Apsblog.burtongroup.com. January 5, 2009 . Retrieved August 13, 2012 .  dead link   Yvonne Balzer Improve your SOA project plans , IBM , July 16, 2004  Microsoft Windows Communication Foundation team 2012. Principles of Service Oriented Design . msdn.microsoft.com . Retrieved September 3, 2012 .  Principles by Thomas Erl of SOA Systems Inc. eight specific service-orientation principles  M. Hadi Valipour Bavar AmirZafari Kh. Niki Maleki Negin Daneshpour 2009. A brief survey of software architecture concepts and service oriented architecture. 2009 2nd IEEE International Conference on Computer Science and Information Technology . pp.  3438. doi  10.1109ICCSIT.2009.5235004 . ISBN   978-1-4244-4519-6 .  Tony Shan 2004. Building a service-oriented e Banking platform. IEEE International Conference on Services Computing, 2004. SCC 2004. Proceedings. 2004 . pp.  237244. doi  10.1109SCC.2004.1358011 . ISBN   978-0-7695-2225-8 . 2004  Duan, Yucong Narendra, Nanjangud Du, Wencai Wang, Yongzhi Zhou, Nianjun. Exploring Cloud Service Brokering from an Interface Perspective . IEEE .  Duan, Yucong. A Survey on Service Contract . IEEE .  Olaf Zimmermann, Cesare Pautasso, Gregor Hohpe, Bobby Woolf 2016. A Decade of Enterprise Integration Patterns. IEEE Software . 33 1 1319. doi  10.1109MS.2016.11 . CS1 maint multiple names authors list  link   Rotem-Gal-Oz, Arnon 2012. SOA Patterns . Manning Publications. ISBN   978-1933988269 .  K. Julisch et al., Compliance by Design  Bridging the Chasm between Auditors and IT Architects . Computers  Security, Elsevier. Volume 30, Issue 6-7, Sep.-Oct. 2011.  Brandner, M., Craes, M., Oellermann, F., Zimmermann, O., Web Services-Oriented Architecture in Production in the Finance Industry, Informatik-Spektrum 022004, Springer-Verlag, 2004  www.ibm.com . Retrieved September 10, 2016 .  SOAP Version 1.2  W3C  in Japanese. W3.org . Retrieved August 13, 2012 .  Okishima, Haruhiru 2006. . Case Study of System Architecture that use COBOL assets   PDF .  Enterprise SOA . Prentice Hall, 2005  Christopher Koch A New Blueprint For The Enterprise , CIO Magazine , March 1, 2005  Elizabeth Millard January 2005. Building a Better Process. Computer User . Page 20.  Brayan Zimmerli November 11, 2009 Business Benefits of SOA , University of Applied Science of Northwestern Switzerland, School of Business  JSR-000089 OSS Service Activation API Specification 1.0 Final Release . sun.com  Joe McKendrick. Bray SOA too complex just vendor BS   . ZDNet.  Jimmy Zhang February 20, 2008 Index XML Documents with VTD-XML . XML Journal .  Jimmy Zhang August 5, 2008 i-Technology Viewpoint The Performance Woe of Binary XML . Microservices Journal .  Jimmy Zhang January 9, 2008 Manipulate XML Content the Ximple Way . devx.com .  The Reason SOA Isnt Delivering Sustainable Software . jpmorgenthal.com. June 19, 2009 . Retrieved June 27, 2009 .  SOA services still too constrained by applications they represent . zdnet.com. June 27, 2009 . Retrieved June 27, 2009 .  Governance Layer . www.opengroup.org . Retrieved September 22, 2016 .  How to Efficiently Test Service Oriented Architecture  WSO2 Inc . wso2.com . Retrieved September 22, 2016 .  httpdrops.dagstuhl.deopusvolltexte20092046pdf09021_abstracts_collection.2046.pdf  What Is Web 2.0 . Tim OReilly. September 30, 2005 . Retrieved June 10, 2008 .  a b Christoph Schroth  Till Janner 2007. Web 2.0 and SOA Converging Concepts Enabling the Internet of Services . IT Professional 9 2007, Nr. 3, pp. 3641, IEEE Computer Society . Retrieved February 23, 2008 . Cite journal requires journal  help   Dragoni, Nicola Giallorenzo, Saverio Alberto Lluch Lafuente Mazzara, Manuel Montesi, Fabrizio Mustafin, Ruslan Safina, Larisa 2016. Microservices yesterday, today, and tomorrow. arXiv  1606.04036v1  cs.SE .  James Lewis and Martin Fowler. Microservices .  Balalaie, A. Heydarnoori, A. Jamshidi, P. May 1, 2016. Microservices Architecture Enables DevOps Migration to a Cloud-Native Architecture. IEEE Software . 33 3 4252. doi  10.1109MS.2016.64 . hdl  10044140557 . ISSN   0740-7459 . Wikimedia Commons has media related to Service-oriented architecture . Listen to this article  infodl  This audio file was created from a revision of the article  Service-oriented architecture  dated 2011-10-27, and does not reflect subsequent edits to the article.  Audio help  More spoken articles v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Authority control GND  4841015-9 LCCN  sh2008008368 Retrieved from  httpsen.wikipedia.orgwindex.phptitleService-oriented_architecture oldid912781934  Categories  Spoken articles Software design patterns Architectural pattern computer science Enterprise application integration Service-oriented business computing Web services Hidden categories CS1 errors deprecated parameters CS1 maint BOT original-url status unknown All articles with dead external links Articles with dead external links from August 2019 CS1 maint multiple names authors list CS1 Japanese-language sources ja CS1 errors missing periodical Use mdy dates from April 2015 All articles with specifically marked weasel-worded phrases Articles with specifically marked weasel-worded phrases from October 2016 Articles containing potentially dated statements from 2008 All articles containing potentially dated statements Commons category link from Wikidata Articles with hAudio microformats Articles prone to spam from December 2018 Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers