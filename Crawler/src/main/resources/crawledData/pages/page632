Atomicity database systems From Wikipedia, the free encyclopedia Jump to navigation Jump to search For other uses, see Atomicity disambiguation . In database systems , atomicity     t   m  s  t i   from Ancient Greek   , romanized    tomos , lit.   undividable  is one of the ACID  Atomicity, Consistency , Isolation , Durability  transaction properties. An atomic transaction is an indivisible and irreducible series of database operations such that either all occur, or nothing occurs. 1  A guarantee of atomicity prevents updates to the database occurring only partially, which can cause greater problems than rejecting the whole series outright. As a consequence, the transaction cannot be observed to be in progress by another database client. At one moment in time, it has not yet happened, and at the next it has already occurred in whole or nothing happened if the transaction was cancelled in progress. An example of an atomic transaction is a monetary transfer from bank account A to account B. It consists of two operations, withdrawing the money from account A and saving it to account B. Performing these operations in an atomic transaction ensures that the database remains in a consistent state , that is, money is neither lost nor created if either of those two operations fail. 2  Contents 1 Orthogonality 2 Implementation 3 See also 4 References Orthogonality  edit  Atomicity does not behave completely orthogonally with regard to the other ACID properties of the transactions. For example, isolation relies on atomicity to roll back changes in the event of isolation failures such as deadlock  consistency also relies on rollback in the event of a consistency-violation by an illegal transaction. Finally, atomicity itself relies on durability to ensure the atomicity of transactions even in the face of external failures. As a result of this, failure to detect errors and roll back the enclosing transaction may cause failures of isolation and consistency. Implementation  edit  Typically, systems implement Atomicity by providing some mechanism to indicate which transactions have started and which finished or by keeping a copy of the data before any changes occurred  read-copy-update . Several filesystems have developed methods for avoiding the need to keep multiple copies of data, using journaling see journaling file system . Databases usually implement this using some form of loggingjournaling to track changes. The system synchronizes the logs often the metadata  as necessary after changes have successfully taken place. Afterwards, crash recovery ignores incomplete entries. Although implementations vary depending on factors such as concurrency issues, the principle of atomicity  i.e. complete success or complete failure  remain. Ultimately, any application-level implementation relies on operating-system functionality. At the file-system level, POSIX -compliant systems provide system calls such as open2 and flock2 that allow applications to atomically open or lock a file. At the process level, POSIX Threads provide adequate synchronization primitives. The hardware level requires atomic operations such as Test-and-set , Fetch-and-add , Compare-and-swap , or Load-LinkStore-Conditional , together with memory barriers . Portable operating systems cannot simply block interrupts to implement synchronization, since hardware that lacks concurrent execution such as hyper-threading or multi-processing is now extremely rare.  citation needed  See also  edit  Atomic operation Transaction processing Long-running transaction Read-copy-update References  edit   atomic operation . httpwww.webopedia.com  Webopedia . Retrieved 2011-03-23 . An operation during which a processor can simultaneously read a location and write it in the same bus operation. This prevents any other processor or IO device from writing or reading memory until the operation is complete. .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Amsterdam, Jonathan. Atomic File Transactions, Part 1 . OReilly . Archived from the original on 2016-03-03 . Retrieved 2016-02-28 . Cite uses deprecated parameter deadurl  help  Retrieved from  httpsen.wikipedia.orgwindex.phptitleAtomicity_database_systems oldid880834903  Categories  Data management Transaction processing Hidden categories CS1 errors deprecated parameters Articles containing Ancient Greek-language text All articles with unsourced statements Articles with unsourced statements from December 2016