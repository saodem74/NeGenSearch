Debugger From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article has multiple issues. Please help improve it or discuss these issues on the talk page .  Learn how and when to remove these template messages  This article includes a list of references , but its sources remain unclear because it has insufficient inline citations . Please help to improve this article by introducing more precise citations.  May 2013   Learn how and when to remove this template message  This article relies largely or entirely on a single source . Relevant discussion may be found on the talk page . Please help improve this article by introducing citations to additional sources.  May 2015  This article needs additional citations for verification . Please help improve this article by adding citations to reliable sources . Unsourced material may be challenged and removed. Find sources   Debugger     news    newspapers    books    scholar    JSTOR  April 2008   Learn how and when to remove this template message   Learn how and when to remove this template message  Winpdb debugging itself A debugger or debugging tool is a computer program that is used to test and debug other programs the target program. The code to be examined might alternatively be running on an instruction set simulator ISS, a technique that allows great power in its ability to halt when specific conditions are encountered, but which will typically be somewhat slower than executing the code directly on the appropriate or the same processor. Some debuggers offer two modes of operation, full or partial simulation, to limit this impact. A  trap  occurs when the program cannot normally continue because of a programming bug or invalid data. For example, the program might have tried to use an instruction not available on the current version of the CPU or attempted to access unavailable or protected memory . When the program traps or reaches a preset condition, the debugger typically shows the location in the original code if it is a source-level debugger or symbolic debugger , commonly now seen in integrated development environments . If it is a low-level debugger or a machine-language debugger it shows the line in the disassembly unless it also has online access to the original source code and can display the appropriate section of code from the assembly or compilation. Contents 1 Features 1.1 Reverse debugging 2 Language dependency 3 Memory protection 4 Hardware support for debugging 5 Debugger front-ends 6 List of debuggers 7 See also 8 References 9 External links Features  edit  Typically, debuggers offer a query processor, a symbol resolver, an expression interpreter, and a debug support interface at its top level. 1  Debuggers also offer more sophisticated functions such as running a program step by step  single-stepping or program animation , stopping  breaking  pausing the program to examine the current state at some event or specified instruction by means of a breakpoint , and tracking the values of variables. 2  Some debuggers have the ability to modify program state while it is running. It may also be possible to continue execution at a different location in the program to bypass a crash or logical error. The same functionality which makes a debugger useful for eliminating bugs allows it to be used as a software cracking tool to evade copy protection , digital rights management , and other software protection features. It often also makes it useful as a general verification tool, fault coverage , and performance analyzer , especially if instruction path lengths are shown. 3  Most mainstream debugging engines, such as gdb and dbx , provide console-based command line interfaces . Debugger front-ends are popular extensions to debugger engines that provide IDE integration, program animation , and visualization features. Reverse debugging  edit  Some debuggers include a feature called  reverse debugging , also known as historical debugging or backwards debugging. These debuggers make it possible to step a programs execution backwards in time. Various debuggers include this feature. Microsoft Visual Studio 2010 Ultimate edition, 2012 Ultimate, 2013 Ultimate, and 2015 Enterprise edition offers IntelliTrace reverse debugging for C, Visual Basic .NET, and some other languages, but not C. Reverse debuggers also exist for C, C, Java, Python, Perl, and other languages. Some are open source some are proprietary commercial software. Some reverse debuggers slow down the target by orders of magnitude, but the best reverse debuggers cause a slowdown of 2 or less. Reverse debugging is very useful for certain types of problems, but is still not commonly used yet. 4  Language dependency  edit  Some debuggers operate on a single specific language while others can handle multiple languages transparently. For example, if the main target program is written in COBOL but calls assembly language subroutines and PL1 subroutines, the debugger may have to dynamically switch modes to accommodate the changes in language as they occur. Memory protection  edit  Some debuggers also incorporate memory protection to avoid storage violations such as buffer overflow . This may be extremely important in transaction processing environments where memory is dynamically allocated from memory pools on a task by task basis. Hardware support for debugging  edit  Most modern microprocessors have at least one of these features in their CPU design to make debugging easier Hardware support for single-stepping a program, such as the trap flag . An instruction set that meets the Popek and Goldberg virtualization requirements makes it easier to write debugger software that runs on the same CPU as the software being debugged such a CPU can execute the inner loops of the program under test at full speed, and still remain under debugger control. In-system programming allows an external hardware debugger to reprogram a system under test for example, adding or removing instruction breakpoints. Many systems with such ISP support also have other hardware debug support. Hardware support for code and data breakpoints , such as address comparators and data value comparators or, with considerably more work involved, page fault hardware. 5  JTAG access to hardware debug interfaces such as those on ARM architecture processors or using the Nexus command set. Processors used in embedded systems typically have extensive JTAG debug support. Micro controllers with as few as six pins need to use low pin-count substitutes for JTAG, such as BDM , Spy-Bi-Wire , or debugWIRE on the Atmel AVR . DebugWIRE, for example, uses bidirectional signaling on the RESET pin. Debugger front-ends  edit  Some of the most capable and popular debuggers implement only a simple command line interface CLIoften to maximize portability and minimize resource consumption. Developers typically consider debugging via a graphical user interface GUI easier and more productive. This is the reason for visual front-ends, that allow users to monitor and control subservient CLI-only debuggers via graphical user interface . Some GUI debugger front-ends are designed to be compatible with a variety of CLI-only debuggers, while others are targeted at one specific debugger. List of debuggers  edit  Main article List of debuggers This article may contain indiscriminate , excessive , or irrelevant examples . Please improve the article by adding more descriptive text and removing less pertinent examples . See Wikipedias guide to writing better articles for further suggestions.  June 2015  Some widely used debuggers are Arm DTT , formerly known as Allinea DDT Eclipse debugger API used in a range of IDEs Eclipse IDE Java Nodeclipse JavaScript Firefox JavaScript debugger GDB - the GNU debugger LLDB Microsoft Visual Studio Debugger Radare2 Valgrind WDW, the OpenWatcom debugger WinDbg Earlier minicomputer debuggers include Dynamic debugging technique DDT On-line Debugging Tool ODT Earlier Mainframe debuggers include in date of release order 1985 CAEZTEST 1990 XPEDITER and Expediter CICS Current mainframe debuggers Debug Tool for zOS 6  XPEDITER and Expediter CICS zXDC 7  See also  edit  Computer programming portal Comparison of debuggers Core dump Kernel debugger List of tools for static code analysis Memory debugger Packet analyzer Profiling References  edit  General Sanjeev Kumar Aggarwal and M. Sarath Kumar 2003. Debuggers for Programming Languages. In Y.N. Srikant and Priti Shankar eds.. The Compiler Design Handbook Optimizations and Machine Code Generation . Boca Raton, Florida CRC Press . pp.  295327. ISBN   978-0-8493-1240-3 . CS1 maint uses authors parameter  link  CS1 maint uses editors parameter  link  .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em Jonathan B. Rosenberg. How Debuggers Work Algorithms, Data Structures, and Architecture . John Wiley  Sons . ISBN   0-471-14966-7 . CS1 maint uses authors parameter  link  Specific  Aggarwal and Kumar, p. 302.  Aggarwal and Kumar 2003, p. 301.  Aggarwal and Kumar, pp. 307-312.  Philip Claen Undo Software. Why is reverse debugging rarely used . Programmers Stack Exchange . Stack Exchange, Inc . Retrieved 12 April 2015 .  Aggarwal and Kumar 2003, pp. 299-301.  IBM Debug Tool for zOS, V13.1 PDF . Puiblic.dhe.ibm.com . Retrieved 2015-05-07 .  IBM Global Solutions Directory - zXDC Extended Debugging Controller z2.1 . Retrieved 2015-05-29 . External links  edit  Look up debugger in Wiktionary, the free dictionary. Debugging Tools for Windows OpenRCE Various Debugger Resources and Plug-ins IntelliTrace MSDN, Visual Studio 2015 Retrieved from  httpsen.wikipedia.orgwindex.phptitleDebugger oldid914617219  Categories  Debuggers Debugging Utility software types Hidden categories Articles lacking in-text citations from May 2013 All articles lacking in-text citations Articles needing additional references from May 2015 All articles needing additional references Articles needing additional references from April 2008 Articles with multiple maintenance issues Articles with too many examples from June 2015 All articles with too many examples Wikipedia articles with style issues from June 2015 CS1 maint uses authors parameter CS1 maint uses editors parameter