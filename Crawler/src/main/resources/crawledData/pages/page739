ALGOL 60 From Wikipedia, the free encyclopedia    Redirected from Algol 60  Jump to navigation Jump to search Programming language This article is about the programming language. For other uses, see Algol disambiguation . ALGOL 60 Paradigm procedural , imperative , structured Designed  by Backus , Bauer , Green , Katz , McCarthy , Naur , Perlis , Rutishauser , Samelson , van Wijngaarden , Vauquois , Wegstein , Woodger First  appeared 1960 Influenced by ALGOL 58 Influenced Most subsequent imperative languages so-called ALGOL-like languages, e.g. Simula , CPL , Pascal , Ada , C ALGOL 60 short for Algorithmic Language 1960  is a member of the ALGOL family of computer programming languages. It followed on from ALGOL 58 which had introduced code blocks and the begin and end pairs for delimiting them. ALGOL 60 was the first language implementing nested function definitions with lexical scope . It gave rise to many other programming languages, including CPL , Simula , BCPL , B , Pascal and C . Niklaus Wirth based his own ALGOL W on ALGOL 60 before moving to develop Pascal . Algol-W was intended to be the next generation ALGOL but the ALGOL 68 committee decided on a design that was more complex and advanced rather than a cleaned simplified ALGOL 60. The official ALGOL versions are named after the year they were first published. Algol 68 is substantially different from Algol 60 and was criticised partially for being so, so that in general Algol refers to dialects of Algol 60. Contents 1 Standardization 2 History 2.1 ALGOL 60 implementations timeline 3 Properties 3.1 ALGOL 60 Reserved words and restricted identifiers 3.1.1 Standard Operators 4 Examples and portability issues 4.1 Code sample comparisons 4.1.1 ALGOL 60 4.1.2 ALGOL 60 family 5 See also 6 References 7 Further reading 8 External links Standardization  edit  ALGOL 60  with COBOL  were the first languages to seek standardization. ISO 15381984 Programming languages  Algol 60 stabilized ISOTR 16721977 Hardware representation of ALGOL basic symbols ... now withdrawn History  edit  ALGOL 60 was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard inputoutput facilities in its description and the lack of interest in the language by large computer vendors. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development. John Backus developed the Backus normal form method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur for ALGOL 60, and at Donald Knuth s suggestion renamed BackusNaur form . 1  Peter Naur As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960. 2  The following people attended the meeting in Paris from January 11 to 16 Friedrich L. Bauer , Peter Naur , Heinz Rutishauser , Klaus Samelson , Bernard Vauquois , Adriaan van Wijngaarden , and Michael Woodger from Europe John W. Backus , Julien Green , Charles Katz , John McCarthy , Alan J. Perlis , and Joseph Henry Wegstein from the USA. Alan Perlis gave a vivid description of the meeting The meetings were exhausting, interminable, and exhilarating. One became aggravated when ones good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent. The language originally did not include recursion . It was inserted into the specification at the last minute, against the wishes of some of the committee. 3  ALGOL 60 inspired many languages that followed it. Tony Hoare remarked Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors. 4  The Scheme programming language, a variant of Lisp that adopted the block structure and lexical scope of ALGOL, also adopted the wording Revised Report on the Algorithmic Language Scheme for its standards documents in homage to ALGOL. 5  ALGOL 60 implementations timeline  edit  To date there have been at least 70 augmentations, extensions, derivations and sublanguages of Algol 60. 6  Name Year Author State Description Target CPU X1 ALGOL 60 August 1960 7  Edsger W. Dijkstra and Jaap A. Zonneveld Netherlands First implementation of ALGOL 60 8  Electrologica X1 Algol 1960 9  Edgar T. Irons USA Algol 60 CDC 1604 Burroughs Algol Several variants 1961 Burroughs Corporation with participation by Hoare, Dijkstra , and others USA Basis of the Burroughs and now Unisys MCP based computers Burroughs large systems and their midrange as well. Case ALGOL 1961 USA Simula was originally contracted as a simulation extension of the Case ALGOL UNIVAC 1107 GOGOL 1961 William M. McKeeman USA For ODIN time-sharing system PDP-1 DASK ALGOL 1961 Peter Naur , Jrn Jensen Denmark Algol 60 DASK at Regnecentralen SMIL ALGOL 1962 Torgil Ekman , Carl-Erik Frberg Sweden Algol 60 SMIL at Lund University GIER ALGOL 1962 Peter Naur , Jrn Jensen Denmark Algol 60 GIER at Regnecentralen Dartmouth ALGOL 30 1962 Thomas Eugene Kurtz et al. USA LGP-30 USS 90 Algol 1962 L. Petrone Italy Elliott ALGOL 1962 C. A. R. Hoare UK Discussed in his 1980 Turing Award lecture Elliott 803  the Elliott 503 Algol Translator 1962 G. van der Mey and W.L. van der Poel Netherlands Staatsbedrijf der Posterijen, Telegrafie en Telefonie ZEBRA Kidsgrove Algol 1963 F. G. Duncan UK English Electric Company KDF9 VALGOL 1963 Val Schorre USA A test of the META II compiler compiler FP6000 Algol 1963 Roger Moore Canada written for Saskatchewan Power Corp FP6000 Whetstone 1964 Brian Randell and Lawford John Russell UK Atomic Power Division of English Electric Company. Precursor to Ferranti Pegasus , National Physical Laboratories ACE and English Electric DEUCE implementations. English Electric Company KDF9 NU ALGOL 1965 Norway UNIVAC ALGEK 1965 USSR Minsk-22 , based on ALGOL-60 and COBOL support, for economical tasks MALGOL 1966 publ. A. Viil, M Kotli  M. Rakhendi, Estonian SSR Minsk-22 ALGAMS 1967 GAMS group ,       , cooperation of Comecon Academies of Science Comecon Minsk-22 , later ES EVM , BESM ALGOLZAM 1967 Poland Polish ZAM computer Chinese Algol 1972 China Chinese characters, expressed via the Symbol system DGL 1972 USA DG Eclipse family of Computers NASE 1990 Erik Schoenfelder Germany Interpreter Linux and MS Windows MARST 2000 Andrew Makhorin Russia Algol-60 to C translator All CPUs supported by the GNU Compiler Collection MARST is part of the GNU project The Burroughs dialects included special system programming dialects such as ESPOL and NEWP . Properties  edit  ALGOL 60 as officially defined had no IO facilities implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of transput ALGOL 68 parlance for InputOutput facilities. ALGOL 60 allowed for  clarification needed  two evaluation strategies for parameter passing the common call-by-value , and call-by-name . Call-by-name has certain effects in contrast to call-by-reference . For example, without specifying the parameters as value or reference , it is impossible to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable. 10  Think of passing a pointer to swapi, Ai in to a function. Now that every time swap is referenced, its reevaluated. Say i   1 and Ai   2, so every time swap is referenced itll return the other combination of the values 1,2, 2,1, 1,2 and so on. A similar situation occurs with a random function passed as actual argument. Call-by-name is known by many compiler designers for the interesting  thunks  that are used to implement it. Donald Knuth devised the  man or boy test  to separate compilers that correctly implemented  recursion and non-local references. This test contains an example of call-by-name. ALGOL 60 Reserved words and restricted identifiers  edit  There are 35 such reserved words in the standard Burroughs large systems sub-language ALPHA ARRAY BEGIN BOOLEAN COMMENT CONTINUE DIRECT DO DOUBLE ELSE END EVENT FALSE FILE FOR FORMAT GO IF INTEGER LABEL LIST LONG OWN POINTER PROCEDURE REAL STEP SWITCH TASK THEN TRUE UNTIL VALUE WHILE ZIP There are 71 such restricted identifiers in the standard Burroughs large systems sub-language ACCEPT AND ATTACH BY CALL CASE CAUSE CLOSE DEALLOCATE DEFINE DETACH DISABLE DISPLAY DIV DUMP ENABLE EQL EQV EXCHANGE EXTERNAL FILL FORWARD GEQ GTR IMP IN INTERRUPT IS LB LEQ LIBERATE LINE LOCK LSS MERGE MOD MONITOR MUX NEQ NO NOT ON OPEN OR OUT PICTURE PROCESS PROCURE PROGRAMDUMP RB READ RELEASE REPLACE RESET RESIZE REWIND RUN SCAN SEEK SET SKIP SORT SPACE SWAP THRU TIMES TO WAIT WHEN WITH WRITE and also the names of all the intrinsic functions. Standard Operators  edit  Priority Operator first arithmetic first  power second ,  real,  integer third , - second , , , , ,  third  not fourth  and fifth  or sixth  implication seventh  equivalence Examples and portability issues  edit  Code sample comparisons  edit  ALGOL 60  edit  procedure Absmaxa Sizen, m Resulty Subscriptsi, k value n, m array a integer n, m, i, k real y comment The absolute greatest element of the matrix a, of size n by m, is transferred to y, and the subscripts of this element to i and k begin integer p, q y   0 i   k   1 for p   1 step 1 until n do for q   1 step 1 until m do if absap, q  y then begin y   absap, q i   p k   q end end Absmax Implementations differ in how the text in bold must be written. The word INTEGER, including the quotation marks, must be used in some implementations in place of integer , above, thereby designating it as a special keyword. Following is an example of how to produce a table using Elliott 803 ALGOL 11  FLOATING POINT ALGOL TEST BEGIN REAL A,B,C,D READ D FOR A 0.0 STEP D UNTIL 6.3 DO BEGIN PRINT PUNCH3 ,L B   SINA C   COSA PRINT PUNCH3 , SAMELINE , ALIGNED1,6 ,A,B,C END END ALGOL 60 family  edit  Since ALGOL 60 had no IO facilities, there is no portable hello world program in ALGOL. The following program could and still will compile and run on an ALGOL implementation for a Unisys A-Series mainframe, and is a straightforward simplification of code taken from The Language Guide at the University of Michigan -Dearborn Computer and Information Science Department Hello world ALGOL Example Program page . BEGIN FILE FKINDREMOTE EBCDIC ARRAY E011 REPLACE E BY HELLO WORLD WRITEF, , E END. A simpler program using an inline format BEGIN FILE FKINDREMOTE WRITEF, HELLO WORLD  END. An even simpler program using the Display statement BEGIN DISPLAYHELLO WORLD END. An alternative example, using Elliott Algol IO is as follows. Elliott Algol used different characters for open-string-quote and close-string-quote, represented here by  and  . program HiFolks begin print  Hello world  end  Heres a version for the Elliott 803 Algol A104 The standard Elliott 803 used 5 hole paper tape and thus only had upper case. The code lacked any quote characters so  UK Pound Sign was used for open quote and  Question Mark for close quote. Special sequences were placed in double quotes e.g. L produced a new line on the teleprinter. HIFOLKS BEGIN PRINT HELLO WORLDL END The ICT 1900 series Algol IO version allowed input from paper tape or punched card. Paper tape full mode allowed lower case. Output was to a line printer. Note use of , and  . 12  PROGRAM HELLO BEGIN COMMENT OPEN QUOTE IS , CLOSE IS , PRINTABLE SPACE HAS TO BE WRITTEN AS   BECAUSE SPACES ARE IGNORED WRITE TEXTHELLOWORLD END FINISH See also  edit  ABC ALGOL ALGOL ALGOL 58 ALGOL N ALGOL 68 ALGOL W ALGOL X Atlas Autocode Coral 66 Edinburgh IMP Jensens Device ISWIM JOVIAL NELIAC Simula S-algol Scheme programming language References  edit   Knuth, Donald E. December 1964. Backus normal Form vs Backus Naur Form. Comm. ACM . 7 12 7356. doi  10.1145355588.365140 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  ACM Award Citation  Peter Naur , 2005  van Emden, Maarten 2014. How recursion got into programming a tale of intrigue, betrayal, and advanced programming-language semantics . A Programmers Place .  Hoare, C.A.R. December 1973. Hints on Programming Language Design PDF . p.  27. This statement is sometimes erroneously attributed to Edsger W. Dijkstra , also involved in implementing the first ALGOL 60 compiler .  Abelson, Hal Dybvig, R. K. et al. Rees, Jonathan Clinger, William eds.. Revised3 Report on the Algorithmic Language Scheme, Dedicated to the Memory of ALGOL 60 . Retrieved 2009-10-20 .  The Encyclopedia of Computer Languages Archived September 27, 2011, at the Wayback Machine  Daylight, E. G. 2011. Dijkstras Rallying Cry for Generalization the Advent of the Recursive Procedure, late 1950s  early 1960s . The Computer Journal . 54 11 17561772. doi  10.1093comjnlbxr002 .  Kruseman Aretz, F.E.J. 30 June 2003. The Dijkstra-Zonneveld ALGOL 60 compiler for the Electrologica X1 PDF . Software Engineering . History of Computer Science. Kruislaan 413, 1098 SJ Amsterdam Centrum Wiskunde  Informatica.  Irons, Edgar T. , A syntax directed compiler for ALGOL 60, Communications of the ACM, Vol. 4, p. 51. Jan. 1961  Aho, Alfred V.  Ravi Sethi  Jeffrey D. Ullman 1986. Compilers Principles, Techniques, and Tools 1st ed.. Addison-Wesley. ISBN   978-0-201-10194-2 . , Section 7.5, and references therein  803 ALGOL , the manual for Elliott 803 ALGOL  ICL 1900 series Algol Language . ICL Technical Publication 3340. 1965. Further reading  edit  Dijkstra, Edsger W. 1961. ALGOL 60 Translation An ALGOL 60 Translator for the X1 and Making a Translator for ALGOL 60 PDF Technical report. Amsterdam Mathematisch Centrum. 35. Randell, Brian  Russell, Lawford John 1964. ALGOL 60 Implementation The Translation and Use of ALGOL 60 Programs on a Computer . Academic Press. OCLC   526731 . The design of the Whetstone Compiler . One of the early published descriptions of implementing a compiler. See the related papers Whetstone Algol Revisited , and The Whetstone KDF9 Algol Translator by Brian Randell External links  edit  Revised Report on the Algorithmic Language Algol 60 by Peter Naur, et al. ALGOL definition A BNF syntax summary of ALGOL 60 The Emperors Old Clothes   Hoares 1980 ACM Turing Award speech, which discusses ALGOL history and his involvement MARST , a free Algol-to-C translator AN IMPLEMENTATION OF ALGOL 60 FOR THE FP6000 Discussion of some implementation issues. Naur, Peter August 1978. The European Side of the Last Phase of the Development of ALGOL 60 . ACM SIGPLAN Notices . 13 8 1544. doi  10.1145960118.808370 . Edinburgh University wrote compilers for Algol60 later updated for Algol60M based on their Atlas Autocode compilers initially bootstrapped from the Atlas to the KDF-9. The Edinburgh compilers generated code for the ICL1900, the ICL475 an IBM360 clone, and the ICL2900. Here is the BNF for Algol60 and the ICL2900 compiler source , library documentation , and a considerable test suite including Brian Wichmanns tests. Also there is a rather superficial Algol60 to Atlas Autocode source-level translator . Eric S. Raymond s Retrocomputing Museum , among others a link to the NASE Algol-60 interpreter written in C. The NASE interpreter Stories of the B5000 and People Who Were There a dedicated ALGOL computer 1 , 2 Hermann Bottenbruch. Structure and Use of ALGOL 60. doi  10.21724020495 . NUMAL A Library of Numerical Procedures in ALGOL 60 developed at The Stichting Centrum Wiskunde  Informatica legal successor of Stichting Mathematisch Centrum legal owner . Algol 60 resources translators, documentation, programs v t e ISO standards .mw-parser-output .noboldfont-weightnormal by standard number List of ISO standards   ISO romanizations   IEC standards 19999 1 2 3 4 5 6 7 9 16 17 31 -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 128 216 217 226 228 233 259 269 302 306 361 428 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 88058806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 90009001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9506 9529 9564 95929593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 1000019999 10005 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10303 -11 -21 -22 -28 -238 10383 10487 10585 10589 10646 10664 10746 10861 10957 10962 10967 11073 11170 11179 11404 11544 11783 11784 11785 11801 11898 11940  -2  11941 11941 TR 11992 12006 12182 12207 12234-2 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14644 14649 14651 14698 14750 14764 14882 14971 15022 15189 15288 15291 15292 15398 15408 15444 -3 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 16023 16262 16355-1 16612-2 16750 16949 TS 17024 17025 17100 17203 17369 17442 17799 18000 18004 18014 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000 20000 20022 20121 20400 21000 21047 21500 218272002 22000 23270 23271 23360 24517 24613 24617 24707 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27006 27729 28000 29110 29148 29199-2 29500 30170 31000 32000 37001 38500 40500 42010 45001 50001 55000 80000 -1 -2 -3 Category Authority control GND  4141870-0 Retrieved from  httpsen.wikipedia.orgwindex.phptitleALGOL_60 oldid906446276  Categories  ALGOL 60 Algol programming language family Academic programming languages Procedural programming languages Structured programming languages Systems programming languages Programming languages created in 1960 Programming languages with an ISO standard Hidden categories Webarchive template wayback links Articles with short description Wikipedia articles needing clarification from November 2018 Wikipedia articles with GND identifiers Articles with example ALGOL 60 code