Formal grammar From Wikipedia, the free encyclopedia Jump to navigation Jump to search In formal language theory , a grammar when the context is not given, often called a formal grammar for clarity is a set of production rules for strings in a formal language . The rules describe how to form strings from the languages alphabet that are valid according to the languages syntax . A grammar does not describe the meaning of the strings or what can be done with them in whatever contextonly their form. Formal language theory , the discipline that studies formal grammars and languages, is a branch of applied mathematics . Its applications are found in theoretical computer science , theoretical linguistics , formal semantics , mathematical logic , and other areas. A formal grammar is a set of rules for rewriting strings, along with a start symbol from which rewriting starts. Therefore, a grammar is usually thought of as a language generator. However, it can also sometimes be used as the basis for a  recognizer  a function in computing that determines whether a given string belongs to the language or is grammatically incorrect. To describe such recognizers, formal language theory uses separate formalisms, known as automata theory . One of the interesting results of automata theory is that it is not possible to design a recognizer for certain formal languages. 1  Parsing is the process of recognizing an utterance a string in natural languages by breaking it down to a set of symbols and analyzing each one against the grammar of the language. Most languages have the meanings of their utterances structured according to their syntax a practice known as compositional semantics . As a result, the first step to describing the meaning of an utterance in language is to break it down part by part and look at its analyzed form known as its parse tree in computer science, and as its deep structure in generative grammar . Contents 1 History 2 Introductory example 3 Formal definition 3.1 The syntax of grammars 3.2 Some mathematical constructs regarding Formal Grammars 3.3 Example 4 The Chomsky hierarchy 4.1 Context-free grammars 4.2 Regular grammars 4.3 Other forms of generative grammars 4.4 Recursive grammars 5 Analytic grammars 6 See also 7 References 8 External links History  edit  This section needs expansion . You can help by adding to it .  February 2018  Pini s treatise Astadyayi gives formal production rules and definitions to describe the formal grammar of Sanskrit . 2  There are different uses of form and formalism, which have changed over time, depending on the fields the relevant author was in contact with. A historical overview of the concept is given in 3  Introductory example  edit  A grammar mainly consists of a set of rules for transforming strings. If it only consisted of these rules, it would be a semi-Thue system . To generate a string in the language, one begins with a string consisting of only a single start symbol . The production rules are then applied in any order, until a string that contains neither the start symbol nor designated nonterminal symbols is produced. A production rule is applied to a string by replacing one occurrence of the production rules left-hand side in the string by that production rules right-hand side  cf. the operation of the theoretical Turing machine . The language formed by the grammar consists of all distinct strings that can be generated in this manner. Any particular sequence of production rules on the start symbol yields a distinct string in the language. If there are essentially different ways of generating the same single string, the grammar is said to be ambiguous . For example, assume the alphabet consists of a and b , the start symbol is S , and we have the following production rules 1. S  a S b displaystyle Srightarrow aSb 2. S  b a displaystyle Srightarrow ba then we start with S , and can choose a rule to apply to it. If we choose rule 1, we obtain the string aSb . If we then choose rule 1 again, we replace S with aSb and obtain the string aaSbb . If we now choose rule 2, we replace S with ba and obtain the string aababb , and are done. We can write this series of choices more briefly, using symbols S  a S b  a a S b b  a a b a b b displaystyle SRightarrow aSbRightarrow aaSbbRightarrow aababb . The language of the grammar is then the infinite set  a n b a b n  n  0    b a , a b a b , a a b a b b , a a a b a b b b ,   displaystyle anbabnmid ngeq 0ba,abab,aababb,aaababbb,dotsc  , where a k displaystyle ak is a displaystyle a repeated k displaystyle k times and n displaystyle n in particular represents the number of times production rule 1 has been applied. Formal definition  edit  Main article Unrestricted grammar The syntax of grammars  edit  In the classic formalization of generative grammars first proposed by Noam Chomsky in the 1950s, 4  5  a grammar G consists of the following components A finite set N of nonterminal symbols , that is disjoint with the strings formed from G . A finite set  displaystyle Sigma  of terminal symbols that is disjoint from N . A finite set P of production rules , each rule of the form    N   N    N       N   displaystyle Sigma cup NNSigma cup Nrightarrow Sigma cup N where  displaystyle  is the Kleene star operator and  displaystyle cup  denotes set union . That is, each production rule maps from one string of symbols to another, where the first string the head contains an arbitrary number of symbols provided at least one of them is a nonterminal. In the case that the second string the body consists solely of the empty string i.e., that it contains no symbols at all it may be denoted with a special notation often  displaystyle Lambda  , e or  displaystyle epsilon   in order to avoid confusion. A distinguished symbol S  N displaystyle Sin N that is the start symbol , also called the sentence symbol . A grammar is formally defined as the tuple  N ,  , P , S  displaystyle N,Sigma ,P,S . Such a formal grammar is often called a rewriting system or a phrase structure grammar in the literature. 6  7  Some mathematical constructs regarding Formal Grammars  edit  The operation of a grammar can be defined in terms of relations on strings Given a grammar G   N ,  , P , S  displaystyle GN,Sigma ,P,S , the binary relation  G displaystyle underset GRightarrow  pronounced as G derives in one step on strings in    N   displaystyle Sigma cup N is defined by x  G y   u , v , p , q     N     x  u p v    p  q  P    y  u q v  displaystyle xunderset GRightarrow yiff exists u,v,p,qin Sigma cup Nxupvwedge prightarrow qin Pwedge yuqv the relation  G  displaystyle overset underset GRightarrow  pronounced as G derives in zero or more steps  is defined as the reflexive transitive closure of  G displaystyle underset GRightarrow  a sentential form is a member of    N   displaystyle Sigma cup N that can be derived in a finite number of steps from the start symbol S displaystyle S  that is, a sentential form is a member of  w     N    S  G  w  displaystyle leftwin Sigma cup Nmid Soverset underset GRightarrow wright . A sentential form that contains no nonterminal symbols i.e. is a member of   displaystyle Sigma   is called a sentence . 8  the language of G displaystyle G , denoted as L  G  displaystyle boldsymbol LG , is defined as all those sentences that can be derived in a finite number of steps from the start symbol S displaystyle S  that is, the set  w     S  G  w  displaystyle leftwin Sigma mid Soverset underset GRightarrow wright . Note that the grammar G   N ,  , P , S  displaystyle GN,Sigma ,P,S is effectively the semi-Thue system  N   , P  displaystyle Ncup Sigma ,P , rewriting strings in exactly the same way the only difference is in that we distinguish specific nonterminal symbols, which must be rewritten in rewrite rules, and are only interested in rewritings from the designated start symbol S displaystyle S to strings without nonterminal symbols. Example  edit  For these examples, formal languages are specified using set-builder notation . Consider the grammar G displaystyle G where N   S , B  displaystyle NleftS,Bright ,    a , b , c  displaystyle Sigma lefta,b,cright , S displaystyle S is the start symbol, and P displaystyle P consists of the following production rules 1. S  a B S c displaystyle Srightarrow aBSc 2. S  a b c displaystyle Srightarrow abc 3. B a  a B displaystyle Barightarrow aB 4. B b  b b displaystyle Bbrightarrow bb This grammar defines the language L  G    a n b n c n  n  1  displaystyle LGleftanbncnmid ngeq 1right where a n displaystyle an denotes a string of n consecutive a displaystyle a s. Thus, the language is the set of strings that consist of 1 or more a displaystyle a s, followed by the same number of b displaystyle b s, followed by the same number of c displaystyle c s. Some examples of the derivation of strings in L  G  displaystyle LG are S  2 a b c displaystyle boldsymbol Sunderset 2Rightarrow boldsymbol abc S  1 a B S c  2 a B a b c c  3 a a B b c c  4 a a b b c c displaystyle beginalignedboldsymbol S underset 1Rightarrow boldsymbol aBSc underset 2Rightarrow aBboldsymbol abcc underset 3Rightarrow aboldsymbol aBbcc underset 4Rightarrow aaboldsymbol bbccendaligned S  1 a B S c  1 a B a B S c c  2 a B a B a b c c c  3 a a B B a b c c c  3 a a B a B b c c c  3 a a a B B b c c c  4 a a a B b b c c c  4 a a a b b b c c c displaystyle beginalignedboldsymbol S underset 1Rightarrow boldsymbol aBScunderset 1Rightarrow aBboldsymbol aBScc underset 2Rightarrow aBaBboldsymbol abccc underset 3Rightarrow aboldsymbol aBBabcccunderset 3Rightarrow aaBboldsymbol aBbcccunderset 3Rightarrow aaboldsymbol aBBbccc underset 4Rightarrow aaaBboldsymbol bbcccunderset 4Rightarrow aaaboldsymbol bbbcccendaligned Note on notation P  i Q displaystyle Punderset iRightarrow Q reads String P generates string Q by means of production i , and the generated part is each time indicated in bold type. The Chomsky hierarchy  edit  Main article Chomsky hierarchy When Noam Chomsky first formalized generative grammars in 1956, 4  he classified them into types now known as the Chomsky hierarchy . The difference between these types is that they have increasingly strict production rules and can therefore express fewer formal languages. Two important types are context-free grammars Type 2 and regular grammars Type 3. The languages that can be described with such a grammar are called context-free languages and regular languages , respectively. Although much less powerful than unrestricted grammars Type 0, which can in fact express any language that can be accepted by a Turing machine , these two restricted types of grammars are most often used because parsers for them can be efficiently implemented. 9  For example, all regular languages can be recognized by a finite state machine , and for useful subsets of context-free grammars there are well-known algorithms to generate efficient LL parsers and LR parsers to recognize the corresponding languages those grammars generate. Context-free grammars  edit  A context-free grammar is a grammar in which the left-hand side of each production rule consists of only a single nonterminal symbol. This restriction is non-trivial not all languages can be generated by context-free grammars. Those that can are called context-free languages . The language L  G    a n b n c n  n  1  displaystyle LGleftanbncnmid ngeq 1right defined above is not a context-free language, and this can be strictly proven using the pumping lemma for context-free languages , but for example the language  a n b n  n  1  displaystyle leftanbnmid ngeq 1right at least 1 a displaystyle a followed by the same number of b displaystyle b s is context-free, as it can be defined by the grammar G 2 displaystyle G_2 with N   S  displaystyle NleftSright ,    a , b  displaystyle Sigma lefta,bright , S displaystyle S the start symbol, and the following production rules 1. S  a S b displaystyle Srightarrow aSb 2. S  a b displaystyle Srightarrow ab A context-free language can be recognized in O  n 3  displaystyle On3 time  see Big O notation  by an algorithm such as Earleys algorithm . That is, for every context-free language, a machine can be built that takes a string as input and determines in O  n 3  displaystyle On3 time whether the string is a member of the language, where n displaystyle n is the length of the string. 10  Deterministic context-free languages is a subset of context-free languages that can be recognized in linear time. 11  There exist various algorithms that target either this set of languages or some subset of it. Regular grammars  edit  In regular grammars , the left hand side is again only a single nonterminal symbol, but now the right-hand side is also restricted. The right side may be the empty string, or a single terminal symbol, or a single terminal symbol followed by a nonterminal symbol, but nothing else. Sometimes a broader definition is used one can allow longer strings of terminals or single nonterminals without anything else, making languages easier to denote while still defining the same class of languages. The language  a n b n  n  1  displaystyle leftanbnmid ngeq 1right defined above is not regular, but the language  a n b m  m , n  1  displaystyle leftanbmmid m,ngeq 1right at least 1 a displaystyle a followed by at least 1 b displaystyle b , where the numbers may be different is, as it can be defined by the grammar G 3 displaystyle G_3 with N   S , A , B  displaystyle NleftS,A,Bright ,    a , b  displaystyle Sigma lefta,bright , S displaystyle S the start symbol, and the following production rules S  a A displaystyle Srightarrow aA A  a A displaystyle Arightarrow aA A  b B displaystyle Arightarrow bB B  b B displaystyle Brightarrow bB B   displaystyle Brightarrow epsilon  All languages generated by a regular grammar can be recognized in O  n  displaystyle On time by a finite state machine . Although, in practice, regular grammars are commonly expressed using regular expressions , some forms of regular expression used in practice do not strictly generate the regular languages and do not show linear recognitional performance due to those deviations. Other forms of generative grammars  edit  Many extensions and variations on Chomskys original hierarchy of formal grammars have been developed, both by linguists and by computer scientists, usually either in order to increase their expressive power or in order to make them easier to analyze or parse. Some forms of grammars developed include Tree-adjoining grammars increase the expressiveness of conventional generative grammars by allowing rewrite rules to operate on parse trees instead of just strings. 12  Affix grammars 13  and attribute grammars 14  15  allow rewrite rules to be augmented with semantic attributes and operations, useful both for increasing grammar expressiveness and for constructing practical language translation tools. Recursive grammars  edit  Not to be confused with Recursive language . A recursive grammar is a grammar that contains production rules that are recursive . For example, a grammar for a context-free language is left-recursive if there exists a non-terminal symbol A that can be put through the production rules to produce a string with A as the leftmost symbol. 16  All types of grammars in the Okoye hierarchy can be recursive. Analytic grammars  edit  Though there is a tremendous body of literature on parsing algorithms , most of these algorithms assume that the language to be parsed is initially described by means of a generative formal grammar, and that the goal is to transform this generative grammar into a working parser. Strictly speaking, a generative grammar does not in any way correspond to the algorithm used to parse a language, and various algorithms have different restrictions on the form of production rules that are considered well-formed. An alternative approach is to formalize the language in terms of an analytic grammar in the first place, which more directly corresponds to the structure and semantics of a parser for the language. Examples of analytic grammar formalisms include the following The Language Machine directly implements unrestricted analytic grammars. Substitution rules are used to transform an input to produce outputs and behaviour. The system can also produce the lm-diagram , which shows what happens when the rules of an unrestricted analytic grammar are being applied. Top-down parsing language TDPL a highly minimalist analytic grammar formalism developed in the early 1970s to study the behavior of top-down parsers . 17  Link grammars  a form of analytic grammar designed for linguistics , which derives syntactic structure by examining the positional relationships between pairs of words. 18  19  Parsing expression grammars PEGs a more recent generalization of TDPL designed around the practical expressiveness needs of programming language and compiler writers. 20  See also  edit  Abstract syntax tree Adaptive grammar Ambiguous grammar BackusNaur form BNF Categorial grammar Concrete syntax tree Extended BackusNaur form EBNF Grammar framework L-system Lojban Post canonical system Shape grammar Well-formed formula References  edit   Meduna, Alexander 2014, Formal Languages and Computation Models and Their Applications , CRC Press, p.  233, ISBN   9781466513457 .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em . For more on this subject, see undecidable problem .  Panini biography . www-history.mcs.st-andrews.ac.uk . Archived from the original on 2018-08-15.  McElvenny J, ed. 2019. Form and formalism in linguistics pdf . Berlin Language Science Press. doi  10.5281zenodo.2654375 . ISBN   978-3-96110-182-5 .  a b Chomsky, Noam Sep 1956. Three models for the description of language. IRE Transactions on Information Theory . 2 3 113124. doi  10.1109TIT.1956.1056813 .  Chomsky, Noam 1957. Syntactic Structures . The Hague Mouton .  Ginsburg, Seymour 1975. Algebraic and automata theoretic properties of formal languages . North-Holland. pp.  89. ISBN   978-0-7204-2506-2 .  Harrison, Michael A. 1978. Introduction to Formal Language Theory . Reading, Mass. Addison-Wesley Publishing Company. p.  13. ISBN   978-0-201-02955-0 .  Sentential Forms , Context-Free Grammars, David Matuszek  Grune, Dick  Jacobs, Ceriel H., Parsing Techniques  A Practical Guide , Ellis Horwood, England, 1990.  Earley, Jay,  An Efficient Context-Free Parsing Algorithm , Communications of the ACM , Vol. 13 No. 2, pp. 94-102, February 1970.  Knuth, D. E. July 1965. On the translation of languages from left to right PDF . Information and Control . 8 6 607639. doi  10.1016S0019-99586590426-2 . Retrieved 29 May 2011 .  Joshi, Aravind K., et al. ,  Tree Adjunct Grammars , Journal of Computer Systems Science , Vol. 10 No. 1, pp. 136-163, 1975.  Koster , Cornelis H. A., Affix Grammars, in ALGOL 68 Implementation , North Holland Publishing Company, Amsterdam, p. 95-109, 1971.  Knuth, Donald E.,  Semantics of Context-Free Languages , Mathematical Systems Theory , Vol. 2 No. 2, pp. 127-145, 1968.  Knuth, Donald E., Semantics of Context-Free Languages correction, Mathematical Systems Theory , Vol. 5 No. 1, pp 95-96, 1971.  Notes on Formal Language Theory and Parsing , James Power, Department of Computer Science National University of Ireland, Maynooth Maynooth, Co. Kildare, Ireland. JPR02  Birman, Alexander, The TMG Recognition Schema , Doctoral thesis, Princeton University, Dept. of Electrical Engineering, February 1970.  Sleator, Daniel D.  Temperly, Davy,  Parsing English with a Link Grammar , Technical Report CMU-CS-91-196, Carnegie Mellon University Computer Science, 1991.  Sleator, Daniel D.  Temperly, Davy, Parsing English with a Link Grammar, Third International Workshop on Parsing Technologies , 1993. Revised version of above report.  Ford, Bryan, Packrat Parsing a Practical Linear-Time Algorithm with Backtracking , Masters thesis, Massachusetts Institute of Technology, Sept. 2002. External links  edit  Yearly Formal Grammar conference v t e Automata theory  formal languages and formal grammars Chomsky hierarchy Grammars Languages Abstract machines Type-0  Type-1      Type-2   Type-3   Unrestricted no common name Context-sensitive Positive range concatenation Indexed  Linear context-free rewriting systems Tree-adjoining Context-free Deterministic context-free Visibly pushdown Regular  Non-recursive Recursively enumerable Decidable Context-sensitive Positive range concatenation  Indexed   Linear context-free rewriting language Tree-adjoining Context-free Deterministic context-free Visibly pushdown Regular Star-free Finite Turing machine Decider Linear-bounded PTIME Turing Machine Nested stack Thread automaton restricted Tree stack automaton Embedded pushdown Nondeterministic pushdown Deterministic pushdown Visibly pushdown Finite Counter-free with aperiodic finite monoid Acyclic finite Each category of languages, except those marked by a  , is a proper subset of the category directly above it. Any language in each category is generated by a grammar and by an automaton in the category in the same line. Retrieved from  httpsen.wikipedia.orgwindex.phptitleFormal_grammar oldid912505454  Categories  Formal languages Grammar Linguistics Mathematical logic Syntax Automata computation Hidden categories Articles to be expanded from February 2018 All articles to be expanded Articles using small message boxes