Requirements traceability From Wikipedia, the free encyclopedia Jump to navigation Jump to search Requirements traceability is a sub-discipline of requirements management within software development and systems engineering . Traceability as a general term is defined by the IEEE Systems and Software Engineering Vocabulary 1  as 1 the degree to which a relationship can be established between two or more products of the development process, especially products having a predecessor-successor or master-subordinate relationship to one another 2  2 the identification and documentation of derivation paths upward and allocation or flowdown paths downward of work products in the work product hierarchy 3  3 the degree to which each element in a software development product establishes its reason for existing and 4 discernible association among two or more logical entities, such as requirements, system elements, verifications, or tasks. Requirements traceability in particular, is defined as the ability to describe and follow the life of a requirement in both a forwards and backwards direction i.e., from its origins, through its development and specification, to its subsequent deployment and use, and through periods of ongoing refinement and iteration in any of these phases. 4  5  In the requirements engineering field, traceability is about understanding how high-level requirements  objectives, goals, aims, aspirations, expectations, needs  are transformed into low-level requirements. It is therefore primarily concerned with satisfaction relationships between layers of information aka artifacts. 6  However, traceability may document relationships between many kinds of development artifacts, such as requirements, specification statements, designs, tests, models and developed components. 7  For example, it is common practice to capture verification relationships to demonstrate that a requirement is verified by a certain test artifact. Traceability is especially relevant when developing safety-critical systems and therefore prescribed by safety guidelines , such as DO178C , ISO 26262 , and IEC61508 . A common requirement of these guidelines is that critical requirements must be verified and that this verification must be demonstrated through traceability. 8  Contents 1 Tracing towards and beyond the requirements 2 Usage of traceability information 3 Practical use of traceability information 4 Visualization of traceability information 5 Technical realization 5.1 Manual traceability 5.2 Tool-supported traceability 6 See also 7 References 8 External links Tracing towards and beyond the requirements  edit  Pre-Requirements Traceability . 4  Requirements come from different sources, like the business person ordering the product, the marketing manager and the actual user. These people all have different requirements of the product. Using requirements traceability, an implemented feature can be traced back to the person or group that wanted it during the requirements elicitation . This can be used during the development process to prioritize the requirement, determining how valuable the requirement is to a specific user. It can also be used after the deployment to see why certain unused features found during user studies were required in the first place. Post-Requirements Traceability . 4  Not only the requirements themselves should be traced but also the requirements relationship with all the artifacts associated with it, such as models, analysis results, test cases, test procedures, test results and documentation of all kinds. Even people and user groups associated with requirements should be traceable. Requirements are realized into design artifacts, implemen tation, and finally, verified. Artifacts tied to the latter stages should be traced back to the requirements as well. This is typically done via a requirements traceability matrix . Establishing traceability beyond requirements into design, implementation, and verification artifacts can become difficult. 9  When implementing software requirements for instance, the requirements may be in a requirements management tool, while the design artifacts may be in a tool such as MagicDraw , Mathworks Simulink , Rational Rhapsody , and Microsoft Visio . Furthermore, implementation artifacts will likely be in the form of source files, links to which can be established in various ways at various scopes. Verification artifacts such as those generated by internal tests or formal verification tools e.g., LDRA Testbed suite , Parasoft DTP , and SCADE  Repository or tool stack integration can present a significant challenge to maintaining traceability in a dynamic system. Usage of traceability information  edit  The usage of traceability, especially when tracing beyond requirements to all artifacts located in the tool chain, can bring several benefits 10  11  Change Impact analysis  if a requirement is changing, trace links inform about related and dependent artifacts. These artifacts can easily be verified and if required be adjusted. The probability to overlook related artifacts is reduced. Coverage analysis  Traceability ensures that no requirements are overlooked. Especially when certifying safety-critical products it is necessary to demonstrate that all requirements are realized. Project status analysis  Tracking of the project status is possible analyzing the traceability data allows seeing the completion status of the requirements. Requirements without links or with incomplete trace chain e.g. requirements with implementation but without tests indicate that further work is necessary. The missing links show which concrete artifacts are missing and need to be realized. Reuse of product components  it is possible to structure requirements and their linked artifacts in packages. These packages can be used for different products. Persisting relationships  Often knowledge of a project or product is in the head of specific persons. By use of traceability this knowledge is saved by visualizing the relation between the different artifacts. This knowledge remains even if a person leaves the project. Test optimization  By linking requirements , source code , test cases and test results it is easy to identify affected parts of the source code if tests fail. Furthermore, redundant test cases can be identified and eliminated. A more complete overview of development activities supported by traceability and their relevance is given in. 12  Practical use of traceability information  edit  Extensive studies document the effectiveness, but also the difficulties of capturing traceability information Traceability accelerates and improves development activities - A study with 71 subjects who performed source code changes with and without traceability support showed benefits of traceability. Developers completed tasks with traceability support 24 faster and 50 more correct. 13  More complete traceability helps avoid software defects - In an analysis of development data from 24 medium-sized and large open-source projects, a statistically significant relationship between the completeness of the captured traceability information and the defect rate of the developed source code was found. Components with more complete traceability showed a lower number of defects aka bugs. 14  Achieving compliant traceability is difficult - An analysis of the pre-market testing of software in medical devices at the US Food and Drug Administration FDA in 2013 identified significant gaps between prescribed and filed traceability information. 8  The quest towards a standard-conformable traceability often results in a Big Freeze. Big freeze, since companies aim to avoid further development because re-certification is associated with enormous effort. 15  Visualization of traceability information  edit  One goal of traceability is to visualize the relationship between artifacts. As the number and complexity of trace links increases, techniques for traceability visualization are necessary. A visualization can include information about the artifacts e.g. artifact type, metadata, attributes and links e.g. link type, metadata, link strength. 16  Common visualizations for traceability information are matrices , graphs , lists , and hyperlinks . Traceability matrix  A traceability matrix is a table-like representation that maps artifacts of one type e.g., requirements depicted in columns to artifacts of another type e.g., source code depicted in rows. Cells visualize a trace between two artifacts if filled or a non-trace if left empty. 16  The advantage of traceability matrices is that all links between artifacts are visible at a glance. Filters help to reduce the amount of displayed information. Traceability matrices are suitable for management tasks. 16  However, in industry, projects often consist of thousands of artifacts the tables could become very large and confusing. 17  Traceability graph  In a traceability graph artifacts are represented as nodes. Nodes are connected by edges, if a trace link between the artifacts exists. Graphs are especially suitable for development tasks. They allow getting an overview on the links exploratively and are characterized by a high information comprehension ratio. 16  By navigating through the graph it is easy to identify missing links as a hint to create required artifacts. List  Lists represent traceability links in one entry. This entry could include information concerning the source and target artifact and attributes. They are especially suitable when bulk operations for several different artifacts should be executed. Filters and sorting mechanisms allow to handle the displayed information. However, compared to the visualizations described above l ists are less suitable to execute project management, development and testing tasks. 16  Hyperlink  Hyperlinks connect linked artifacts and allow jumping from a source artifact to a linked artifact. This visualization is suitable if detailed information about an artifact is needed as it allows navigation to artifacts in their native environment. 16  Using hyperlinks solely has the disadvantage that a lot of navigation effort is necessary to get an overview on the link status as linked artifacts are not visualized compactly. Visualizations can be combined to overcome their specific limitations. Technical realization  edit  Manual traceability  edit  Traceability is realized by capturing traces either entirely manual or tool supported, e.g. as spreadsheet in Microsoft Excel . Though widely applied, this process is cumbersome, error-prone, and often leads to traceability information that is of insufficient quality due to the various involved development tools and the typically very high number of artifacts to be traced. 18  Tool-supported traceability  edit  Tool-supported traceability requires that development information that is distributed across a whole chain of development tools to be homogenized and aggregated. The following approaches exist for reaching this state Homogenization of the tool environment via an ALM tool  ALM tool chains cover the whole life-cycle of a system and manage all artifacts of the development process in a holistic approach. Issue trackers implementing the Volere requirements template have been used successfully in distributed environments. The advantage of this approach is that the homogenization of artifacts allows managing and analyzing them easily with dedicated tools of the ALM tool. The disadvantage is that it is necessary to implement the whole ALM tool chain. If introduced, it is difficult to replace specific tools in the tool chain. Homogenization of data via surrogate requirements  Requirements management RM tools allow storing, organizing, and managing all requirements of a systems specifications and typically arrange them in a specification tree that links each requirement to its parent requirement in the higher specification. Commercial RM tools with traceability support are, e.g., 3SL Cradle, CASE Spec, IRise , Gatherspace , IBM Rational RequisitePro , IBM DOORS , Visure Requirements , CaliberRM , QFDCapture and Matrix Requirements Medical . Freely available tools are, e.g., FreeMind and Concordion . 19  Typical analysis functions based on recorded traceability information are, e.g., completeness checks i.e. do all system level requirements go down to equipment level with or without modification, assessment of requirements deviations over all levels, and qualification status presentation. In order to ensure traceability to artifact types beyond requirements, RM tools often a llow to import other artifacts as surrogate requirements that can then be traced with the tools requirements tracing methods. For example, elements of a Mathworks Simulink model can be imported into an IBM Rational DOORS surrogate module and then be related to requirements. The disadvantage of this approach is that different adapters or converters for the different artifact types are necessary that need to have a consistent version and data format. In contrast to ALM tools this consistency must be carried out oneself. Homogenization of data via a dedicated traceability tool - The basic concept of dedicated traceability tools consists of three essential steps The definition of a data model a.k.a. Traceability Information Model TIM. This model specifies which artifact types e.g. stakeholder requirements, software requirements, integration tests, system model elements and how they are linked. The definition of mappings from all relevant data of all tools which are part of your development toolchain and how these data are mapped to the TIM. Metrics and analysis functions are defined on the TIM - not on data residing in a specific tool. The approach unions the adavantages of the aformentioned approaches It covers all tools and artifacts in a holistic approach, homogenizes data and avoids the risk of incosistencies caused by outdated surrogates. Popular traceability tools are the open source tool Eclipse Capra and the commercial tools Reqtify german page and YAKINDU Traceability . The disadvantage is that this approach implies the extension of your toolchain by another traceability tool. See also  edit  Requirements Requirements analysis Requirements management References  edit   Systems and software engineering  Vocabulary . ISOIECIEEE 247652010E . 2010-12-01. pp.  1418. doi  10.1109IEEESTD.2010.5733835 . ISBN   978-0-7381-6205-8 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  IEEE Guide for Developing System Requirements Specifications . 1998 Edition IEEE STD 1233 . 1998-12-01. pp.  136. doi  10.1109IEEESTD.1998.88826 . ISBN   978-0-7381-1723-2 .  IEEE Guide for Information Technology - System Definition - Concept of Operations ConOps Document . IEEE STD 1362-1998 . 1998-12-01. pp.  124. doi  10.1109IEEESTD.1998.89424 . ISBN   978-0-7381-1407-1 .  a b c Gotel, O.C.Z. Finkelstein, C.W. April 1994. An analysis of the requirements traceability problem . Proceedings of IEEE International Conference on Requirements Engineering . pp.  94101. CiteSeerX   10.1.1.201.7137 . doi  10.1109icre.1994.292398 . ISBN   978-0-8186-5480-0 .  Gotel, Orlena Cleland-Huang, Jane Hayes, Jane Huffman Zisman, Andrea Egyed, Alexander Grnbacher, Paul Dekhtyar, Alex Antoniol, Giuliano Maletic, Jonathan 2012-01-01. Cleland-Huang, Jane Gotel, Orlena Zisman, Andrea eds.. Software and Systems Traceability . Springer London. pp.  322. doi  10.1007978-1-4471-2239-5_1 . ISBN   9781447122388 .  Hull, Elizabeth Ken Jackson Jeremy Dick 2005. Requirements Engineering Second Edition . Springer. pp.  913, 131151. ISBN   978-1-85233-879-4 .  Pinheiro F.A.C. and Goguen J.A., An object-oriented tool for tracing requirements, IEEE Software 1996, 132, pp. 52-64  a b Mder, P. Jones, P. L. Zhang, Y. Cleland-Huang, J. 2013-05-01. Strategic Traceability for Safety-Critical Projects. IEEE Software . 30 3 5866. doi  10.1109MS.2013.60 . ISSN   0740-7459 .  Li, Yin Juan Li Ye Yang Mingshu Li 2008. Requirement-Centric Traceability for Change Impact AnalysisA Case Study . Springer BerlinHeidelberg. pp.  100111. ISBN   978-3-540-79587-2 .  Wiegers, Karl 2013. Requirements Traceability Links in the Requirements Chain, Part 1 . jama . Retrieved 2016-12-14 .  Wiegers, K. Beatty, J. 2013. Software Requirements . Microsoft Press.  Bouillon, Elke Mder, Patrick Philippow, Ilka 2013-04-08. Doerr, Joerg Opdahl, Andreas L. eds.. Requirements Engineering Foundation for Software Quality . Lecture Notes in Computer Science. Springer Berlin Heidelberg. pp.  158173. CiteSeerX   10.1.1.659.3972 . doi  10.1007978-3-642-37422-7_12 . ISBN   9783642374210 .  Mder, Patrick Egyed, Alexander 2015-04-01. Do developers benefit from requirements traceability when evolving and maintaining a software system. Empirical Software Engineering . 20 2 413441. doi  10.1007s10664-014-9314-z . ISSN   1382-3256 .  Rempel, Patrick Mder, Patrick 2016-01-01. Preventing Defects The Impact of Requirements Traceability Completeness on Software Quality . IEEE Transactions on Software Engineering . PP 99 777797. doi  10.1109TSE.2016.2622264 . ISSN   0098-5589 .  open-DO  Toward a cooperative and open framework for the development of certifiable software . www.open-do.org . Retrieved 2017-04-15 .  a b c d e f Li, Y. Maalej, W. 2012. Which Traceability Visualization Is Suitable in This Context A Comparative Study . Springer. pp.  194210.  Lerche, Felix 2019. 5 REASONS WHY A REQUIREMENTS TRACEABILITY MATRIX IS NOT ENOUGH .  Kannenberg, Andrew Saiedian, Hossein 2009. Why Software Requirements Traceability Remains a Challenge PDF . CrossTalk Magazine - the Journal of Defense Software Engineering .  Laplante, Phillip A. 2009. Requirements Engineering for Software and Systems. CRC Press. Missing or empty url  help  External links  edit  Requirement Management Reduces Software Defects and Improves Code Quality Requirements Traceability Resources Requirements Traceability with MATLAB and Simulink Retrieved from  httpsen.wikipedia.orgwindex.phptitleRequirements_traceability oldid912781368  Categories  Software requirements Software project management Hidden categories Pages using web citations with no URL