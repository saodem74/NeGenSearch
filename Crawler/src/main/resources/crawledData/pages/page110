Software requirements From Wikipedia, the free encyclopedia Jump to navigation Jump to search Software requirements is a field within software engineering that deals with establishing the needs of stakeholders that are to be solved by software. The IEEE Standard Glossary of Software Engineering Terminology defines a requirement as 1  A condition or capability needed by a user to solve a problem or achieve an objective. A condition or capability that must be met or possessed by a system or system component to satisfy a contract, standard, specification, or other formally imposed document. A documented representation of a condition or capability as in 1 or 2. The activities related to working with software requirements can broadly be broken down into elicitation, analysis, specification, and management. 2  Contents 1 Elicitation 2 Analysis 3 Specification 4 Validation 5 Management 6 Tool support for Requirements Engineering 6.1 Tools for Requirements Elicitation, Analysis and, Validation 6.2 Tools for Requirements Specification 6.3 Tools for Requirements Document Verification 6.4 Tools for Requirements Comparison 6.5 Tools for Requirements Merge and Update 6.6 Tools for Requirements Traceability 6.7 Tools for Model-Based Software or Systems Requirement Engineering 6.8 Tools for general Requirements Engineering 7 See also 8 References 9 Further reading Elicitation  edit  Main article Requirements elicitation Elicitation is the gathering and discovery of requirements from stakeholders and other sources. A variety of techniques can be used such as joint application design JAD sessions, interviews, document analysis, focus groups, etc. Elicitation is the first step of requirements development. Analysis  edit  Main article Requirements analysis Analysis is the logical breakdown that proceeds from elicitation. Analysis involves reaching a richer and more precise understanding of each requirement and representing sets of requirements in multiple, complementary ways. Specification  edit  Main article Software requirements specification Specification involves representing and storing the collected requirements knowledge in a persistent and well-organized fashion that facilitates effective communication and change management. Use cases, user stories, functional requirements, and visual analysis models are popular choices for requirements specification. Validation  edit  Validation involves techniques to confirm that the correct set of requirements has been specified to build a solution that satisfies the projects business objectives. Management  edit  Main article Requirements management Requirements change during projects and there are often many of them. Management of this change becomes paramount to ensuring that the correct software is built for the stakeholders. Tool support for Requirements Engineering  edit  Tools for Requirements Elicitation, Analysis and, Validation  edit  Taking into account that these activities may involve some artifacts such as observation reports  user observation , questionnaires  interviews , surveys and polls, use cases , user stories  activities such as requirement workshops  charrettes , brainstorming , mind mapping , role-playing  and even, prototyping 3   software products providing some or all of these capabilities can be used to help achieve these tasks. There is at least one author who advocates, explicitly, for mind mapping tools such as FreeMind  and, alternatively, for the use of specification by example tools such as Concordion . 4  Additionally, the ideas and statements resulting from these activities may be gathered and organized with wikis and other collaboration tools such as Trello . The features actually implemented and standards compliance vary from product to product. Tools for Requirements Specification  edit  A Software Requirement Specification document SRS might be created using a software tool as general as a word processor or an electronic spreadsheet but, there are several specialized tools to carry out this activity. Some of these tools can import, edit, export and publish SRS documents. They may or not help the user to follow standards such as IEEE 2918-2011 to compose the requirements according to some structure. Likewise, the tool may or not use some standard to import or export requirements such as ReqIF  or, not allow these exchanges at all. Tools for Requirements Document Verification  edit  Tools of this kind verify if there are any errors in a requirements document according to some expected structure or standard. Tools for Requirements Comparison  edit  Tools of this kind compare two requirement sets according to some expected document structure and standard. Tools for Requirements Merge and Update  edit  Tools of this kind allow the merging and update of requirement documents. Tools for Requirements Traceability  edit  Tools of this kind allow to trace requirements to other artifacts such as models and source code forward traceability or, to previous ones such as business rules and constraints backwards traceability. Tools for Model-Based Software or Systems Requirement Engineering  edit  Model-based systems engineering MBSE is the formalised application of modelling to support system requirements, design, analysis, measurement, 5  verification and validation activities beginning in the conceptual design phase and continuing throughout development and later lifecycle phases. It is also possible to take a model-based approach for some stages of the requirements engineering and, a more traditional one, for others. All kinds of combinations might be possible. The level of formality and complexity depends on the underlying methodology involved for instance, i is much more formal than SysML and, even more formal than UML  Tools for general Requirements Engineering  edit  Tools in this category may provide some mix of the capabilities mentioned previously and others such as requirement configuration management and collaboration. The features actually implemented and standards compliance vary from product to product. There are even more capable or general tools that support other stages and activities. They are classified as ALM tools. See also  edit  Requirement Requirements engineering Software requirements specification SRS References  edit   IEEE Computer Society 1990. IEEE Standard Glossary of Software Engineering Terminology . IEEE Standard . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Guide to the Software Engineering Body of Knowledge . IEEE Computer Society . Retrieved 11 January 2013 .  httpswww.liquidplanner.comblog7-tools-to-gather-better-software-requirements  Laplante, Phillip A. 2009. Requirements Engineering for Software and Systems. CRC Press. Missing or empty url  help   Monperrus, M. Baudry, B. Champeau, J. Hoeltzener, B. Jzquel, J. M. 2011. Automated measurement of models of requirements . Software Quality Journal . 21 1 322. doi  10.1007s11219-011-9163-6 . Further reading  edit  Wiegers, Karl  Beatty, Joy 2013. Software Requirements 3rd ed.. Microsoft Press . ISBN   978-0-7356-7966-5 . Cockburn, Alistair 2001. Writing Effective Use Cases . Pearson Education . ISBN   0-201-70225-8 . Leffingwell, Dean 2000. Managing Software Requirements A Unified Approach . Addison-Wesley Professional . ISBN   0-201-61593-2 . v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleSoftware_requirements oldid914460842  Categories  Software requirements Hidden categories Pages using web citations with no URL