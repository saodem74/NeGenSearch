Modeling language From Wikipedia, the free encyclopedia Jump to navigation Jump to search A modeling language is any artificial language that can be used to express information or knowledge or systems in a structure that is defined by a consistent set of rules. The rules are used for interpretation of the meaning of components in the structure. Contents 1 Overview 2 Type of modeling languages 2.1 Graphical types 2.2 Textual types 2.3 More specific types 2.3.1 Algebraic 2.3.2 Behavioral 2.3.3 Discipline-Specific 2.3.4 Domain-specific 2.3.5 Framework-specific 2.3.6 Information and knowledge modeling 2.3.7 Object-oriented 2.3.8 Virtual reality 2.3.9 Others 3 Applications 4 Quality 4.1 Framework for evaluation 4.1.1 Domain appropriateness 4.1.2 Participant appropriateness 4.1.3 Modeller appropriateness 4.1.4 Comprehensibility appropriateness 4.1.5 Tool appropriateness 4.1.6 Organizational appropriateness 5 See also 6 References 7 External links 8 Further reading Overview  edit  A modeling language can be graphical or textual. 1  Graphical modeling languages use a diagram technique with named symbols that represent concepts and lines that connect the symbols and represent relationships and various other graphical notation to represent constraints. Textual modeling languages may use standardized keywords accompanied by parameters or natural language terms and phrases to make computer-interpretable expressions. An example of a graphical modeling language and a corresponding textual modeling language is EXPRESS . Not all modeling languages are executable, and for those that are, the use of them doesnt necessarily mean that programmers are no longer required. On the contrary, executable modeling languages are intended to amplify the productivity of skilled programmers, so that they can address more challenging problems, such as parallel computing and distributed systems . A large number of modeling languages appear in the literature. Type of modeling languages  edit  Graphical types  edit  Example of graphical modeling languages in the field of computer science, project management and systems engineering Behavior Trees are a formal, graphical modeling language used primarily in systems and software engineering . Commonly used to unambiguously represent the hundreds or even thousands of natural language requirements that are typically used to express the stakeholder needs for a large-scale software-integrated system. Business Process Modeling Notation BPMN, and the XML form BPML is an example of a Process Modeling language. C-K theory consists of a modeling language for design processes. DRAKON is a general-purpose algorithmic modeling language for specifying software-intensive systems, a schematic representation of an algorithm or a stepwise process, and a family of programming languages . EXPRESS and EXPRESS-G ISO 10303-11 is an international standard general-purpose data modeling language. Extended Enterprise Modeling Language EEML is commonly used for business process modeling across a number of layers. Flowchart is a schematic representation of an algorithm or a stepwise process. Fundamental Modeling Concepts FMC modeling language for software-intensive systems. IDEF is a family of modeling languages, which include IDEF0 for functional modeling, IDEF1X for information modeling, IDEF3 for business process modeling, IDEF4 for Object-Oriented Design and IDEF5 for modeling ontologies. Jackson Structured Programming JSP is a method for structured programming based on correspondences between data stream structure and program structure. LePUS3 is an object-oriented visual Design Description Language and a formal specification language that is suitable primarily for modeling large object-oriented  Java , C , C  programs and design patterns . Object-Role Modeling ORM in the field of software engineering is a method for conceptual modeling, and can be used as a tool for information and rules analysis. Petri nets use variations on exactly one diagramming technique and topology, namely the bipartite graph . The simplicity of its basic user interface easily enabled extensive tool support over the years, particularly in the areas of model checking, graphically oriented simulation, and software verification. Southbeach Notation is a visual modeling language used to describe situations in terms of agents that are considered useful or harmful from the modelers perspective. The notation shows how the agents interact with each other and whether this interaction improves or worsens the situation. Specification and Description Language SDL is a specification language targeted at the unambiguous specification and description of the behavior of reactive and distributed systems. SysML is a Domain-Specific Modeling language for systems engineering that is defined as a UML profile customization. Unified Modeling Language UML is a general-purpose modeling language that is an industry standard for specifying software-intensive systems. UML 2.0, the current version, supports thirteen different diagram techniques, and has widespread tool support. Service-oriented modeling framework SOMF is a holistic language for designing enterprise and application level architecture models in the space of enterprise architecture, virtualization, service-oriented architecture SOA, cloud computing, and more. 2  Architecture description language ADL is a language used to describe and represent the systems architecture of a system . AADL AADL is a modeling language that supports early and repeated analyses of a systems architecture with respect to performance-critical properties through an exetendable notation, a tool framework, and precisely defined semantics. Examples of graphical modeling languages in other fields of science. EAST-ADL is a Domain-Specific Modeling language dedicated to automotive system design. Energy Systems Language ESL, a language that aims to model ecological energetics  global economics. IEC 61499 defines Domain-Specific Modeling language dedicated to distribute industrial process measurement and control systems. Textual types  edit  Information models can also be expressed in formalized natural languages, such as Gellish. 3  Gellish has natural language variants such as Gellish Formal English and Gellish Formal Dutch  Gellish Formeel Nederlands , etc. Gellish Formal English is an information representation language or semantic modeling language that is defined in the Gellish English Dictionary-Taxonomy, which has the form of a Taxonomy-Ontology similarly for Dutch. Gellish Formal English is not only suitable to express knowledge, requirements and dictionaries, taxonomies and ontologies, but also information about i ndividual things. All that information is expressed in one language and therefore it can all be integrated, independent of the question whether it is stored in central or distributed or in federated databases. Information models in Gellish Formal English consists of collections of Gellish Formal English expressions, that use natural language terms and formalized phrases. For ex ample, a geographic information model might consist of a number of Gellish Formal English expressions, such as - the Eiffel tower is located in  Paris - Paris is classified as a  city whereas information requirements and knowledge can be expressed for example as follows - tower shall be located in a  geographical area - city is a kind of  geographical area Such Gellish Formal English expressions use names of concepts such as city and phrases that represent relation types such as is located in  and is classified as a  that should be selected from the Gellish English Dictionary-Taxonomy or of your own domain dictionary. The Gellish English Dictionary-Taxonomy enables the creation of semantically rich information models, because the dictionary contains more than 600 standard relation types and contains definitions of more than 40000 concepts. An information model in Gellish can express fa cts or make statements, queries and answers. More specific types  edit  In the field of computer science recently more specific types of modeling languages have emerged. Algebraic  edit  Algebraic Modeling Languages AML are high-level programming languages for describing and solving high complexity problems for large scale mathematical computation i.e. large scale optimization type problems. One particular advantage of AMLs like AIMMS , AMPL , GAMS , LPL , Mosel , MPL, OPL and OptimJ is the similarity of its syntax to the mathematical notation of optimization problems. This allows for a very concise and readable definition of problems in the domain of optimization, which is supported by certain language elements like sets, indices, algebraic expressions, powerful sparse index and data handling variables, constraints with arbitrary names. The algebraic form ulation of a model does not contain any hints how to process it. Behavioral  edit  Behavioral languages are designed to describe the observable behavior of complex systems consisting of components that execute concurrently. These languages focus on the description of key concepts such as concurrency, nondeterminism, synchronization, and communication. The semantic foundations of Behavioral languages are process calculus or process algebra . Discipline-Specific  edit  A discipline-specific modeling DspM language is focused on deliverables affiliated with a specific software development life cycle stage. Therefore, such language offers a distinct vocabulary, syntax, and notation for each stage, such as discovery, analysis, design, architecture, contraction, etc. For example, for the analysis phase of a project, the modeler employs specific analysis notation to deliver an analy sis proposition diagram. During the design phase, however, logical design notation is used to depict relationship between software entities. In addition, the discipline-specific modeling language best practices does not preclude practitioners from combining the various notations in a single diagram. Domain-specific  edit  Domain-specific modeling DSM is a software engineering methodology for designing and developing systems, most often IT systems such as computer software. It involves systematic use of a graphical domain-specific language DSL to represent the various facets of a system. DSM languages tend to support higher-level abstractions than General-purpose modeling languages, so they require less effort and fewer low-level details to specify a given system. Framework-specific  edit  A framework-specific modeling language FSML is a kind of domain-specific modeling language which is designed for an object-oriented application framework. FSMLs define framework-provided abstractions as FSML concepts and decompose the abstractions into features. The features represent implementation steps or choices. A FSML concept can be configured by selecting features and providing values for features. Such a concept configuration represents how the concept should be implemented in the code. In other words, concept configuration describes how the framework should be completed in order to create the implementation of the concept. Information and knowledge modeling  edit  Linked data and ontology engineering require host languages to represent entities and the relations between them , constraints between the properties of entities and relations, and metadata attributes . JSON-LD and RDF are two major and semantically almost equivalent languages in this context, primarily because they support statement reification and contextualisation which are essential properties to support the higher-order logic needed to reason about models. Model transformation is a common example of such reasoning. Object-oriented  edit  Object modeling language are modeling languages based on a standardized set of symbols and ways of arranging them to model part of an object oriented software design or system design. Some organizations use them extensively in combination with a software development methodology to progress from initial specification to an implementation plan and to communicate that plan to an entire team of developers and stakeholders. Because a modeling language is visual and at a higher-level of abstraction than code, using models encourages the generation of a shared visi on that may prevent problems of differing interpretation later in development. Often software modeling tools are used to construct these models, which may then be capable of automatic translation to code. Virtual reality  edit  Virtual Reality Modeling Language VRML, before 1995 known as the Virtual Reality Markup Language is a standard file format for representing 3-dimensional 3D interactive vector graphics, designed particularly with the World Wide Web in mind. Others  edit  Architecture Description Language Face Modeling Language Generative Modelling Language Java Modeling Language Promela Rebeca Modeling Language Service Modeling Language Web Services Modeling Language X3D Applications  edit  Various kinds of modeling languages are applied in different disciplines, including computer science , information management , business process modeling , software engineering , and systems engineering . Modeling languages can be used to specify system requirements, structures and behaviors. Modeling languages are intended to be used to precisely specify systems so that stakeholders e.g., customers, operators, analysts, designers can better understand the system being modeled. The more mature modeling languages are precise, consistent and executable. Informal diagramming techniques applied with drawing tools are expected to produce useful pictorial representations of system requirements, structures and behaviors, but not much else. Executable modeling languages applied with proper tool support, however, are expected to automate system verification and validation , simulation and code generation from the same representations. Quality  edit  A review of modelling languages is essential to be able to assign which languages are appropriate for different modelling settings. In the term settings we include stakeholders, domain and the knowledge connected. Assessing the language quality is a means that aims to achieve better models. Framework for evaluation  edit  Here language quality is stated in accordance with the SEQUAL framework for quality of models developed by Krogstie, Sindre and Lindland 2003, since this is a framework that connects the language quality to a framework for general model quality. Five areas are used in this framework to describe language quality and these are supposed to express both the conceptual as well as the visual notation of the language. We will not go into a thoroughly explanation of the underlying quality framework of models but concentrate on the areas used to explain the language quality framework. Domain appropriateness  edit  The framework states the ability to represent the domain as domain appropriateness. The statement appropriateness can be a bit vague, but in this particular context it means able to express . You should ideally only be able to express things that are in the domain but be powerful enough to include everything that is in the domain. This requirement might seem a bit strict, but the aim is to get a visually expressed model which includes everything relevant to the domain and excludes everything not appropriate for the domain. To achieve this, the language has to have a good distinction of which notations and syntaxes that are advantageous to present. Participant appropriateness  edit  To evaluate the participant appropriateness we try to identify how well the language expresses the knowledge held by the stakeholders. This involves challenges since a stakeholders knowledge is subjective. The knowledge of the stakeholder is both tacit and explicit. Both types of knowledge are of dynamic character. In this framework only the explicit type of knowledge is taken into account. The language should to a large extent express all the explicit knowledge of the stakeholders relevant to the domain. Modeller appropriateness  edit  Last paragraph stated that knowledge of the stakeholders should be presented in a good way. In addition it is imperative that the language should be able to express all possible explicit knowledge of the stakeholders. No knowledge should be left unexpressed due to lacks in the language. Comprehensibility appropriateness  edit  Comprehensibility appropriateness makes sure that the social actors understand the model due to a consistent use of the language. To achieve this the framework includes a set of criteria. The general importance that these express is that the language should be flexible, easy to organize and easy to distinguish different parts of the language internally as well as from other lan guages. In addition to this, the goal should be as simple as possible and that each symbol in the language has a unique representation. Tool appropriateness  edit  To ensure that the domain actually modelled is usable for analyzing and further processing, the language has to ensure that it is possible to reason in an automatic way. To achieve this it has to include formal syntax and semantics. Another advantage by formalizing is the ability to discover errors in an early stage. It is not always that the language best fitted for the techni cal actors is the same as for the social actors. Organizational appropriateness  edit  The language used is appropriate for the organizational context, e.g. that the language is standardized within the organization, or that it is supported by tools that are chosen as standard in the organization. See also  edit  Analogical models Anthropomorphism Metamodeling Model-based testing MBT Model-driven architecture Model-driven engineering MDE Modeling perspective Ontology language Scientific modelling Service-oriented modeling Visual modeling Visual programming language References  edit   Xiao He 2007. A metamodel for the notation of graphical modeling languages. In Computer Software and Applications Conference, 2007. COMPSAC 2007 - Vol. 1. 31st Annual International , Volume 1, Issue , 2427 July 2007, pp 219-224.  Bell, Michael 2008. Introduction to Service-Oriented Modeling. Service-Oriented Modeling Service Analysis, Design, and Architecture . Wiley  Sons. ISBN   978-0-470-14111-3 . .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em   Andries van Renssen, Gellish, A Generic Extensible Ontological Language Archived 2012-11-30 at the Wayback Machine , Delft University of Technology, 2005. External links  edit  Wikimedia Commons has media related to Modeling languages . Fundamental Modeling Concepts Software Modeling Languages Portal BIP -- Incremental Component-based Construction of Real-time Systems Gellish Formal English Further reading  edit  John Krogstie 2003 Evaluating UML using a generic quality framework . SINTEF Telecom andInformatics and IDI, NTNU, Norway Krogstie and Slvsberg 2003. Information Systems Engineering Conceptual Modeling in a Quality Perspective . Institute of computer and information sciences. Anna Gunhild Nysetvold and John Krogstie 2005. Assessing business processing modeling languages using a generic quality framework . Institute of computer and information sciences. v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons v t e Types of omputer language Types Architecture description Data exchange Hardware description Knowledge representation Markup Modeling Programming language Query Shading Specification Stylesheet Transformation See also CategoryLists of computer languages CategoryLists of programming languages List of programming languages by type Retrieved from  httpsen.wikipedia.orgwindex.phptitleModeling_language oldid907863563  Categories  Scientific modeling Specific models Specification languages Modeling languages Hidden categories Webarchive template wayback links Commons category link is on Wikidata