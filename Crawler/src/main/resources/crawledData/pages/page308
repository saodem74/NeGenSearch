Software verification and validation From Wikipedia, the free encyclopedia Jump to navigation Jump to search IEEE software life cycle SQA  Software quality assurance IEEE 730 SCM  Software configuration management IEEE 828 STD  Software test documentation IEEE 829 SRS  Software requirements specification IEEE 830 V V  Software verification and validation IEEE 1012 SDD  Software design description IEEE 1016 SPM  Software project management IEEE 1058 SUD  Software user documentation IEEE 1063 v t e In software project management , software testing , and software engineering , verification and validation  V V  is the process of checking that a software system meets specifications and that it fulfills its intended purpose. It may also be referred to as software quality control . It is normally the responsibility of software testers as part of the software development lifecycle . In simple terms, software verification is Assuming we should build X, does our software achieve its goals without any bugs or gaps On the other hand, software validation is Was X what we should have built Does X meet the high level requirements Contents 1 Definitions 1.1 Software verification 1.2 Artifact or specification verification 1.3 Software validation 1.4 Artifact or specification validation 1.5 Validation vs. verification 2 Related concepts 3 Classification of methods 3.1 Test cases 4 Independent Verification and Validation 4.1 ISVV History 4.2 ISVV Methodology 5 Regulatory environment 6 See also 7 Notes and references 8 External links Definitions  edit  Verification and validation are not the same things, although they are often confused. Boehm succinctly expressed the difference as 1  Verification Are we building the product right Validation Are we building the right product Building the product right checks that the specifications are correctly implemented by the system while building the right product refers back to the users needs . In some contexts, it is required to have written requirements for both as well as formal procedures or protocols for determining compliance. Building the product right implies the use of the Requirements Specification as input for the next phase of the development process, the design process, the output of which is the Design Specification. Then, it also implies the use of the Design Specification to feed the construction process. Every time the output of a process correctly implements its input specification, the s oftware product is one step closer to final verification. If the output of a process is incorrect, the developers are not building the product the stakeholders want correctly. This kind of verification is called artifact or specification verification. Building the right product implies creating a Requirements Specification that contains the needs and goals of the stakeholders of the software product. If such artifact is incomplete or wrong, the developers will not be able to build the product the stakeholders want. This is a form of artifact or specification validation. Note Verification begins before Validation and then they run in parallel until the software product is released.  clarification needed  Software verification  edit  It would imply to verify if the specifications are met by running the software but this is not possible e. g., how can anyone know if the architecturedesignetc. are correctly implemented by running the software. Only by reviewing its associated artifacts, someone can conclude if the specifications are met. Artifact or specification verification  edit  The output of each software development process stage can also be subject to verification when checked against its input specification see the definition by CMMI below. Examples of artifact verification Of the design specification against the requirement specification Do the architectural design, detailed design and database logical model specifications correctly implement the functional and non-functional requirement specifications Of the construction artifacts against the design specification Do the source code, user interfaces and database physical model correctly implement the design specification Software validation  edit  Software validation checks that the software product satisfies or fits the intended use high-level checking, i.e., the software meets the user requirements, not as specification artifacts or as needs of those who will operate the software only but, as the needs of all the stakeholders such as users, operators, administrators, managers, investors, etc.. There are two ways t o perform software validation internal and external. During internal software validation, it is assumed that the goals of the stakeholders were correctly understood and that they were expressed in the requirement artifacts precisely and comprehensively. If the software meets the requirement specification, it has been internally validated. External validation happens when it is performed by asking the stakeholders if the software meets their needs. Different software development methodologies call for different levels of user and stakeholder involvement and feedback so, external validation can be a discrete or a continuous event. Successful final external validation occurs when all the stakeholders accept the software product and express that it sat isfies their needs. Such final external validation requires the use of an acceptance test which is a dynamic test . However, it is also possible to perform internal static tests to find out if it meets the requirements specification but that falls into the scope of static verification because the software is not running. Artifact or specification validation  edit  Requirements should be validated before the software product as a whole is ready the waterfall development process requires them to be perfectly defined before design starts but, iterative development processes do not require this to be so and allow their continual improvement. Examples of artifact validation User Requirements Specification validation User requirements as stated in a document called User Requirements Specification are validated by checking if they indeed represent the will and goals of the stakeholders. This can be done by interviewing them and asking them directly static testing or even by releasing prototypes and having the users and stakeholders to assess them dynamic testing. User input validation User input gathered by any peripheral such as keyboard, bio-metric sensor, etc. is validated by checking if the input provided by the software operators or users meet the domain rules and constraints such as data type, range, and format. Validation vs. verification  edit  According to the Capability Maturity Model CMMI-SW v1.1, Software Validation The process of evaluating software during or at the end of the development process to determine whether it satisfies specified requirements. IEEE-STD-610 Software Verification The process of evaluating software to determine whether the products of a given development phase satisfy the conditions imposed at the start of that phase. IEEE-STD-610 Validation during the software development process can be seen as a form of User Requirements Specification validation and, that at the end of the development process is equivalent to Internal andor External Software validation. Verification, from CMMIs point of view, is evidently of the artifact kind. In other words, software verification ensures that the output of each phase of the software development process effectively carry out what its corresponding input artifact specifies requirement -  design -  software product, while software validation ensures that the software product meets the needs of all the stakeholders therefore, the requirement specification was correctly and accurately expressed in the first place. Software verification ensures that you built it right and confirms that the product, as provided, fulfills the plans of the developers. Software validation ensures that you built the right thing and confirms that the product, as provided, fulfills the intended use and goals of the stakeholders. This article has used the strict or narrow definition of verification. From a testing perspective Fault  wrong or missing function in the code. Failure  the manifestation of a fault during execution. The software was not effective. It does not do what it is supposed to do. Malfunction  according to its specification the system does not meet its specified functionality. The software was not efficient it took too many resources such as CPU cycles, it used too much memory, performed too many IO operations, etc., it was not usable, it was not reliable, etc. It does not do something how it is supposed to do it. Related concepts  edit  Both verification and validation are related to the concepts of quality and of software quality assurance . By themselves, verification and validation do not guarantee software quality planning, traceability , configuration management and other aspects of software engineering are required. Within the modeling and simulation M S community, the definitions of verification, validation and accreditation are similar M S Verification is the process of determining that a computer model , simulation, or federation of models and simulations implementations and their associated data accurately represent the developers conceptual description and specifications. 2  M S Validation is the process of determining the degree to which a model, simulation, or federation of models and simulations, and their associated data are accurate representations of the real world from the perspective of the intended uses. 2  Accreditation is the formal certification that a model or simulation is acceptable to be used for a specific purpose. 2  The definition of M S validation focuses on the accuracy with which the M S represents the real-world intended uses. Determining the degree of M S accuracy is required because all M S are approximations of reality, and it is usually critical to determine if the degree of approximation is acceptable for the intended uses. This stands in contrast to software validation. Classification of methods  edit  In mission-critical software systems, where flawless performance is absolutely necessary, formal methods may be used to ensure the correct operation of a system. 3  These formal methods can prove costly, however, representing as much as 80 percent of total software design cost. 4  Test cases  edit  Main article Test case A test case is a tool used in the process. Test cases may be prepared for software verification and software validation to determine if the product was built according to the requirements of the user. Other methods, such as reviews, may be used early in the life cycle to provide for software validation. Independent Verification and Validation  edit  ISVV stands for Independent Software Verification and Validation . ISVV is targeted at safety-critical software systems and aims to increase the quality of software products, thereby reducing risks and costs through the operational life of the software. ISVV provides assurance that software performs to the specified level of confidence and within its designed parameters and defined requirements. ISVV activities are performed by independent engineering teams, not involved in the software development process, to assess the processes and the resulting products. The ISVV team independency is performed at three different levels financial, managerial and technical. ISVV goes far beyond traditional verification and validation techniques, applied by development teams. While the latter aim to ensure that the software performs well against the nominal requirements, ISVV is focused on non-functional requirements such as robustness and reliability, and on conditions that can lead the software to fail. ISVV results and findings are fed back to the development teams for correction and improvement. ISVV History  edit  ISVV derives from the application of IV V Independent Verification and Validation to the software. Early ISVV application as known today dates back to the early 1970s when the U.S. Army sponsored the first significant program related to IV V for the Safeguard Anti-Ballistic Missile System. By the end of the 1970s IV V was rapidly becoming popular. The constant increase in complexity, size and importance of the software lead to an increasing demand on IV V applied to software ISVV. Meanwhile, IV V and ISVV for software systems gets consolidated and is now widely used by organisations such as the DoD, FAA, NASA 5  and ESA. 6  IV V is mentioned in DO-178B, ISOIEC 12207 and formalised in IEEE 1012. Initially in 2004-2005, a European consortium led by the European Space Agency , and composed by DNVN, 7  Critical Software SAP, 8  TermaDK 9  and CODA ScisysUK 10  created the first version of a guide devoted to ISVV, called ESA Guide for Independent Verification and Validation with support from other organizations, e.g. SoftWcare SL E  11  , etc. In 2008 the European Space Agency released a second version, being SoftWcare SL was the supporting editor having received inputs from many different European Space ISVV stakeholders. This guide covers the methodologies applicable to all the software engineering phases in what concerns ISVV. ISVV Methodology  edit  ISVV is usually composed by five principal phases, these phases can be executed sequentially or as results of a tailoring process. ISVV Planning Planning of ISVV Activities System Criticality Analysis Identification of Critical Components through a set of RAMS activities Value for Money Selection of the appropriate Methods and Tools Requirements Verification Verification for Completeness, Correctness, Testability Design Verification Design adequacy and conformance to Software Requirements and Interfaces Internal and External Consistency Verification of Feasibility and Maintenance Code Verification Verification for Completeness, Correctness, Consistency Code Metrics Analysis Coding Standards Compliance Verification Validation Identification of unstable componentsfunctionalities Validation focused on Error-Handling complementary not concurrent validation regarding the one performed by the Development team More for the Money, More for the Time Compliance with Software and System Requirements Black box testing and White box testing techniques Experience based techniques Regulatory environment  edit  Verification and validation must meet the compliance requirements of law regulated industries, which is often guided by government agencies 12  13  or industrial administrative authorities. For instance, the FDA requires software versions and patches to be validated. 14  See also  edit  Compiler correctness Cross-validation Formal verification Functional specification Independent Verification and Validation Facility International Software Testing Qualifications Board Software verification Software requirements specification Validation drug manufacture Verification and validation  General Verification and Validation of Computer Simulation Models Independent verification systems Software testing Software engineering Software quality Static code analysis Notes and references  edit   Pham, H. 1999. Software Reliability . John Wiley  Sons, Inc. p.  567. ISBN   9813083840 . Software Validation. The process of ensuring that the software is performing the right process. Software Verification. The process of ensuring that the software is performing the process right. Likewise and also there In short, Boehm 3 expressed the difference between the software verification and software validation as follows Verification Are we building the product right Validation Are we building the right product. .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation . cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-po sitionright .1em center.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno -repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-o utput .cs1-registration,.mw-parser-output .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  a b c Department of Defense Documentation of Verification, Validation  Accreditation VV A for Models and Simulations. Missile Defense Agency. 2008. Cite journal requires journal  help   Wang, C.-W. Ostroff, J.S. Hudon, S. 2014. Precise Documentation and Validation of Requirements. In Artho, C. lveczky, P.C. eds.. Formal Techniques for Safety-Critical Systems . Springer. pp.  262279. ISBN   9783319054162 . Retrieved 18 May 2018 .  Koopman, P. Reliability, Safety, and Security in Everyday Embedded Systems. In Bondavelli, A. Brasileiro, F. Rajsbaum, S. eds.. Dependable Computing . Springer. doi  10.1007978-3-540-75294-3_1 . ISBN   978-3-540-75294-3 .  NASA IV V Facility  ESA Web site  DNV Web site  Critical Software SA Web site  Terma Web site  Scisys Web site  SoftWcare SL Web site  General Principles of Software validation Final Guidance for Industry and FDA Staff PDF . Food and Drug Administration . 11 January 2002 . Retrieved 12 July 2009 .  Guidance for Industry Part 11, Electronic Records Electronic Signatures  Scope and Application PDF . Food and Drug Administration . August 2003 . Retrieved 12 July 2009 .  Guidance for Industry Cybersecurity for Networked Medical Devices Containing Off-the Shelf OTS Software PDF . Food and Drug Administration . 14 January 2005 . Retrieved 12 July 2009 . .mw-parser-output .refbeginfont-size90margin-bottom0.5em.mw-parser-output .refbegin-hanging-indentsullist-style-typenonemargin-left0.mw-parser-output .refbegin-hanging-indentsulli,.mw-parser-output .refbegin-hanging-indentsdlddmargin-left0padding-left3.2emtext-indent-3.2emlist-stylenone.mw-parser-output .refbegin-100font-size100 1012-2012 IEEE Standard for System and Software Verification and Validation . 2012. doi  10.1109IEEESTD.2012.6204026 . ISBN   978-0-7381-7268-2 . Tran, E. 1999. VerificationValidationCertification . In Koopman, P. ed.. Topics in Dependable Embedded Systems . Carnegie Mellon University . Retrieved 2007-05-18 . Menzies, T. Y. Hu 2003. Data mining for very busy people. Computer . 36 1 2229. doi  10.1109MC.2003.1244531 . External links  edit  Chapter on Software quality including VnV in SWEBOK v t e Software engineering Fields Computer programming Requirements engineering Software deployment Software design Software maintenance Software testing Systems analysis Formal methods Concepts Data modeling Enterprise architecture Functional specification Modeling language Orthogonality Programming paradigm Software Software archaeology Software architecture Software configuration management Software development methodology Software development process Software quality Software quality assurance Software verification and validation Structured analysis Orientations Agile Aspect-oriented Object orientation Ontology Service orientation SDLC Models Developmental Agile EUP Executable UML Incremental model Iterative model Prototype model RAD UP Scrum Spiral model V-Model Waterfall model XP Other SPICE CMMI Data model ER model Function model Information model Metamodeling Object model Systems model View model Languages IDEF UML USL SysML Software engineers Victor Basili Kent Beck Grady Booch Fred Brooks Barry Boehm Peter Chen Danese Cooper Ward Cunningham Tom DeMarco Edsger W. Dijkstra Delores M. Etter Martin Fowler Adele Goldstine Margaret Hamilton C. A. R. Hoare Lois Haibt Mary Jean Harrold Grace Hopper Watts Humphrey Michael A. Jackson Ivar Jacobson Alan Kay Nancy Leveson Stephen J. Mellor Bertrand Meyer David Parnas Trygve Reenskaug Winston W. Royce James Rumbaugh Mary Shaw Peri Tarr Elaine Weyuker Niklaus Wirth Edward Yourdon Related fields Computer science Computer engineering Project management Risk management Systems engineering Category Commons Retrieved from  httpsen.wikipedia.orgwindex.phptitleSoftware_verification_and_validation oldid909756658  Categories  Software testing Formal methods Software quality Hidden categories CS1 errors missing periodical Wikipedia articles needing clarification from March 2019