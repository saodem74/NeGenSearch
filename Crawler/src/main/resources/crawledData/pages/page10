Software engineering professionalism From Wikipedia, the free encyclopedia Jump to navigation Jump to search Software engineering professionalism is a movement to make software engineering a profession , with aspects such as degree and certification programs, professional associations , professional ethics , and government licensing. The field is a licensed discipline in Texas in the United States 1   Texas Board of Professional Engineers , since 2013, Engineers Australia 2  Course Accreditation since 2001, not Licensing, and many provinces in Canada. Contents 1 History 2 Ethics 2.1 Examples of codes of conduct 2.2 Opinions on ethics 3 Professional responsibilities in developing software 4 Licensing 4.1 Licensing and certification exams 4.2 Right to practise in Ontario 4.3 Right to practise in Quebec 4.4 Software engineering SEng guidelines by Canadian provinces 5 See also 6 References 7 External links History  edit  In 1993 the IEEE and ACM began a joint effort called JCESEP , which evolved into SWECC in 1998 to explore making software engineering into a profession. The ACM pulled out of SWECC in May 1999, objecting to its support for the Texas professionalization efforts, of having state licenses for software engineers . ACM determined that the state of knowledge and practice in software engineering was too immature to warrant licensing, and that licensing would give false assurances of competence even if the body of knowledge were mature. 3  The IEEE continued to support making software engineering a branch of traditional engineering. In Canada the Canadian Information Processing Society established the Information Systems Professional certification process. Also, by the late 90s 1999 in British Columbia the discipline of software engineering as a professional engineering discipline was officially created. This has caused some disputes between the provincial engineering associations and companies who call their developers software engineers, even though these developers have not been licensed by any eng ineering association. 4  In 1999, the Panel of Software Engineering was formed as part of the settlement between Engineering Canada and the Memorial University of Newfoundland over the schools use of the term software engineering in the name of a computer science program. Concerns were raised over inappropriate use of the name software engineering to describe non-engineering programs could lead to student and public confusion, and ultimately threaten public safety. 5  The Panel issued recommendations to create a Software Engineering Accreditation Board, but the task force created to carry out the recommendations were unable to get the various stakeholders to agree to concrete proposals, resulting in separate accreditation boards. 6  7  Ethics  edit  Software engineering ethics is a large field. In some ways it began as an unrealistic attempt to define bugs as unethical.  citation needed  More recently it has been defined as the application of both computer science and engineering philosophy, principles, and practices to the design and development of software systems. Due to this engineering focus and the increased use of software in mission critical and human critical systems, where failure can result in large losses of capital but more importantly lives suc h as the Therac-25 system, many ethical codes have been developed by a number of societies, associations and organizations. These entities, such as the ACM , IEEE , APEGBC 8  and Institute for Certification of Computing Professionals ICCP 9  have formal codes of ethics. Adherence to the code of ethics is required as a condition of membership or certification. According to the ICCP, violation of the code can result in revocation of the certificate. Also, all engineering societies require conformance to their ethical codes violation of the code results in the revocation of the license to practice engineering in th e societys jurisdiction. These codes of ethics usually have much in common. They typically relate the need to act consistently with the clients interest, employers interest, and most importantly the publics interest. They also outline the need to act with professionalism and to promote an ethical approach to the profession. A Software Engineering Code of Ethics 10  11  has been approved by the ACM and the IEEE-CS as the standard for teaching and practicing software engineering. Examples of codes of conduct  edit  The following are examples of codes of conduct for Professional Engineers. These 2 have been chosen because both jurisdictions have a designation for Professional Software Engineers. Association of Professional Engineers and Geoscientists of British Columbia APEGBC 12  All members in the associations code of Ethics must ensure that government, the public can rely on BCs professional engineers and Geoscientists to act at all times with fairness, courtesy and good faith to their employers, employee and customers, and to uphold the truth, honesty and trustworthiness, and to safe guard human life and the environment. This is just one of the ma ny ways in which BCs Professional Engineers and Professional Geoscientists maintain their competitive edge in todays global marketplace. Association of Professional Engineers and Geoscientists of Alberta APEGA 13  Different with British Columbia, the Alberta Government granted self governance to engineers, Geoscientists and geophysicists. All members in the APEGA have to accept legal and ethical responsibility for the work and to hold the interest of the public and society. The APEGA is a standards guideline of professional practice to uphold the protection of public interest for engine ering, Geoscientists and geophysics in Alberta. Opinions on ethics  edit  Bill Joy argued that better software can only enable its privileged end users, make reality more power-pointy as opposed to more humane, and ultimately run away with itself so that the future doesnt need us. He openly questioned the goals of software engineering in this respect, asking why it isnt trying to be more ethical rather than more efficient.  citation needed  In his book Code and Other Laws of Cyberspace , Lawrence Lessig argues that computer code can regulate conduct in much the same way as the legal code. Lessig and Joy urge people to think about the consequences of the software being developed, not only in a functional way, but also in how it affects the public and society as a whole. Overall, due to the youth of software engineering, many of the ethical codes and values have been borrowed from other fields, such as mechanical and civil engineering. However, there are many ethical questions that even these, much older, disciplines have not encountered. Questions about the ethical impact of internet applications, which have a global reach, have never been e ncountered until recently and other ethical questions are still to be encountered. This means the ethical codes for software engineering are a work in progress, that will change and update as more questions arise.  citation needed  Professional responsibilities in developing software  edit  Whos responsible The developers work with clients and users to define system requirements. Once the system is built if any accidents occur, such as economical harm or other, who is responsible If an independent QA team does integration testing and does not discover a critical fault in the system, who is ethically responsible for damage caused by that fault Responsibilities for engineering and geoscience software Developing software is a highly risky proposition. The software development process is a complex undertaking consisting of specifying, designing, implementing, and testing. Any small mistake or fault will cause unlimited damage to society. Professional Members contribute to the success of software development projects. However, the Association of Professional Engineering and Ge oscience is primarily concerned with their responsibility for minimizing the risk of failure and protecting the public interest. 14  Licensing  edit  The American National Society of Professional Engineers provides a model law and lobbies legislatures to adopt occupational licensing regulations. The model law requires a four-year degree from a university program accredited by the Engineering Accreditation Committee EAC of the Accreditation Board for Engineering and Technology ABET, an eight-hour examination on the fundamentals of engineering FE usually taken in the senior year of college, four years of acceptable experience, a second examination on principles and practice, and written recommendations from other professional engineers. Some states require continuing education. In Texas Donald Bagert of Texas became the first professional software engineer in the U.S. on September 4, 1998 or October 9, 1998. As of May 2002, Texas had issued 44 professional engineering licenses for software engineers. Rochester Institute of Technology granted the first Software Engineering bachelors degrees in 2001. Other universities have followed. Professional licensing has been criticized for many reasons. 3  The field of software engineering is too immature Licensing would give false assurances of competence even if the body of knowledge were mature Software engineers would have to study years of calculus , physics , and chemistry to pass the exams, which is irrelevant to most software practitioners. Many most computer science majors dont earn degrees in engineering schools, so they are probably unqualified to pass engineering exams. In Canada , most people who earn professional software engineering licenses study software engineering, computer engineering or electrical engineering. Many times these people already qualified to become professional engineers in their own fields but choose to be licensed as software engineers to differentiate themselves from computer scientists. In British Columbia , The Limited Licence is granted by the Association of Professional Engineers and Geoscientists of British Columbia. Fees are collected by APEGBC for the Limited Licence. Licensing and certification exams  edit  Since 2002 the IEEE Computer Society offered the Certified Software Development Professional CSDP certification exam in 2015 this was replaced by several similar certifications. A group of experts from industry and academia developed the exam and maintained it. Donald Bagert, and at later period Stephen Tockey headed the certification committee. Contents of the exam centered around the SWEBOK  Software Engineering Body of Knowledge  guide, with the additional emphasis on Professional Practices and Software Engineering Economics knowledge areas KAs. The motivation was to produce a structure at an international level for software engineerings knowledge areas. 15  16  Right to practise in Ontario  edit  A person must be granted the professional engineer licence to have the right to practise professional software engineering as a Professional Engineer in Ontario. To become licensed by Professional Engineers Ontario PEO, you must Be at least 18 years of age. Be a citizen or permanent resident of Canada. Be of good character. You will be requested to answer questions and make a written declaration on your application form to test your ethics. Meet PEOs stipulated academic requirements for licensure. Pass the Professional Practice Examination. Fulfill engineering work experience requirements. However, its good to note that many graduates of Software Engineering programs are unable to obtain the PEO licence since the work they qualify for after graduation as entry-level is not related to engineering ie. working in a software company writing code or testing code would not qualify them as their work experience does not fulfill the work experience guidelines the PEO se ts. Also Software Engineering programs in Ontario and other provinces involve a series of courses in electrical, electronics, and computers engineering qualifying the graduates to even work in those fields. Right to practise in Quebec  edit  A person must be granted the engineer licence to have the right to practise professional software engineering in Quebec. To become licensed by the Quebec order of engineers in French   Ordre des ingnieurs du Qubec - OIQ, you must Be at least 18 years of age. Be of good character. You will be requested to answer questions and make a written declaration on your application form to test your ethics. Meet OIQs stipulated academic requirements for licensure. In this case, the academic program should be accredited by the Canadian Engineering Accreditation Board - CEAB Pass the Professional Practice Examination. Fulfill engineering work experience requirements. Pass the working knowledge of French exam Software engineering SEng guidelines by Canadian provinces  edit  The term engineer in Canada is restricted to those who have graduated from a qualifying engineering programme. Some universities software engineering programmes are under the engineering faculty and therefore qualify, for example the University of Waterloo . Others, such as the University of Toronto have software engineering in the computer science faculty which does not qualify. This distinction has to do with the way the profession is regulated. Degrees in Engineering must be accredited by a national panel and have certain specific requirements to allow the graduate to pursue a career as a professional engineer. Computer Science degrees, even those with specialt ies in software engineering, do not have to meet these requirements so the computer science departments can generally teach a wider variety of topics and students can graduate without specific courses required to pursue a career as a professional engineer. 17  See also  edit  Bachelor of Science in Information Technology Bachelor of Software Engineering List of software engineering topics Software engineering demographics Software engineering economics References  edit   httpsengineers.texas.govsoftware.html  httpswww.engineersaustralia.org.auabout-usprogram-accreditation  a b A Summary of the ACM Position on Software Engineering as a Licensed Engineering Profession PDF , July 17, 2000 .mw-parser-output cite.citationfont-styleinherit.mw-parser-output .citation qquotes.mw-parser-output .citation .cs1-lock-free abackgroundurlupload.wikimedia.orgwikipediacommonsthumb665Lock-green.svg9px-Lock-green.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration abackgroundurlupload.wikimedia.orgwikipediacommonsthumbdd6Lock-gray-alt-2.svg9px-Lock-gray-alt-2.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output .citation .cs1-lock-subscription abackgroundurlupload.wikimedia.orgwikipediacommonsthumbaaaLock-red-alt-2.svg9px-Lock-red-alt-2.svg.pngno-repeatbackground-positionright .1em ce nter.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registrationcolor555.mw-parser-output .cs1-subscription span,.mw-parser-output .cs1-registration spanborder-bottom1px dottedcursorhelp.mw-parser-output .cs1-ws-icon abackgroundurlupload.wikimedia.orgwikipediacommonsthumb44cWikisource-logo.svg12px-Wikisource-logo.svg.pngno-repeatbackground-positionright .1em center.mw-parser-output code.cs1-codecolorinheritbackgroundinheritborderinheritpaddinginherit.mw-parser-output .cs1-hidden-errordisplaynonefont-size100.mw-parser-output .cs1-visible-errorfont-size100.mw-parser-output .cs1-maintdisplaynonecolor33aa33margin-left0.3em.mw-parser-output .cs1-subscription,.mw-parser-output .cs1-registration,.mw-parser-outpu t .cs1-formatfont-size95.mw-parser-output .cs1-kern-left,.mw-parser-output .cs1-kern-wl-leftpadding-left0.2em.mw-parser-output .cs1-kern-right,.mw-parser-output .cs1-kern-wl-rightpadding-right0.2em  Archived copy . Archived from the original on 2008-06-25 . Retrieved 2008-07-30 . Cite uses deprecated parameter deadurl  help  CS1 maint archived copy as title  link   httpwww.engineerscanada.caepub_ceo_01_02.cfm  httpwww.cips.casofteng  httpwww.peo.on.caindex.phpci_id26349la_id1.htm  APEGBC  Institute for Certification of Computing Professionals ICCP ,  Software Engineering Code of Ethics and Professional Practice  Computer Society and ACM Approve Software Engineering Code of Ethics  Association of Professional Engineers and Geoscientists of British Columbia APEGBC  Association of Professional Engineers and Geoscientists of Alberta APEGA  httpswww.apega.caassetsPDFssoftware.pdf  Moore, Melody M. 2003. A License to Practice Software Engineering. IEEE Software , 203, 112-113.  For more information, see httpse.uwaterloo.cajmatleetalkskwsqa02.pdf httpwww.faqs.orgfaqsengineeringpe-eit-exam Apr 10, 2002 httpwww.sdmagazine.comdocumentss746sdm0003g0003g.htm ACM position on licensing of software engineers, httpwww.acm.orgservingse_policy httpwww.cs.virginia.edujckpublicationscacm.2002.pdf--   Excerpt taken from GOV.ON.CA , See also British Columbia Saskatchewan Manitoba Ontario Quebec NWT External links  edit  Professional licensing in Texas SE As Code of Ethics A Review of the Professionalization of the Software Industry Has it Made Software Engineering a Real Profession, An academic article documenting the progress of SE professionalization Retrieved from  httpsen.wikipedia.orgwindex.phptitleSoftware_engineering_professionalism oldid913508284  Categories  Software engineering Hidden categories CS1 errors deprecated parameters CS1 maint archived copy as title All articles with unsourced statements Articles with unsourced statements from July 2012